
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "account_factory" = rec {
      packageId = "account_factory";
      build = internal.buildRustCrateWithFeatures {
        packageId = "account_factory";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "authorization" = rec {
      packageId = "authorization";
      build = internal.buildRustCrateWithFeatures {
        packageId = "authorization";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "base_account" = rec {
      packageId = "base_account";
      build = internal.buildRustCrateWithFeatures {
        packageId = "base_account";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "processor" = rec {
      packageId = "processor";
      build = internal.buildRustCrateWithFeatures {
        packageId = "processor";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "registry" = rec {
      packageId = "registry";
      build = internal.buildRustCrateWithFeatures {
        packageId = "registry";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "storage_account" = rec {
      packageId = "storage_account";
      build = internal.buildRustCrateWithFeatures {
        packageId = "storage_account";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "token-helpers-test" = rec {
      packageId = "token-helpers-test";
      build = internal.buildRustCrateWithFeatures {
        packageId = "token-helpers-test";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "token_transfer" = rec {
      packageId = "token_transfer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "token_transfer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-tests" = rec {
      packageId = "valence-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-utils" = rec {
      packageId = "valence-utils";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-utils";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "zk_verifier" = rec {
      packageId = "zk_verifier";
      build = internal.buildRustCrateWithFeatures {
        packageId = "zk_verifier";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "account_factory" = rec {
        crateName = "account_factory";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/account_factory; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "base_account";
            packageId = "base_account";
            features = [ "cpi" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "spl-associated-token-account";
            packageId = "spl-associated-token-account";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
          {
            name = "storage_account";
            packageId = "storage_account";
            features = [ "cpi" ];
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" ];
      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [ "loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [ "std" "dep:object" "dep:memmap2" "dep:typed-arena" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1c32aviraqag7926xcb9sybdm36v5vh9gnxpn4pxdwjc50zl28ni";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "blobby" = [ "dep:blobby" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "rand_core" ];
          "dev" = [ "blobby" ];
          "getrandom" = [ "crypto-common/getrandom" "rand_core" ];
          "heapless" = [ "dep:heapless" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "rand_core" ];
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1853796anlwp4kqim0s6wm1srl4ib621nm0cl2h3c8klsjkgfsdi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "aes-gcm-siv" = rec {
        crateName = "aes-gcm-siv";
        version = "0.11.1";
        edition = "2021";
        sha256 = "039ycyz9hijvrv2hiks9a1099yprqpkk3v39shb58dx99c9q81xf";
        libName = "aes_gcm_siv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "polyval";
            packageId = "polyval";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "alloc" = [ "aead/alloc" ];
          "default" = [ "aes" "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" ];
          "heapless" = [ "aead/heapless" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
        };
        resolvedDefaultFeatures = [ "aes" "alloc" "default" "getrandom" ];
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "anchor-attribute-access-control" = rec {
        crateName = "anchor-attribute-access-control";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1ky0z4db10zsypx98x4c0i3m922ga0r6n0jk2bqss62d38agsw1z";
        procMacro = true;
        libName = "anchor_attribute_access_control";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
        };
      };
      "anchor-attribute-account" = rec {
        crateName = "anchor-attribute-account";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0r50i19pwjnagjh8xgc61z1lm1xgl97sf1vgw20rary7awf2cnki";
        procMacro = true;
        libName = "anchor_attribute_account";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
            features = [ "hash" ];
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-attribute-constant" = rec {
        crateName = "anchor-attribute-constant";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1r02c4l2y0h2i4j04w99r06vgr492zk7j1syqb2j20qjmvw6s3bk";
        procMacro = true;
        libName = "anchor_attribute_constant";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-attribute-error" = rec {
        crateName = "anchor-attribute-error";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1vrkndpn9p3s5m1pdqsq1r69ayx1wnwazp3l1f4b4drsri4y9ri7";
        procMacro = true;
        libName = "anchor_attribute_error";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-attribute-event" = rec {
        crateName = "anchor-attribute-event";
        version = "0.31.1";
        edition = "2021";
        sha256 = "17yl3pygjvx8dghk2zqxqzcld27gqpg9mgnrzjpqbx5dai60wwfp";
        procMacro = true;
        libName = "anchor_attribute_event";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
            features = [ "hash" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "event-cpi" = [ "anchor-syn/event-cpi" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-attribute-program" = rec {
        crateName = "anchor-attribute-program";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0g685s5k2qagndi7bql7rrvfvaq2nh6j6qjjycrfpbdfn94zvv05";
        procMacro = true;
        libName = "anchor_attribute_program";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang-idl";
            packageId = "anchor-lang-idl";
            features = [ "convert" ];
          }
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
          "interface-instructions" = [ "anchor-syn/interface-instructions" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-derive-accounts" = rec {
        crateName = "anchor-derive-accounts";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0jb1gb5x7hg2gkj1vj9hlqq8xr3q745h39v2yid4k21sg5hd32dy";
        procMacro = true;
        libName = "anchor_derive_accounts";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "allow-missing-optionals" = [ "anchor-syn/allow-missing-optionals" ];
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
          "init-if-needed" = [ "anchor-syn/init-if-needed" ];
        };
        resolvedDefaultFeatures = [ "idl-build" "init-if-needed" ];
      };
      "anchor-derive-serde" = rec {
        crateName = "anchor-derive-serde";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1r76v47mxs3gpwfz03hc38lc12a7m9x6gg1avp1f1gxpmiwfximb";
        procMacro = true;
        libName = "anchor_derive_serde";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "borsh-derive-internal";
            packageId = "borsh-derive-internal";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
        resolvedDefaultFeatures = [ "idl-build" ];
      };
      "anchor-derive-space" = rec {
        crateName = "anchor-derive-space";
        version = "0.31.1";
        edition = "2021";
        sha256 = "19yf4b8cix2h1jr71qzn3sn1zr7kyqrw0wp4l1ax6vrzf3002jhk";
        procMacro = true;
        libName = "anchor_derive_space";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" ];
          }
        ];

      };
      "anchor-lang" = rec {
        crateName = "anchor-lang";
        version = "0.31.1";
        edition = "2021";
        sha256 = "02hsaqaknyk78vp2rfa1fbz8s7w6izh9dhb2ywqfj1ar0lbv3fp6";
        libName = "anchor_lang";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-attribute-access-control";
            packageId = "anchor-attribute-access-control";
          }
          {
            name = "anchor-attribute-account";
            packageId = "anchor-attribute-account";
          }
          {
            name = "anchor-attribute-constant";
            packageId = "anchor-attribute-constant";
          }
          {
            name = "anchor-attribute-error";
            packageId = "anchor-attribute-error";
          }
          {
            name = "anchor-attribute-event";
            packageId = "anchor-attribute-event";
          }
          {
            name = "anchor-attribute-program";
            packageId = "anchor-attribute-program";
          }
          {
            name = "anchor-derive-accounts";
            packageId = "anchor-derive-accounts";
          }
          {
            name = "anchor-derive-serde";
            packageId = "anchor-derive-serde";
          }
          {
            name = "anchor-derive-space";
            packageId = "anchor-derive-space";
          }
          {
            name = "anchor-lang-idl";
            packageId = "anchor-lang-idl";
            optional = true;
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "allow-missing-optionals" = [ "anchor-derive-accounts/allow-missing-optionals" ];
          "anchor-debug" = [ "anchor-attribute-access-control/anchor-debug" "anchor-attribute-account/anchor-debug" "anchor-attribute-constant/anchor-debug" "anchor-attribute-error/anchor-debug" "anchor-attribute-event/anchor-debug" "anchor-attribute-program/anchor-debug" "anchor-derive-accounts/anchor-debug" ];
          "anchor-lang-idl" = [ "dep:anchor-lang-idl" ];
          "event-cpi" = [ "anchor-attribute-event/event-cpi" ];
          "idl-build" = [ "anchor-attribute-account/idl-build" "anchor-attribute-constant/idl-build" "anchor-attribute-event/idl-build" "anchor-attribute-error/idl-build" "anchor-attribute-program/idl-build" "anchor-derive-accounts/idl-build" "anchor-derive-serde/idl-build" "anchor-lang-idl/build" ];
          "init-if-needed" = [ "anchor-derive-accounts/init-if-needed" ];
          "interface-instructions" = [ "anchor-attribute-program/interface-instructions" ];
          "lazy-account" = [ "anchor-attribute-account/lazy-account" "anchor-derive-serde/lazy-account" ];
        };
        resolvedDefaultFeatures = [ "anchor-lang-idl" "derive" "idl-build" "init-if-needed" ];
      };
      "anchor-lang-idl" = rec {
        crateName = "anchor-lang-idl";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0624ibhvrl0vs0ac1zlaslpmivrw1jmsani6jvi6hpwr46fmks1j";
        libName = "anchor_lang_idl";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang-idl-spec";
            packageId = "anchor-lang-idl-spec";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
          }
        ];
        features = {
          "build" = [ "regex" ];
          "convert" = [ "heck" "sha2" ];
          "heck" = [ "dep:heck" ];
          "regex" = [ "dep:regex" ];
          "sha2" = [ "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "build" "convert" "heck" "regex" "sha2" ];
      };
      "anchor-lang-idl-spec" = rec {
        crateName = "anchor-lang-idl-spec";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0f1q20zw3819jibamcl2rpv0jbj7yyhjjfmcplhyc3s42lqi9prb";
        libName = "anchor_lang_idl_spec";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "anchor-spl" = rec {
        crateName = "anchor-spl";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0sq7rnjzrksa4frjfb3f97ycwlza0idrlb6h9gvr81icfrfwn21w";
        libName = "anchor_spl";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "derive" ];
          }
          {
            name = "spl-associated-token-account";
            packageId = "spl-associated-token-account";
            optional = true;
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
            optional = true;
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            optional = true;
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            optional = true;
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-group-interface";
            packageId = "spl-token-group-interface";
            optional = true;
          }
          {
            name = "spl-token-metadata-interface";
            packageId = "spl-token-metadata-interface";
            optional = true;
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-lang/anchor-debug" ];
          "associated_token" = [ "spl-associated-token-account" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "associated_token" "mint" "token" "token_2022" "token_2022_extensions" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
          "memo" = [ "spl-memo" ];
          "metadata" = [ "mpl-token-metadata" ];
          "mpl-token-metadata" = [ "dep:mpl-token-metadata" ];
          "spl-associated-token-account" = [ "dep:spl-associated-token-account" ];
          "spl-memo" = [ "dep:spl-memo" ];
          "spl-pod" = [ "dep:spl-pod" ];
          "spl-token" = [ "dep:spl-token" ];
          "spl-token-2022" = [ "dep:spl-token-2022" ];
          "spl-token-group-interface" = [ "dep:spl-token-group-interface" ];
          "spl-token-metadata-interface" = [ "dep:spl-token-metadata-interface" ];
          "stake" = [ "borsh" ];
          "token" = [ "spl-token" ];
          "token_2022" = [ "spl-token-2022" ];
          "token_2022_extensions" = [ "spl-token-2022" "spl-token-group-interface" "spl-token-metadata-interface" "spl-pod" ];
        };
        resolvedDefaultFeatures = [ "associated_token" "default" "mint" "spl-associated-token-account" "spl-pod" "spl-token" "spl-token-2022" "spl-token-group-interface" "spl-token-metadata-interface" "token" "token_2022" "token_2022_extensions" ];
      };
      "anchor-syn" = rec {
        crateName = "anchor-syn";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0rzdi6291j4gq4w6b4r8blg7sn40y76n4j3ls87dyhy61kcsdisx";
        libName = "anchor_syn";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "cargo_toml";
            packageId = "cargo_toml";
            optional = true;
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" "parsing" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "cargo_toml" = [ "dep:cargo_toml" ];
          "idl-build" = [ "cargo_toml" ];
        };
        resolvedDefaultFeatures = [ "cargo_toml" "hash" "idl-build" "init-if-needed" ];
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.98";
        edition = "2018";
        sha256 = "11ylvjdrcjs0q9jgk1af4r5cx1qppj63plxqkq595vmc24rjsvg1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "authorization" = rec {
        crateName = "authorization";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/authorization; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "valence-utils";
            packageId = "valence-utils";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" "no-log-ix-name" ];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.4.0";
        edition = "2015";
        sha256 = "09lz3by90d2hphbq56znag9v87gfpd9gb8nr82hll8z6x2nhprdc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets";
            target = { target, features }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.12.3" = rec {
        crateName = "base64";
        version = "0.12.3";
        edition = "2018";
        sha256 = "1zq33had71xh48n17g4kqs96szhx3yh7qibzwi4fk217n3vz0h9l";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base_account" = rec {
        crateName = "base_account";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/base_account; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "spl-associated-token-account";
            packageId = "spl-associated-token-account";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-memo";
            packageId = "spl-memo";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "anchor-debug" "cpi" "default" "idl-build" "no-entrypoint" "no-idl" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            features = [ "mac" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon-core" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "traits-preview" ];
      };
      "block-buffer 0.10.4" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
        };
      };
      "borsh 0.10.4" = rec {
        crateName = "borsh";
        version = "0.10.4";
        edition = "2018";
        crateBin = [];
        sha256 = "1vkgajwrpncr46hk6nn8j3382jffkpy9xhcisfxdwb5n9vb58phi";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive 0.10.4";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "borsh 1.5.7" = rec {
        crateName = "borsh";
        version = "1.5.7";
        edition = "2018";
        crateBin = [];
        sha256 = "1kikljm5yr3l9qsw5xvdccragxj4445s4s3fqsgy6hmmipwld1md";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive 1.5.7";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "borsh-derive" = [ "dep:borsh-derive" ];
          "bson" = [ "dep:bson" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "borsh-derive" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "indexmap" = [ "dep:indexmap" ];
          "unstable__schema" = [ "derive" "borsh-derive/schema" ];
        };
        resolvedDefaultFeatures = [ "borsh-derive" "default" "derive" "std" "unstable__schema" ];
      };
      "borsh-derive 0.10.4" = rec {
        crateName = "borsh-derive";
        version = "0.10.4";
        edition = "2018";
        sha256 = "12gg3kgi6gi4qlqrxlccpnhffsxsb8scbqlnss6rj8wl1pw164l3";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "borsh-derive-internal";
            packageId = "borsh-derive-internal";
          }
          {
            name = "borsh-schema-derive-internal";
            packageId = "borsh-schema-derive-internal";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 0.1.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-derive 1.5.7" = rec {
        crateName = "borsh-derive";
        version = "1.5.7";
        edition = "2018";
        sha256 = "1hwsznww7d01bh1fzpndzmcpyp00xpl2y9bg70i3z0zmqb0d7lgx";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "fold" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "fold" "parsing" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "schema" ];
      };
      "borsh-derive-internal" = rec {
        crateName = "borsh-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1cvn16046101px9b98i3np95rmrwvzbi63d7l957362cci8bmmk5";
        libName = "borsh_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-schema-derive-internal" = rec {
        crateName = "borsh-schema-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1m5nldxh5ji4hxw7g3zlm6xqwj4f2j32nsg6hfz2fd06dzcr2ri7";
        libName = "borsh_schema_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "bs58" = rec {
        crateName = "bs58";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1x3v51n5n2s3l0rgrsn142akdf331n2qsa75pscw71fi848vm25z";
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "grab_spare_slice" ];
          }
        ];
        devDependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "rustc_1_55" ];
          }
        ];
        features = {
          "alloc" = [ "tinyvec?/alloc" ];
          "cb58" = [ "sha2" ];
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tinyvec?/std" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.17.0";
        edition = "2021";
        sha256 = "1gxxsn2fsjmv03g8p3m749mczv2k4m8xspifs5l7bcx0vx3gna0n";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bv" = rec {
        crateName = "bv";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0h5kbl54fsccznfixw83xndbripw39y2qkqjwf709p75iqfvnd48";
        authors = [
          "Jesse A. Tov <jesse.tov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "feature-probe";
            packageId = "feature-probe";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.0";
        edition = "2018";
        sha256 = "134mywp7bqm252c851h3bny75g0l5kw99738a1mkcjyf07pscd4i";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn" ];
          "must_cast_extra" = [ "must_cast" ];
        };
        resolvedDefaultFeatures = [ "bytemuck_derive" "derive" ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.9.3";
        edition = "2018";
        sha256 = "18g1r1zgwiz5px2kf1n55ibjb2aqm86nkw28ss1mn85k94xjgk3y";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "extra-platforms" = [ "dep:extra-platforms" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "cargo_toml" = rec {
        crateName = "cargo_toml";
        version = "0.19.2";
        edition = "2021";
        sha256 = "1gljfkdjx07fisn5xkklv56ki3p49ppf8fkry7c1psx28bgmd0x9";
        libPath = "src/cargo_toml.rs";
        authors = [
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "toml";
            packageId = "toml 0.8.22";
          }
        ];
        features = {
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.24";
        edition = "2018";
        sha256 = "1irvbn8y9sg6f1070yg5469fxk5c3ximh24ds04kph21w0xmsn8n";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cipher" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-padding" = [ "inout/block-padding" ];
          "dev" = [ "blobby" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" "inout/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "console_error_panic_hook" = rec {
        crateName = "console_error_panic_hook";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1g5v8s0ndycc10mdn6igy914k645pgpcl8vjpz6nvxkhyirynsm0";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "console_log" = rec {
        crateName = "console_log";
        version = "0.2.2";
        edition = "2018";
        sha256 = "17s9awnafrz3cb2k4i9brvi8f2bqzcd5lk80ia5qf0c5bvv757z8";
        authors = [
          "Matthew Nicholson <matt@matt-land.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "console" ];
          }
        ];
        features = {
          "color" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.3";
        edition = "2021";
        sha256 = "0aa9k4izp962qlsn5ndgw2zq62mizcpnkns8bxscgz3gqr35knj3";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "getrandom" "rand_core" "std" ];
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0d88b73waamgpfjdml78icxz45d95q7vi2aqa604b0visqdfws83";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "curve25519-dalek" = rec {
        crateName = "curve25519-dalek";
        version = "4.1.3";
        edition = "2021";
        sha256 = "1gmjb9dsknrr8lypmhkyjd67p1arb8mbfamlwxm7vph38my8pywp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = { target, features }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "digest" = [ "dep:digest" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "rand_core" ];
          "group-bits" = [ "group" "ff/bits" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "digest" "precomputed-tables" "rand_core" "serde" "zeroize" ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "derivation-path" = rec {
        crateName = "derivation-path";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1w5dw1vkh544wkjl1dx5c1hz4x912mxyq0wchvnxic8x78ckfp3f";
        libName = "derivation_path";
        authors = [
          "Julian Popescu <jpopesculian@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "digest 0.10.7" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.4";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "core-api" "default" "mac" "std" "subtle" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" "use_std" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "feature-probe" = rec {
        crateName = "feature-probe";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1nhif9zpr2f17gagf0qb0v914wc3jr9sfjzvnpi7b7pcs73ksnl3";
        libName = "feature_probe";
        authors = [
          "Jesse A. Tov <jesse.tov@gmail.com>"
        ];

      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.2.9";
        edition = "2018";
        sha256 = "07c1vknddv3ak7w89n85ik0g34nzzpms6yb845vrjnv9m4csbpi8";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "five8" = rec {
        crateName = "five8";
        version = "0.2.1";
        edition = "2021";
        sha256 = "0xfqsxcwwzqfras0d8az3dk80sn7q6hsin5hzkg1aiwb914qanx7";
        dependencies = [
          {
            name = "five8_core";
            packageId = "five8_core";
          }
        ];
        features = {
          "std" = [ "five8_core/std" ];
        };
      };
      "five8_const" = rec {
        crateName = "five8_const";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0ywsg49zdmnnaiihfpz54d2k7ay3k2rflqagq3r0ivy3igdc7pi6";
        dependencies = [
          {
            name = "five8_core";
            packageId = "five8_core";
          }
        ];

      };
      "five8_core" = rec {
        crateName = "five8_core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1993fnn127x6mapn5qj3czh8n68078ar96sb0hanqxszpi2byl95";
        features = {
        };
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js-sys" = [ "dep:js-sys" ];
          "log" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "stdweb" = [ "dep:stdweb" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "custom" "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "hashbrown 0.13.2" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" ];
      };
      "hashbrown 0.15.3" = rec {
        crateName = "hashbrown";
        version = "0.15.3";
        edition = "2021";
        sha256 = "1cwfw1yzkvsqkhmkg5igdvgsl8a0wyi716cn83k2j8h09ma6rcl4";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0b0kkr790p66lvzn9nsmfjvydrbmh9z5gb664jchwgw64vxiwqkd";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "hmac" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.9.0";
        edition = "2021";
        sha256 = "07m15a571yywmvqyb7ms717q9n42b46badbpsmx215jrg7dhv9yf";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.4";
        edition = "2021";
        sha256 = "008xfl1jn9rxsq19phnhbimccf4p64880jmnpg59wqi07kk117w7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
          "std" = [ "block-padding/std" ];
        };
      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "13x2qcky5l22z4xgivi59xhjjx4kxir1zg7gcj0f1ijzd4yg7yhw";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.172";
        edition = "2021";
        sha256 = "1ykz4skj7gac14znljm5clbnrhini38jkq3d60jggx3y5w2ayl6p";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libsecp256k1" = rec {
        crateName = "libsecp256k1";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wvwg7r0qgggmvvp2sf9hb7vhxkny8k3v35p3hisr8pd3yy21ln9";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "base64";
            packageId = "base64 0.12.3";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "libsecp256k1-gen-ecmult";
            packageId = "libsecp256k1-gen-ecmult";
          }
          {
            name = "libsecp256k1-gen-genmult";
            packageId = "libsecp256k1-gen-genmult";
          }
        ];
        features = {
          "default" = [ "std" "hmac" "static-context" ];
          "hmac" = [ "hmac-drbg" "sha2" "typenum" ];
          "hmac-drbg" = [ "dep:hmac-drbg" ];
          "lazy-static-context" = [ "lazy_static" "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "libsecp256k1-core/std" "sha2/std" "rand/std" "serde/std" "base64/std" ];
          "typenum" = [ "dep:typenum" ];
        };
        resolvedDefaultFeatures = [ "sha2" "static-context" "std" ];
      };
      "libsecp256k1-core" = rec {
        crateName = "libsecp256k1-core";
        version = "0.2.2";
        edition = "2018";
        sha256 = "104a8yr8r472v3hsxnicjmgjmbkxl9qqdwf5b7vwwa7c1iqspxnh";
        libName = "libsecp256k1_core";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "subtle/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libsecp256k1-gen-ecmult" = rec {
        crateName = "libsecp256k1-gen-ecmult";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1hy5agkfylvdlfsxm5n07ljx1byyy1cyc1rzm23ar3ykhjsrdayc";
        libName = "libsecp256k1_gen_ecmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libsecp256k1-gen-genmult" = rec {
        crateName = "libsecp256k1-gen-genmult";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0pag9hq2pvisin0iy67q5m0388wf0qmv7gm290famqwmjcagxav7";
        libName = "libsecp256k1_gen_genmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "merlin" = rec {
        crateName = "merlin";
        version = "3.0.0";
        edition = "2018";
        sha256 = "0z9rh9jlpcs0i0cijbs6pcq26gl4qwz05y7zbnv7h2gwk4kqxhsq";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "keccak";
            packageId = "keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "debug-transcript" = [ "hex" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "std" = [ "rand_core/std" "byteorder/std" ];
        };
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.8";
        edition = "2021";
        sha256 = "0al9iy33flfgxawj789w2c8xxwg1n2r5vv6m6p5hl2fvd2vlgriv";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "adler2/rustc-dep-of-std" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
      };
      "mio" = rec {
        crateName = "mio";
        version = "1.0.4";
        edition = "2021";
        sha256 = "073n3kam3nz8j8had35fd2nn7j6a33pi3y5w3kq608cari2d9gkq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "num-bigint" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "00p2am9ma8jgd2v6xpsz621wc7wbn1yqi71g15gc3h67m7qmafgd";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0yai0vafhy85mvhknzfqd7lm04hzaln7i5c599rhy8mj831kyqaf";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0mksna1jj87ydh146gn6jcqkvvs920c3dgh0p4f3xk184kpl865g";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "pbkdf2" = rec {
        crateName = "pbkdf2";
        version = "0.11.0";
        edition = "2021";
        sha256 = "05q9wqjvfrs4dvw03yn3bvcs4zghz0a7ycfa53pz2k2fqhp6k843";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        features = {
          "default" = [ "simple" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "polyval" = rec {
        crateName = "polyval";
        version = "0.6.2";
        edition = "2021";
        sha256 = "09gs56vm36ls6pyxgh06gw2875z2x77r8b2km8q28fql0q6yc7wx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro-crate 0.1.5" = rec {
        crateName = "proc-macro-crate";
        version = "0.1.5";
        edition = "2018";
        sha256 = "11cpihdk9ba68hzw95aa8zxn0i5g6kdrfd4l2cy3d5jvb72a6vhx";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml 0.5.11";
          }
        ];

      };
      "proc-macro-crate 3.3.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" "span-locations" ];
      };
      "processor" = rec {
        crateName = "processor";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/processor; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" ];
      };
      "qstring" = rec {
        crateName = "qstring";
        version = "0.7.2";
        edition = "2018";
        sha256 = "0khhcpwifis87r5chr4jiv3w1bkswcf226c0yjx809pzbzkglr6l";
        authors = [
          "Martin Algesten <martin@algesten.se>"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];

      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("emscripten" == target."os" or null));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "getrandom_package" = [ "dep:getrandom_package" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "simd_support" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_pcg" = [ "dep:rand_pcg" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "std" "std_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.12";
        edition = "2021";
        sha256 = "1by5k76jr4kjy37287ifn56dzw6jh6nrwnrjm29j615ayafcm3wj";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "registry" = rec {
        crateName = "registry";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/registry; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
        };
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.21";
        edition = "2018";
        sha256 = "07bb1xx05hhwpnl43sqrhsmxyk5sd5m5baadp19nxp69s9xij3ca";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "serde_derive" "std" ];
      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.17";
        edition = "2018";
        sha256 = "15kds0mw19lvm8ydd1qbharh5rz96zir06yn2silqbfy3cigsdw4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.140";
        edition = "2021";
        sha256 = "0wwkp4vc20r87081ihj3vpyz5qf7wqkqipq17v99nv6wjrp8n1i0";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_spanned" = rec {
        crateName = "serde_spanned";
        version = "0.6.8";
        edition = "2021";
        sha256 = "1q89g70azwi4ybilz5jb8prfpa575165lmrffd49vmcf76qpqq47";
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "sha2 0.10.9" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.9.9" = rec {
        crateName = "sha2";
        version = "0.9.9";
        edition = "2018";
        sha256 = "006q2f0ar26xcjxqz8zsncfgz86zqa5dkwlwv03rhx1rpzhs2n2d";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.0";
        edition = "2018";
        sha256 = "1sgfw8z729nlxk8k13dhs0a762wnaxmlx70a7xlf3wz989bjh5w9";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bincode" = [ "dep:bincode" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "impl_bincode" = [ "bincode" "unty" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "unty" = [ "dep:unty" ];
        };
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.10";
        edition = "2021";
        sha256 = "0y067ki5q946w91xlz2sb175pnfazizva6fi3kfp639mxnmpc8z2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "solana-account" = rec {
        crateName = "solana-account";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0n0215xhlpgqs39aiy00l7sv3q4qr30vy8s0hj6agbmfxpj9z50g";
        libName = "solana_account";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-sysvar" "solana-instruction/serde" "serde" ];
          "dev-context-only-utils" = [ "bincode" "dep:qualifier_attr" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-pubkey/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
      };
      "solana-account-info" = rec {
        crateName = "solana-account-info";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0pchr10yf9r32xr1c49w8v26vvl8xpxqjm1jmrgj12i9d9h7vhg0";
        libName = "solana_account_info";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" ];
      };
      "solana-address-lookup-table-interface" = rec {
        crateName = "solana-address-lookup-table-interface";
        version = "2.2.2";
        edition = "2021";
        sha256 = "15dkwsk636ck14lr5r8wd4knbcp59ccycffbcm5bcw78xxkkyryi";
        libName = "solana_address_lookup_table_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "curve25519" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-instruction" "serde" "solana-instruction/bincode" ];
          "bytemuck" = [ "dep:bytemuck" "solana-pubkey/bytemuck" ];
          "dev-context-only-utils" = [ "bincode" "bytemuck" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "bytemuck" "serde" ];
      };
      "solana-atomic-u64" = rec {
        crateName = "solana-atomic-u64";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1hkvd5k4gx36rrf8bv5ycq35a5qwl12p97ib0mdlcq7y1rr54bnm";
        libName = "solana_atomic_u64";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (!("64" == target."pointer_width" or null));
          }
        ];

      };
      "solana-big-mod-exp" = rec {
        crateName = "solana-big-mod-exp";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0rvm3q453cnc4y6zqqdshf445qm9rmdx2rch2gyjrrn3p8mpznvm";
        libName = "solana_big_mod_exp";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-bincode" = rec {
        crateName = "solana-bincode";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1p1s015dsrb69csirqgri9d9wawqf25hx030scyzxjgriixpi8qr";
        libName = "solana_bincode";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "solana-blake3-hasher" = rec {
        crateName = "solana-blake3-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0wj6189cmz0bchnlrz0f57yhzginl210ij2g94a1mcx14lg81851";
        libName = "solana_blake3_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "blake3";
            packageId = "blake3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "blake3";
            packageId = "blake3";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "blake3" = [ "dep:blake3" ];
          "borsh" = [ "dep:borsh" "std" ];
          "dev-context-only-utils" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "std" = [ "solana-hash/std" ];
        };
        resolvedDefaultFeatures = [ "blake3" ];
      };
      "solana-borsh" = rec {
        crateName = "solana-borsh";
        version = "2.2.1";
        edition = "2021";
        sha256 = "016hfczc3js9iyhx7ci296a4gc3zippnp9jscpbax9x1s2y370vi";
        libName = "solana_borsh";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            features = [ "derive" "unstable__schema" ];
          }
        ];

      };
      "solana-clock" = rec {
        crateName = "solana-clock";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0c9f5vy0sg7z6ij8bamqir4s6rnl6fz8fgbx7nnq5vgwf2mq5d0v";
        libName = "solana_clock";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-cpi" = rec {
        crateName = "solana-cpi";
        version = "2.2.1";
        edition = "2021";
        sha256 = "04gax44qqqc53d8ypq51qp38xrz2yp835z128q0vmhnxxlk13iwd";
        libName = "solana_cpi";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-stable-layout";
            packageId = "solana-stable-layout";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "curve25519" ];
          }
        ];

      };
      "solana-curve25519" = rec {
        crateName = "solana-curve25519";
        version = "2.2.14";
        edition = "2021";
        sha256 = "01g1ag4h492czbizbrjqxpqqhn1sr80gpr1g89vwwv9s4cirril7";
        libName = "solana_curve25519";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" "serde" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-decode-error" = rec {
        crateName = "solana-decode-error";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0dasc86cgckxapvjzd6aip1hw4nw2p5gf4q9wx1gkcldl631cy4c";
        libName = "solana_decode_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "solana-define-syscall" = rec {
        crateName = "solana-define-syscall";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1qmfn5mhakpra7if3p8aq8il0jqr9mfn56pyx8i8272lrymy5qra";
        libName = "solana_define_syscall";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-derivation-path" = rec {
        crateName = "solana-derivation-path";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0yvkb2r5hkqj70579fxr7i2b38yw5chhc3m1rk1mwp5jk3bmd5wk";
        libName = "solana_derivation_path";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "derivation-path";
            packageId = "derivation-path";
            usesDefaultFeatures = false;
          }
          {
            name = "qstring";
            packageId = "qstring";
          }
          {
            name = "uriparse";
            packageId = "uriparse";
          }
        ];

      };
      "solana-epoch-rewards" = rec {
        crateName = "solana-epoch-rewards";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1dsd70zn78zid1zyva2v46dj8gprdfzqkzmn1fhrwfrjvp9pbdc6";
        libName = "solana_epoch_rewards";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-hash/frozen-abi" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-hash/serde" ];
          "sysvar" = [ "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-epoch-schedule" = rec {
        crateName = "solana-epoch-schedule";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1vb7dxgphfxg026vq5y2wkvf9br9lqbfvmxi4zbmbk6yplghgkiz";
        libName = "solana_epoch_schedule";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-example-mocks" = rec {
        crateName = "solana-example-mocks";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1lrrirq3jlcxsisxikjb5q810fdm4l2iw5a7jd9qvfxqrdb1sil4";
        libName = "solana_example_mocks";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "solana-address-lookup-table-interface";
            packageId = "solana-address-lookup-table-interface";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keccak-hasher";
            packageId = "solana-keccak-hasher";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            features = [ "serde" ];
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-feature-gate-interface" = rec {
        crateName = "solana-feature-gate-interface";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0vcm9djnbhig6ym30p4b5mw5fgf533j0byqn6178x7j45cwcbxa3";
        libName = "solana_feature_gate_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
            optional = true;
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
            optional = true;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-account" "dep:solana-account-info" "dep:solana-instruction" "dep:solana-program-error" "dep:solana-rent" "dep:solana-system-interface" "serde" ];
          "dev-context-only-utils" = [ "bincode" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-fee-calculator" = rec {
        crateName = "solana-fee-calculator";
        version = "2.2.1";
        edition = "2021";
        sha256 = "13fdf0zjlj25n88di6n7aa1f1lxl938qk080qcmq3cqgv84c96yq";
        libName = "solana_fee_calculator";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-hash" = rec {
        crateName = "solana-hash";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0qrvr54vc7lc85gjbvibh7bl6072vw3z04snaixjiyh00fgnxfdm";
        libName = "solana_hash";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "std" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "default" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "borsh" "bytemuck" "serde" "std" ];
      };
      "solana-instruction" = rec {
        crateName = "solana-instruction";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1188lppmnf4462nkg6bz9qcmd42bpi33mlg9f57vcxi8x0n8waa7";
        libName = "solana_instruction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:serde" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
          "syscalls" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "bincode" "borsh" "default" "serde" "std" ];
      };
      "solana-instructions-sysvar" = rec {
        crateName = "solana-instructions-sysvar";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0msgjmm89pxyrliya1pp79czq63ilj64plwibd7hqbawmmpmms70";
        libName = "solana_instructions_sysvar";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "dep:qualifier_attr" ];
        };
      };
      "solana-keccak-hasher" = rec {
        crateName = "solana-keccak-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0y9gw75396scycg0dmg8g3v7xnwn5nag8p93k4dlaanlzdbvkbn7";
        libName = "solana_keccak_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "sha3";
            packageId = "sha3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha3";
            packageId = "sha3";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sha3" = [ "dep:sha3" ];
          "std" = [ "solana-hash/std" ];
        };
        resolvedDefaultFeatures = [ "sha3" ];
      };
      "solana-last-restart-slot" = rec {
        crateName = "solana-last-restart-slot";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1pawnp0nih8y4sfj98981kpxf46gxmp2bkb56m3ffwnw5yn60qsa";
        libName = "solana_last_restart_slot";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-loader-v2-interface" = rec {
        crateName = "solana-loader-v2-interface";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0m4nqkhld9293lzgpbhyv447s84yafhfxy0dsdyawy5ddl00iayq";
        libName = "solana_loader_v2_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "bincode" "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "bincode" = [ "dep:solana-instruction" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-loader-v3-interface" = rec {
        crateName = "solana-loader-v3-interface";
        version = "3.0.0";
        edition = "2021";
        sha256 = "1hiqjljpyi4qbmcw1nnc6llhkw501ngw1srm5z589zcsz9nffjzs";
        libName = "solana_loader_v3_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "curve25519" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-system-interface" "serde" "solana-instruction/bincode" ];
          "dev-context-only-utils" = [ "bincode" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-loader-v4-interface" = rec {
        crateName = "solana-loader-v4-interface";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0zlycpcp7f4wy0nfxjvfkhb43jrln1n2lsm9wa1rmwzi89r7fskh";
        libName = "solana_loader_v4_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-system-interface" "serde" "solana-instruction/bincode" ];
          "dev-context-only-utils" = [ "bincode" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-message" = rec {
        crateName = "solana-message";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0jrism4xwd7c2d44w2kam7bxg0z6ln7jd3dpi6zp9zvnwfyam5hp";
        libName = "solana_message";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "blake3";
            packageId = "blake3";
            optional = true;
            features = [ "traits-preview" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-bincode";
            packageId = "solana-bincode";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
            optional = true;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-bincode" "dep:solana-system-interface" "serde" ];
          "blake3" = [ "dep:blake3" ];
          "dev-context-only-utils" = [ "bincode" "blake3" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-hash/frozen-abi" "solana-pubkey/frozen-abi" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:solana-short-vec" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "blake3" "serde" ];
      };
      "solana-msg" = rec {
        crateName = "solana-msg";
        version = "2.2.1";
        edition = "2021";
        sha256 = "14l0k8vi2630rk7s79f7wm7crr2fn6fb078sg31apyls74a1lspk";
        libName = "solana_msg";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-native-token" = rec {
        crateName = "solana-native-token";
        version = "2.2.2";
        edition = "2021";
        sha256 = "18x1k65ffk2503qjadsxwpa5wmi36s1qzxmlx5wmk6b0h3vv4zrh";
        libName = "solana_native_token";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-nonce" = rec {
        crateName = "solana-nonce";
        version = "2.2.1";
        edition = "2021";
        sha256 = "098kvwyzpnkmyjk19n6iy9k013wlkd89vgd50iif0dsm33mj4gkh";
        libName = "solana_nonce";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-fee-calculator/serde" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-program" = rec {
        crateName = "solana-program";
        version = "2.2.1";
        edition = "2021";
        sha256 = "01cxb0d31002niffjzgfjr9x0qdz36kf7n7q928bgklkgr36jr2q";
        libName = "solana_program";type = [ "cdylib" "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "blake3";
            packageId = "blake3";
            features = [ "traits-preview" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "console_error_panic_hook";
            packageId = "console_error_panic_hook";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "console_log";
            packageId = "console_log";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("solana" == target."os" or null);
            features = [ "custom" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            features = [ "i128" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
            features = [ "bincode" ];
          }
          {
            name = "solana-address-lookup-table-interface";
            packageId = "solana-address-lookup-table-interface";
            features = [ "bincode" "bytemuck" ];
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-big-mod-exp";
            packageId = "solana-big-mod-exp";
          }
          {
            name = "solana-bincode";
            packageId = "solana-bincode";
          }
          {
            name = "solana-blake3-hasher";
            packageId = "solana-blake3-hasher";
            features = [ "blake3" ];
          }
          {
            name = "solana-borsh";
            packageId = "solana-borsh";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-epoch-rewards";
            packageId = "solana-epoch-rewards";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-example-mocks";
            packageId = "solana-example-mocks";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-feature-gate-interface";
            packageId = "solana-feature-gate-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
            features = [ "serde" ];
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
            features = [ "bytemuck" "serde" "std" ];
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "bincode" "serde" "std" ];
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-keccak-hasher";
            packageId = "solana-keccak-hasher";
            features = [ "sha3" ];
          }
          {
            name = "solana-last-restart-slot";
            packageId = "solana-last-restart-slot";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-loader-v2-interface";
            packageId = "solana-loader-v2-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-loader-v3-interface";
            packageId = "solana-loader-v3-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-loader-v4-interface";
            packageId = "solana-loader-v4-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            features = [ "bincode" "blake3" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-native-token";
            packageId = "solana-native-token";
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
            features = [ "serde" ];
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
            features = [ "serde" ];
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-program-pack";
            packageId = "solana-program-pack";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "bytemuck" "curve25519" "serde" "std" ];
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-secp256k1-recover";
            packageId = "solana-secp256k1-recover";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            features = [ "sha2" ];
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-slot-history";
            packageId = "solana-slot-history";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-stable-layout";
            packageId = "solana-stable-layout";
          }
          {
            name = "solana-stake-interface";
            packageId = "solana-stake-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "bincode" "bytemuck" ];
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
          {
            name = "solana-vote-interface";
            packageId = "solana-vote-interface";
            features = [ "bincode" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "dev-context-only-utils" ];
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "dep:solana-borsh" "solana-hash/borsh" "solana-instruction/borsh" "solana-program-error/borsh" "solana-pubkey/borsh" "solana-stake-interface/borsh" ];
          "default" = [ "borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-epoch-rewards/frozen-abi" "solana-epoch-schedule/frozen-abi" "solana-fee-calculator/frozen-abi" "solana-hash/frozen-abi" "solana-instruction/frozen-abi" "solana-message/frozen-abi" "solana-pubkey/frozen-abi" "solana-rent/frozen-abi" "solana-short-vec/frozen-abi" "solana-stake-interface/frozen-abi" "solana-sysvar/frozen-abi" ];
        };
        resolvedDefaultFeatures = [ "borsh" "default" ];
      };
      "solana-program-entrypoint" = rec {
        crateName = "solana-program-entrypoint";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1v30h1hjr900h4capah94w2n09z5bycd4skjmbrfk4wdqrrzwgs7";
        libName = "solana_program_entrypoint";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-program-error" = rec {
        crateName = "solana-program-error";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0xg7mmb6b3zqiz24fdnsc3n2mc0vsrxz6dz2psj2wbk4glhy1qly";
        libName = "solana_program_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "borsh" "serde" ];
      };
      "solana-program-memory" = rec {
        crateName = "solana-program-memory";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1m30gdbxvrlf59i1vgi86zyfrsnsiwxhrg9l99izn9cqr3v6h0hv";
        libName = "solana_program_memory";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-program-option" = rec {
        crateName = "solana-program-option";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1l4p6fxavd74shg4mzibif294arpcga39f6svfkfs5n6kcp7lryw";
        libName = "solana_program_option";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-program-pack" = rec {
        crateName = "solana-program-pack";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0yr7xgfyy6clrdg9gxn5zq4sa995ssvwrylpqlvxq4kfbvqhx7ri";
        libName = "solana_program_pack";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
        ];

      };
      "solana-pubkey" = rec {
        crateName = "solana-pubkey";
        version = "2.4.0";
        edition = "2021";
        sha256 = "1wagvdblirnrlrh2yj8vi9asy7cg7263k6grl4n0a6i6qfwssqlv";
        libName = "solana_pubkey";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            optional = true;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" ];
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "five8_const";
            packageId = "five8_const";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            optional = true;
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "std" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "curve25519" = [ "dep:curve25519-dalek" "sha2" ];
          "default" = [ "std" ];
          "dev-context-only-utils" = [ "dep:arbitrary" "rand" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "rand" = [ "dep:rand" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sha2" = [ "dep:solana-sha256-hasher" "solana-sha256-hasher/sha2" ];
        };
        resolvedDefaultFeatures = [ "borsh" "bytemuck" "curve25519" "default" "serde" "sha2" "std" ];
      };
      "solana-rent" = rec {
        crateName = "solana-rent";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1014bmlcl41qf65546sj6cl89cvzf0kminn2x2k8rscxxbysibni";
        libName = "solana_rent";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-sanitize" = rec {
        crateName = "solana-sanitize";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1kyfakp810bgmrrx0ypbcmr9hmkf4xazrwrs9af8s65qaw9vrwb1";
        libName = "solana_sanitize";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-sdk-ids" = rec {
        crateName = "solana-sdk-ids";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0pqa6pgvrbxiiwniad80vrylc8k78sk26gm3caq8hp4dqsf8npaw";
        libName = "solana_sdk_ids";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-sdk-macro" = rec {
        crateName = "solana-sdk-macro";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1pxr6fab4scf4f7vpq1lvy0md01q5vgakb5md87mc0wxp6l0sa46";
        procMacro = true;
        libName = "solana_sdk_macro";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "solana-secp256k1-recover" = rec {
        crateName = "solana-secp256k1-recover";
        version = "2.2.1";
        edition = "2021";
        sha256 = "15p4pgins7crlvvpha1ndllkvc57j0x0kxa4jkrp18nsdh5i58xs";
        libName = "solana_secp256k1_recover";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "std" "static-context" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        devDependencies = [
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            target = {target, features}: (!("solana" == target."os" or null));
            features = [ "std" "static-context" "hmac" ];
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-security-txt" = rec {
        crateName = "solana-security-txt";
        version = "1.1.1";
        edition = "2021";
        sha256 = "10sifx6mrpcr6hs32vp810bxqc36xcx5qvb8gdxrn7yvgqxs92j6";
        libName = "solana_security_txt";
        features = {
          "parser" = [ "thiserror" "twoway" ];
          "thiserror" = [ "dep:thiserror" ];
          "twoway" = [ "dep:twoway" ];
        };
      };
      "solana-seed-derivable" = rec {
        crateName = "solana-seed-derivable";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0zy9nx1s30wj5wgmlv27mj788i2n4dkkkkz5j3mccrmjmnsq5srv";
        libName = "solana_seed_derivable";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
          }
        ];

      };
      "solana-seed-phrase" = rec {
        crateName = "solana-seed-phrase";
        version = "2.2.1";
        edition = "2021";
        sha256 = "05dwpfwrv0axx1r99ir2mjs9r4943jrj5v3mlrjry1sg6br7l61n";
        libName = "solana_seed_phrase";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];

      };
      "solana-serde-varint" = rec {
        crateName = "solana-serde-varint";
        version = "2.2.2";
        edition = "2021";
        sha256 = "04vihm0bx82jkv11w87hvl4llxn3i1h2763v22qcz3j5p9g1azia";
        libName = "solana_serde_varint";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "solana-serialize-utils" = rec {
        crateName = "solana-serialize-utils";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0pjk9z540g00d9367rxlm6j1s8rlmg2jka6vmwkjnz8rcd5jhyl1";
        libName = "solana_serialize_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "borsh" "serde" ];
          }
        ];

      };
      "solana-sha256-hasher" = rec {
        crateName = "solana-sha256-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1sn7hva4v5v0dnv1nkdsgi2c0x86r3bhlmjk3x137mn0c5lkhdq0";
        libName = "solana_sha256_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "sha2" = [ "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "sha2" ];
      };
      "solana-short-vec" = rec {
        crateName = "solana-short-vec";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0saszic1i1l8l0zm71s9nrn6fy43vrhd0mq0z9b6lxmr35pwcm2w";
        libName = "solana_short_vec";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-signature" = rec {
        crateName = "solana-signature";
        version = "2.3.0";
        edition = "2021";
        sha256 = "135xin5p7fzdk23cmpjxwlsjzha2a54ngz12flcgrv3scn7frj34";
        libName = "solana_signature";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "default" = [ "std" "alloc" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:serde-big-array" ];
          "std" = [ "alloc" ];
          "verify" = [ "dep:ed25519-dalek" ];
        };
      };
      "solana-signer" = rec {
        crateName = "solana-signer";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0nwpa7h35c3wvkm6qwhkn8q8c2gsph0blhhk3h12zc5410arjhbw";
        libName = "solana_signer";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
        ];

      };
      "solana-slot-hashes" = rec {
        crateName = "solana-slot-hashes";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1kh1qcs12cqij29pg5d2cyw7c0xaki60j14dx1ikfl8l46c931hc";
        libName = "solana_slot_hashes";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-hash/serde" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-slot-history" = rec {
        crateName = "solana-slot-history";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0plk1lxr9c3i7391dijgffp1xmi604mznfi8sma2g8kw0src3k4p";
        libName = "solana_slot_history";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bv";
            packageId = "bv";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" "bv/serde" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-stable-layout" = rec {
        crateName = "solana-stable-layout";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0m3zlmicgwl0h5ywqnypbkvg1dy2q4dygspybqdvrwpq5b8gf54z";
        libName = "solana_stable_layout";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-stake-interface" = rec {
        crateName = "solana-stake-interface";
        version = "1.2.1";
        edition = "2021";
        sha256 = "134399ahxs5ymcr15a3jycgqlfgq0d9wyf8p3mz4ssr1vsgyhsaj";
        libName = "solana_stake_interface";type = [ "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "bincode" = [ "dep:solana-cpi" "solana-instruction/bincode" "solana-instruction/serde" "solana-system-interface/bincode" "serde" ];
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "solana-instruction/borsh" "solana-program-error/borsh" "solana-pubkey/borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-instruction/frozen-abi" "solana-pubkey/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "borsh" "serde" ];
      };
      "solana-system-interface" = rec {
        crateName = "solana-system-interface";
        version = "1.0.0";
        edition = "2021";
        sha256 = "145wcff4paqhlygbmgi1kbikgiypl5v95b58ypjnn759n66c3mwl";
        libName = "solana_system_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            features = [ "bincode" "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "std" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-instruction" "serde" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-pubkey/frozen-abi" "solana-pubkey/std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-sysvar" = rec {
        crateName = "solana-sysvar";
        version = "2.2.2";
        edition = "2021";
        sha256 = "15y0fap6fp6xjnbabch0xl4lil8qdrkkj6f689g0yncw06y9436m";
        libName = "solana_sysvar";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
            features = [ "sysvar" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-epoch-rewards";
            packageId = "solana-epoch-rewards";
            features = [ "sysvar" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
            features = [ "sysvar" ];
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-last-restart-slot";
            packageId = "solana-last-restart-slot";
            features = [ "sysvar" ];
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
            features = [ "sysvar" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
            features = [ "sysvar" ];
          }
          {
            name = "solana-slot-history";
            packageId = "solana-slot-history";
            features = [ "sysvar" ];
          }
          {
            name = "solana-stake-interface";
            packageId = "solana-stake-interface";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "serde" "solana-stake-interface/bincode" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "dev-context-only-utils" = [ "bincode" "bytemuck" "solana-instructions-sysvar/dev-context-only-utils" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-stake-interface/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-clock/serde" "solana-epoch-rewards/serde" "solana-epoch-schedule/serde" "solana-fee-calculator/serde" "solana-last-restart-slot/serde" "solana-rent/serde" "solana-slot-hashes/serde" "solana-slot-history/serde" "solana-stake-interface/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "bytemuck" "serde" ];
      };
      "solana-sysvar-id" = rec {
        crateName = "solana-sysvar-id";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1h8ji0z9zqkffh55s3c68qbphvbrimzphl52zmy08nrjsdrv4qjp";
        libName = "solana_sysvar_id";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];

      };
      "solana-transaction-error" = rec {
        crateName = "solana-transaction-error";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1cbwnrwzl0nmipnh9m2zg8xa0ww4icxgqd5bpa46075nzp49sai2";
        libName = "solana_transaction_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-instruction/serde" ];
        };
      };
      "solana-vote-interface" = rec {
        crateName = "solana-vote-interface";
        version = "2.2.5";
        edition = "2021";
        sha256 = "0av7w29f5jwdr7pvir2fwqniwhybal6hqcwqigr5hi0mdxs0hkzg";
        libName = "solana_vote_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
            optional = true;
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
            optional = true;
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
            optional = true;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-serialize-utils" "dep:solana-system-interface" "serde" ];
          "dev-context-only-utils" = [ "bincode" "dep:arbitrary" "solana-pubkey/dev-context-only-utils" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" "solana-hash/frozen-abi" "solana-pubkey/frozen-abi" "solana-short-vec/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:solana-serde-varint" "dep:solana-short-vec" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-zk-sdk" = rec {
        crateName = "solana-zk-sdk";
        version = "2.2.14";
        edition = "2021";
        sha256 = "1y7yiz59rbg6w8wyh65msd5ya4yv2x29095cabgls7zm6962056x";
        libName = "solana_zk_sdk";type = [ "cdylib" "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "aes-gcm-siv";
            packageId = "aes-gcm-siv";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "merlin";
            packageId = "merlin";
            usesDefaultFeatures = false;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha3";
            packageId = "sha3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "bytemuck" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-seed-derivable";
            packageId = "solana-seed-derivable";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-seed-phrase";
            packageId = "solana-seed-phrase";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "subtle";
            packageId = "subtle";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "zeroize_derive" ];
          }
        ];

      };
      "spl-associated-token-account" = rec {
        crateName = "spl-associated-token-account";
        version = "6.0.0";
        edition = "2021";
        sha256 = "1qv9k4zgvrw07ija9lx06mx1k1p2jp4c7bcrshr70rhka3bfgzkn";
        libName = "spl_associated_token_account";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "spl-associated-token-account-client";
            packageId = "spl-associated-token-account-client";
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-associated-token-account-client" = rec {
        crateName = "spl-associated-token-account-client";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1jvnpa43nf9l3kf2z7m410wfpwvjy8hkllws9wsmymxypjfk9y6n";
        libName = "spl_associated_token_account_client";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "curve25519" ];
          }
        ];

      };
      "spl-discriminator" = rec {
        crateName = "spl-discriminator";
        version = "0.4.1";
        edition = "2021";
        sha256 = "1czlnhffa6zcsm94zxalc2ah06fk6571c63py5h1d8sl6ni8sfd7";
        libName = "spl_discriminator";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "spl-discriminator-derive";
            packageId = "spl-discriminator-derive";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
        };
      };
      "spl-discriminator-derive" = rec {
        crateName = "spl-discriminator-derive";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0l67xmjji7g5gpl81d288k044mf7s9208bvi3jqcz796ls743s6r";
        procMacro = true;
        libName = "spl_discriminator_derive";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "spl-discriminator-syn";
            packageId = "spl-discriminator-syn";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "spl-discriminator-syn" = rec {
        crateName = "spl-discriminator-syn";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1fb9ggz816lh7cvnszh3bqsrdyzay8h9fc6arb3ymabw7dcha7wc";
        libName = "spl_discriminator_syn";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-elgamal-registry" = rec {
        crateName = "spl-elgamal-registry";
        version = "0.1.1";
        edition = "2021";
        sha256 = "07935vgd1zhc3mzh7bhx0837yijwl1b0xmlgi9p57c6jfn4nc3yf";
        libName = "spl_elgamal_registry";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-token-confidential-transfer-proof-extraction";
            packageId = "spl-token-confidential-transfer-proof-extraction";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-memo" = rec {
        crateName = "spl-memo";
        version = "6.0.0";
        edition = "2021";
        sha256 = "1jzpz66c1ljb796yfj818bq2kczbvbibi0zbxxk37qvl15y682cz";
        libName = "spl_memo";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-pod" = rec {
        crateName = "spl-pod";
        version = "0.5.1";
        edition = "2021";
        sha256 = "16bpw7xjmrv9rcw4x4zf2zdkzvccbfkrrflm995i0ydphspsz56r";
        libName = "spl_pod";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "solana-pubkey/borsh" ];
          "serde-traits" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "borsh" ];
      };
      "spl-program-error" = rec {
        crateName = "spl-program-error";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1ld11ljmjxhh1mc302zgfw46j2w0ivjq3782d00vbcj2dwcbafcx";
        libName = "spl_program_error";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "spl-program-error-derive";
            packageId = "spl-program-error-derive";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-program-error-derive" = rec {
        crateName = "spl-program-error-derive";
        version = "0.4.1";
        edition = "2021";
        sha256 = "0gkb4nrhmlszaj5mdar153vqz4whnkdw54z0adiq65y5fvfpblz6";
        procMacro = true;
        libName = "spl_program_error_derive";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "spl-tlv-account-resolution" = rec {
        crateName = "spl-tlv-account-resolution";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1wq5d3ra1lw22yx1qrplx4dyr7vkgba50a2qzpiqdayjkqggz6fd";
        libName = "spl_tlv_account_resolution";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-program-error";
            packageId = "spl-program-error";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "serde-traits" = [ "dep:serde" ];
        };
      };
      "spl-token" = rec {
        crateName = "spl-token";
        version = "7.0.0";
        edition = "2021";
        sha256 = "0d68dpd7hczr2jp61l4rawhwzbmfp0b0xq2gwpvx8a21jdn0lcpd";
        libName = "spl_token";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-token-2022" = rec {
        crateName = "spl-token-2022";
        version = "6.0.0";
        edition = "2021";
        sha256 = "0kwg927d5wbrrbra0sxb0r9c7g5g1rmm6i69hxjq3vqha10gf9sv";
        libName = "spl_token_2022";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "solana-security-txt";
            packageId = "solana-security-txt";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-elgamal-registry";
            packageId = "spl-elgamal-registry";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-memo";
            packageId = "spl-memo";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-confidential-transfer-ciphertext-arithmetic";
            packageId = "spl-token-confidential-transfer-ciphertext-arithmetic";
          }
          {
            name = "spl-token-confidential-transfer-proof-extraction";
            packageId = "spl-token-confidential-transfer-proof-extraction";
          }
          {
            name = "spl-token-confidential-transfer-proof-generation";
            packageId = "spl-token-confidential-transfer-proof-generation";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "spl-token-group-interface";
            packageId = "spl-token-group-interface";
          }
          {
            name = "spl-token-metadata-interface";
            packageId = "spl-token-metadata-interface";
          }
          {
            name = "spl-transfer-hook-interface";
            packageId = "spl-transfer-hook-interface";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "default" = [ "zk-ops" ];
          "serde-traits" = [ "dep:serde" "dep:serde_with" "dep:base64" "spl-pod/serde-traits" ];
        };
        resolvedDefaultFeatures = [ "default" "no-entrypoint" "zk-ops" ];
      };
      "spl-token-confidential-transfer-ciphertext-arithmetic" = rec {
        crateName = "spl-token-confidential-transfer-ciphertext-arithmetic";
        version = "0.2.1";
        edition = "2021";
        sha256 = "1zcrhkyfkfv5936rm3g6kc32aqcv5fnrpbipdl7hj5jm7ilph0qp";
        libName = "spl_token_confidential_transfer_ciphertext_arithmetic";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-curve25519";
            packageId = "solana-curve25519";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
        ];

      };
      "spl-token-confidential-transfer-proof-extraction" = rec {
        crateName = "spl-token-confidential-transfer-proof-extraction";
        version = "0.2.1";
        edition = "2021";
        sha256 = "15mg5ws9nh7sx9cbb50pc2cq4v0i3qdk1f3pvpbcjix18njddwpg";
        libName = "spl_token_confidential_transfer_proof_extraction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-curve25519";
            packageId = "solana-curve25519";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-token-confidential-transfer-proof-generation" = rec {
        crateName = "spl-token-confidential-transfer-proof-generation";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0v9m157mig0h1c7c4rgdvq51ygrhc6f149pax16qkhgfh93ih9w6";
        libName = "spl_token_confidential_transfer_proof_generation";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-token-group-interface" = rec {
        crateName = "spl-token-group-interface";
        version = "0.5.0";
        edition = "2021";
        sha256 = "16f7vyz10snm4frr7647lqzlm0f2sw3g820p4n6fvgrdsxz6d5fm";
        libName = "spl_token_group_interface";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
            features = [ "borsh" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-token-metadata-interface" = rec {
        crateName = "spl-token-metadata-interface";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1fzxk56anv2h2y44vmyn246c04kfkv7psm05bxrvsyl7pjfwiffz";
        libName = "spl_token_metadata_interface";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-borsh";
            packageId = "solana-borsh";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
            features = [ "borsh" ];
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "serde-traits" = [ "dep:serde" "spl-pod/serde-traits" ];
        };
      };
      "spl-transfer-hook-interface" = rec {
        crateName = "spl-transfer-hook-interface";
        version = "0.9.0";
        edition = "2021";
        sha256 = "0hy06x8x4v5337gns0ql4cn3cl2har8i6pl4iv436z0ha8ym19sa";
        libName = "spl_transfer_hook_interface";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "curve25519" ];
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-program-error";
            packageId = "spl-program-error";
          }
          {
            name = "spl-tlv-account-resolution";
            packageId = "spl-tlv-account-resolution";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-type-length-value" = rec {
        crateName = "spl-type-length-value";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1y937423nix44vr88hnc7ahcnqr829q7hyc7r6j1dxisn44yyw5s";
        libName = "spl_type_length_value";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "derive" = [ "dep:spl-type-length-value-derive" ];
        };
      };
      "storage_account" = rec {
        crateName = "storage_account";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/storage_account; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "base_account";
            packageId = "base_account";
            features = [ "cpi" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "spl-associated-token-account";
            packageId = "spl-associated-token-account";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-memo";
            packageId = "spl-memo";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" ];
      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" ];
      };
      "syn 2.0.101" = rec {
        crateName = "syn";
        version = "2.0.101";
        edition = "2021";
        sha256 = "1brwsh7fn3bnbj50d2lpwy9akimzb3lghz0ai89j8fhvjkybgqlc";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
          }
        ];

      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "generic-array" = [ "dep:generic-array" ];
          "latest_stable_rust" = [ "rustc_1_61" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "grab_spare_slice" "std" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "token-helpers-test" = rec {
        crateName = "token-helpers-test";
        version = "0.1.0";
        edition = "2021";
        crateBin = [
          {
            name = "token-helpers-test";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./test-helpers; };
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "token_transfer" = rec {
        crateName = "token_transfer";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/libraries/token_transfer; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "base_account";
            packageId = "base_account";
            features = [ "cpi" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "spl-memo";
            packageId = "spl-memo";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
          {
            name = "storage_account";
            packageId = "storage_account";
            features = [ "cpi" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "no-entrypoint" "no-idl" ];
      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.45.1";
        edition = "2021";
        sha256 = "0yb7h0mr0m0gfwdl1jir2k37gcrwhcib2kiyx9f95npi7sim3vvm";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = {target, features}: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = {target, features}: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = {target, features}: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "toml 0.5.11" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml 0.8.22" = rec {
        crateName = "toml";
        version = "0.8.22";
        edition = "2021";
        sha256 = "1bjsrmi9w88v4sik8bd6chp0d7bnb9dzzmxyb5xd3i083yfk5bh5";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
            features = [ "serde" ];
          }
          {
            name = "toml_edit";
            packageId = "toml_edit";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_edit" "toml_edit?/display" ];
          "indexmap" = [ "dep:indexmap" ];
          "parse" = [ "dep:toml_edit" "toml_edit?/parse" ];
          "preserve_order" = [ "indexmap" ];
          "unbounded" = [ "toml_edit?/unbounded" ];
        };
        resolvedDefaultFeatures = [ "default" "display" "parse" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.9";
        edition = "2021";
        sha256 = "18q9ix4isxw2n4mij3v6x0pb4jw1hbxbc5wbprlbq91yjrddp99x";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.26";
        edition = "2021";
        sha256 = "0zhk135y6rn6jxik7knia3xblpc545fw6b4xcpkv7idj7n3nh01i";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_spanned";
            packageId = "serde_spanned";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "toml_write";
            packageId = "toml_write";
            optional = true;
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
        };
        resolvedDefaultFeatures = [ "display" "parse" "serde" ];
      };
      "toml_write" = rec {
        crateName = "toml_write";
        version = "0.1.1";
        edition = "2021";
        sha256 = "0xhhyipq7vivp8pfmjkhma4zn9cs5fyybggwwxz9mqnqw7gl5fdz";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1sh79x677zkncasa95wz05b36134822w6qxmi1ck05fwi33f47gw";
        libName = "universal_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "crypto-common/std" ];
        };
      };
      "uriparse" = rec {
        crateName = "uriparse";
        version = "0.6.4";
        edition = "2018";
        sha256 = "1zsjwc715x4720y4b3dsdras50imvaakqgyl59n3j2fq0kyd0002";
        authors = [
          "Scott Godwin <sgodwincs@gmail.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "valence-tests" = rec {
        crateName = "valence-tests";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./tests; };
        libName = "valence_tests";
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anchor-spl";
            packageId = "anchor-spl";
            features = [ "token" "token_2022" ];
          }
          {
            name = "authorization";
            packageId = "authorization";
            features = [ "cpi" ];
          }
          {
            name = "base_account";
            packageId = "base_account";
            features = [ "cpi" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "processor";
            packageId = "processor";
            features = [ "cpi" ];
          }
          {
            name = "registry";
            packageId = "registry";
            features = [ "cpi" ];
          }
          {
            name = "storage_account";
            packageId = "storage_account";
            features = [ "cpi" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "zk_verifier";
            packageId = "zk_verifier";
            features = [ "cpi" ];
          }
        ];

      };
      "valence-utils" = rec {
        crateName = "valence-utils";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./utils; };
        libName = "valence_utils";
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "wasi 0.11.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1x8ymcm6yi3i1rwj78myl1agqv2m86i648myy3lc97s9swlqkp0y";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "std" "msrv" ];
          "enable-interning" = [ "std" ];
          "msrv" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "msrv" "rustversion" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1ihbf1hq3y81c4md9lyh6lcwbx6a5j0fw4fygd423g62lm8hc2ig";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.100";
        edition = "2021";
        sha256 = "01xls2dvzh38yj17jgrbiib1d3nyad7k2yw9s0mpklwys333zrkz";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1plm8dh20jg2id0320pbmrlsv6cazfv6b6907z19ys4z1jj7xs4a";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "visit" "visit-mut" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.100";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "0gffxvqgbh9r9xl36gprkfnh3w9gl8wgia6xrin7v11sjcxxf18s";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "1lnmc1ffbq34qw91nndklqqm75rasaffj2g4f8h1yvqqz4pdvdik";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyFrameRequestEvent" = [ "Event" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MathMlElement" = [ "Element" "EventTarget" "Node" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcRtpScriptTransformer" = [ "EventTarget" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcTransformEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "SFrameTransform" = [ "EventTarget" ];
          "SFrameTransformErrorEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" ];
        };
        resolvedDefaultFeatures = [ "console" "default" "std" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-targets" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm";
            target = { target, features }: (stdenv.hostPlatform.rust.rustcTarget == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.7.10";
        edition = "2021";
        sha256 = "1v69byry8fyarzl83wij6f1h3zxnw69assp9kdfb10cdfk42hsf0";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is-terminal" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1jx07cd3b3456c9al9zjqqdzpf1abb0vf6z0fj8xnb93hfajsw51";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.25";
        edition = "2021";
        sha256 = "1vsmpq0hp61xpqj9yk8b5jihkqkff05q1wv3l2568mhifl6y59i8";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" ];
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.101";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zk_verifier" = rec {
        crateName = "zk_verifier";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/zk_verifier; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
            features = [ "init-if-needed" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "valence-utils";
            packageId = "valence-utils";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
          "idl-build" = [ "anchor-lang/idl-build" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "idl-build" "no-entrypoint" "no-idl" "no-log-ix-name" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /* Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian =
      if platform.parsed.cpu.significantByte.name == "littleEndian"
      then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  /* Filters common temp files and build files. */
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter = name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      ! (
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory" && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (
          type == "symlink" && lib.hasPrefix "result" baseName
        )

        # Filter out IDE config
        || (
          type == "directory" && (
            baseName == ".idea" || baseName == ".vscode"
          )
        ) || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /* Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest = { crate, testCrate, testCrateFlags, testInputs, testPreRun, testPostRun }:
    assert builtins.typeOf testCrateFlags == "list";
    assert builtins.typeOf testInputs == "list";
    assert builtins.typeOf testPreRun == "string";
    assert builtins.typeOf testPostRun == "string";
    let
      # override the `crate` so that it will build and execute tests instead of
      # building the actual lib and bin targets We just have to pass `--test`
      # to rustc and it will do the right thing.  We execute the tests and copy
      # their log and the test executables to $out for later inspection.
      test =
        let
          drv = testCrate.override
            (
              _: {
                buildTests = true;
              }
            );
          # If the user hasn't set any pre/post commands, we don't want to
          # insert empty lines. This means that any existing users of crate2nix
          # don't get a spurious rebuild unless they set these explicitly.
          testCommand = pkgs.lib.concatStringsSep "\n"
            (pkgs.lib.filter (s: s != "") [
              testPreRun
              "$f $testCrateFlags 2>&1 | tee -a $out"
              testPostRun
            ]);
        in
        pkgs.runCommand "run-tests-${testCrate.name}"
          {
            inherit testCrateFlags;
            buildInputs = testInputs;
          } ''
          set -e

          export RUST_BACKTRACE=1

          # recreate a file hierarchy as when running tests with cargo

          # the source for test data
          # It's necessary to locate the source in $NIX_BUILD_TOP/source/
          # instead of $NIX_BUILD_TOP/
          # because we compiled those test binaries in the former and not the latter.
          # So all paths will expect source tree to be there and not in the build top directly.
          # For example: $NIX_BUILD_TOP := /build in general, if you ask yourself.
          # NOTE: There could be edge cases if `crate.sourceRoot` does exist but
          # it's very hard to reason about them.
          # Open a bug if you run into this!
          mkdir -p source/
          cd source/

          ${pkgs.buildPackages.xorg.lndir}/bin/lndir ${crate.src}

          # build outputs
          testRoot=target/debug
          mkdir -p $testRoot

          # executables of the crate
          # we copy to prevent std::env::current_exe() to resolve to a store location
          for i in ${crate}/bin/*; do
            cp "$i" "$testRoot"
          done
          chmod +w -R .

          # test harness executables are suffixed with a hash, like cargo does
          # this allows to prevent name collision with the main
          # executables of the crate
          hash=$(basename $out)
          for file in ${drv}/tests/*; do
            f=$testRoot/$(basename $file)-$hash
            cp $file $f
            ${testCommand}
          done
        '';
    in
    pkgs.runCommand "${crate.name}-linked"
      {
        inherit (crate) outputs crateName;
        passthru = (crate.passthru or { }) // {
          inherit test;
        };
      }
      (lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
        echo tested by ${test}
      '' + ''
        ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
      '');

  /* A restricted overridable version of builtRustCratesWithFeatures. */
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
      # Any command to run immediatelly before a test is executed.
    , testPreRun ? ""
      # Any command run immediatelly after a test is executed.
    , testPostRun ? ""
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null
            then buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides
                then buildRustCrateForPkgs
                else
                  pkgs: (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit testCrateFlags testInputs testPreRun testPostRun;
                }
            else drv;
        in
        derivation
      )
      { inherit features crateOverrides runTests testCrateFlags testInputs testPreRun testPostRun; };

  /* Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures
          (
            args // {
              inherit rootPackageId;
              target = makeTarget stdenv.hostPlatform // { test = runTests; };
            }
          );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs = pkgs:
          let
            self = {
              crates = lib.mapAttrs (packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId) crateConfigs;
              target = makeTarget stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl = self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig =
              builtins.removeAttrs crateConfig' [ "resolvedDefaultFeatures" "devDependencies" ];
            devDependencies =
              lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig'.devDependencies or [ ]);
            dependencies =
              dependencyDerivations {
                inherit features;
                inherit (self) target;
                buildByPackageId = depPackageId:
                  # proc_macro crates must be compiled for the build architecture
                  if crateConfigs.${depPackageId}.procMacro or false
                  then self.build.crates.${depPackageId}
                  else self.crates.${depPackageId};
                dependencies =
                  (crateConfig.dependencies or [ ])
                  ++ devDependencies;
              };
            buildDependencies =
              dependencyDerivations {
                inherit features;
                inherit (self.build) target;
                buildByPackageId = depPackageId:
                  self.build.crates.${depPackageId};
                dependencies = crateConfig.buildDependencies or [ ];
              };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped =
                  lib.groupBy
                    (dependency: dependency.name)
                    dependenciesWithRenames;
                versionAndRename = dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  { inherit (dep) rename; inherit (package) version; };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs
            (
              crateConfig // {
                src = crateConfig.src or (
                  pkgs.fetchurl rec {
                    name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                    # https://www.pietroalbini.org/blog/downloading-crates-io/
                    # Not rate-limited, CDN URL.
                    url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                    sha256 =
                      assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                      crateConfig.sha256;
                  }
                );
                extraRustcOpts = lib.lists.optional (targetFeatures != [ ]) "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
                inherit features dependencies buildDependencies crateRenames release;
              }
            );
      in
      builtByPackageIdByPkgs;

  /* Returns the actual derivations for the given dependencies. */
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /* Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson = val:
    if builtins.isAttrs val
    then lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val
    then builtins.map sanitizeForJson val
    else if builtins.isFunction val
    then "function"
    else val;

  /* Returns various tools to debug a crate. */
  debugCrate = { packageId, target ? makeDefaultTarget stdenv.hostPlatform }:
    assert (builtins.isString packageId);
    let
      debug = rec {
        # The built tree as passed to buildRustCrate.
        buildTree = buildRustCrateWithFeatures {
          buildRustCrateForPkgsFunc = _: lib.id;
          inherit packageId;
        };
        sanitizedBuildTree = sanitizeForJson buildTree;
        dependencyTree = sanitizeForJson
          (
            buildRustCrateWithFeatures {
              buildRustCrateForPkgsFunc = _: crate: {
                "01_crateName" = crate.crateName or false;
                "02_features" = crate.features or [ ];
                "03_dependencies" = crate.dependencies or [ ];
              };
              inherit packageId;
            }
          );
        mergedPackageFeatures = mergePackageFeatures {
          features = rootFeatures;
          inherit packageId target;
        };
        diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
          inherit packageId target;
        };
      };
    in
    { internal = debug; };

  /* Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures =
          prefixValues
            "crate2nix"
            (mergePackageFeatures { inherit crateConfigs packageId target; features = [ "default" ]; });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [ mergedFeatures configs ];
        onlyInCargo =
          builtins.attrNames
            (lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined);
        onlyInCrate2Nix =
          builtins.attrNames
            (lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined);
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /* Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
      # Adds devDependencies to the crate with rootPackageId.
    , runTests ? false
    , ...
    } @ args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures = dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          { inherit packageId features; };
        resolveDependencies = cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache
            (
              cache: { packageId, features }:
                let
                  cacheFeatures = cache.${packageId} or [ ];
                  combinedFeatures = sortedUnique (cacheFeatures ++ features);
                in
                if cache ? ${packageId} && cache.${packageId} == combinedFeatures
                then cache
                else
                  mergePackageFeatures {
                    features = combinedFeatures;
                    featuresByPackageId = cache;
                    inherit crateConfigs packageId target runTests rootPackageId;
                  }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies =
          resolveDependencies cacheWithSelf "dep"
            (
              crateConfig.dependencies or [ ]
              ++ lib.optionals
                (runTests && packageId == rootPackageId)
                (crateConfig.devDependencies or [ ])
            );
        cacheWithAll =
          resolveDependencies
            cacheWithDependencies "build"
            (crateConfig.buildDependencies or [ ]);
      in
      cacheWithAll;

  /* Returns the enabled dependencies given the enabled features. */
  filterEnabledDependencies = { dependencies, features, target }:
    assert (builtins.isList dependencies);
    assert (builtins.isList features);
    assert (builtins.isAttrs target);

    lib.filter
      (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (
          !(dep.optional or false)
          || builtins.any (doesFeatureEnableDependency dep) features
        )
      )
      dependencies;

  /* Returns whether the given feature should enable the given dependency. */
  doesFeatureEnableDependency = dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /* Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures = featureMap: inputFeatures:
    assert (builtins.isAttrs featureMap);
    assert (builtins.isList inputFeatures);
    let
      expandFeaturesNoCycle = oldSeen: inputFeatures:
        if inputFeatures != [ ]
        then
          let
            # The feature we're currently expanding.
            feature = builtins.head inputFeatures;
            # All the features we've seen/expanded so far, including the one
            # we're currently processing.
            seen = oldSeen // { ${feature} = 1; };
            # Expand the feature but be careful to not re-introduce a feature
            # that we've already seen: this can easily cause a cycle, see issue
            # #209.
            enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
          in
          [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
        # No more features left, nothing to expand to.
        else [ ];
      outFeatures = expandFeaturesNoCycle { } inputFeatures;
    in
    sortedUnique outFeatures;

  /* This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures = dependencies: features:
    assert (builtins.isList features);
    assert (builtins.isList dependencies);
    let
      additionalFeatures = lib.concatMap
        (
          dependency:
            assert (builtins.isAttrs dependency);
            let
              enabled = builtins.any (doesFeatureEnableDependency dependency) features;
            in
            if (dependency.optional or false) && enabled
            then [ (dependency.rename or dependency.name) ]
            else [ ]
        )
        dependencies;
    in
    sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures = features: dependency:
    assert (builtins.isList features);
    assert (builtins.isAttrs dependency);
    let
      defaultOrNil =
        if dependency.usesDefaultFeatures or true
        then [ "default" ]
        else [ ];
      explicitFeatures = dependency.features or [ ];
      additionalDependencyFeatures =
        let
          name = dependency.rename or dependency.name;
          stripPrefixMatch = prefix: s:
            if lib.hasPrefix prefix s
            then lib.removePrefix prefix s
            else null;
          extractFeature = feature: lib.findFirst
            (f: f != null)
            null
            (map (prefix: stripPrefixMatch prefix feature) [
              (name + "/")
              (name + "?/")
            ]);
          dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
        in
        dependencyFeatures;
    in
    defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  /* Sorts and removes duplicates from a list of strings. */
  sortedUnique = features:
    assert (builtins.isList features);
    assert (builtins.all builtins.isString features);
    let
      outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
      outFeaturesUnique = builtins.attrNames outFeaturesSet;
    in
    builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning = message: value:
    if strictDeprecation
    then builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

