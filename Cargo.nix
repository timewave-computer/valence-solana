
# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate" "--output" "./Cargo.nix"
# See https://github.com/kolloch/crate2nix for more info.

{ nixpkgs ? <nixpkgs>
, pkgs ? import nixpkgs { config = {}; }
, fetchurl ? pkgs.fetchurl
, lib ? pkgs.lib
, stdenv ? pkgs.stdenv
, buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
, defaultCrateOverrides ? pkgs.defaultCrateOverrides
  # The features to enable for the root_crate or the workspace_members.
, rootFeatures ? [ "default" ]
  # If true, throw errors instead of issueing deprecation warnings.
, strictDeprecation ? false
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
, targetFeatures ? []
  # Whether to perform release builds: longer compile times, faster binaries.
, release ? true
  # Additional crate2nix configuration if it exists.
, crateConfig
  ? if builtins.pathExists ./crate-config.nix
    then pkgs.callPackage ./crate-config.nix {}
    else {}
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #


  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "registry" = rec {
      packageId = "registry";
      build = internal.buildRustCrateWithFeatures {
        packageId = "registry";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "shard" = rec {
      packageId = "shard";
      build = internal.buildRustCrateWithFeatures {
        packageId = "shard";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-common" = rec {
      packageId = "valence-common";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-common";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-sdk" = rec {
      packageId = "valence-sdk";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-sdk";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "valence-tests" = rec {
      packageId = "valence-tests";
      build = internal.buildRustCrateWithFeatures {
        packageId = "valence-tests";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };



  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
      name = "all-workspace-members";
      paths =
        let members = builtins.attrValues workspaceMembers;
        in builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "Inflector" = rec {
        crateName = "Inflector";
        version = "0.11.4";
        edition = "2015";
        sha256 = "1lqmcni21ifzyq41fhz6k1j2b23cmsx469s4g4sf01l78miqqhzy";
        libName = "inflector";
        authors = [
          "Josh Teeter<joshteeter@gmail.com>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
            optional = true;
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
          }
        ];
        features = {
          "default" = [ "heavyweight" ];
          "heavyweight" = [ "regex" "lazy_static" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "regex" = [ "dep:regex" ];
        };
        resolvedDefaultFeatures = [ "default" "heavyweight" "lazy_static" "regex" ];
      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.2";
        edition = "2018";
        crateBin = [];
        sha256 = "1hd1i57zxgz08j6h5qrhsnm2fi0bcqvsh389fw400xm3arz2ggnz";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [ "loader" "rustc-demangle" "cpp_demangle" "fallible-iterator" "smallvec" "dep:clap" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "rustc-demangle" "cpp_demangle" "loader" "fallible-iterator" "smallvec" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [ "std" "dep:object" "dep:memmap2" "dep:typed-arena" ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [ "core" "alloc" "compiler_builtins" "gimli/rustc-dep-of-std" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.1";
        edition = "2021";
        sha256 = "1ymy18s9hs7ya1pjc9864l30wk8p2qfqdi7mhhcc5nfakxbij09j";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "aead" = rec {
        crateName = "aead";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1c32aviraqag7926xcb9sybdm36v5vh9gnxpn4pxdwjc50zl28ni";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "blobby" = [ "dep:blobby" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "rand_core" ];
          "dev" = [ "blobby" ];
          "getrandom" = [ "crypto-common/getrandom" "rand_core" ];
          "heapless" = [ "dep:heapless" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "rand_core" ];
      };
      "aes" = rec {
        crateName = "aes";
        version = "0.8.4";
        edition = "2021";
        sha256 = "1853796anlwp4kqim0s6wm1srl4ib621nm0cl2h3c8klsjkgfsdi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "aes-gcm-siv" = rec {
        crateName = "aes-gcm-siv";
        version = "0.11.1";
        edition = "2021";
        sha256 = "039ycyz9hijvrv2hiks9a1099yprqpkk3v39shb58dx99c9q81xf";
        libName = "aes_gcm_siv";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
          }
          {
            name = "aes";
            packageId = "aes";
            optional = true;
          }
          {
            name = "cipher";
            packageId = "cipher";
          }
          {
            name = "ctr";
            packageId = "ctr";
          }
          {
            name = "polyval";
            packageId = "polyval";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "aead";
            packageId = "aead";
            usesDefaultFeatures = false;
            features = [ "dev" ];
          }
        ];
        features = {
          "aes" = [ "dep:aes" ];
          "alloc" = [ "aead/alloc" ];
          "default" = [ "aes" "alloc" "getrandom" ];
          "getrandom" = [ "aead/getrandom" ];
          "heapless" = [ "aead/heapless" ];
          "std" = [ "aead/std" "alloc" ];
          "stream" = [ "aead/stream" ];
        };
        resolvedDefaultFeatures = [ "aes" "alloc" "default" "getrandom" ];
      };
      "agave-feature-set" = rec {
        crateName = "agave-feature-set";
        version = "2.3.4";
        edition = "2021";
        sha256 = "02r1mf7bgk4fyrzjb8ihgd857qi21gl5l9kxnza4dl990h738cr7";
        libName = "agave_feature_set";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "solana-svm-feature-set";
            packageId = "solana-svm-feature-set";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.12";
        edition = "2018";
        sha256 = "0xbsp9rlm5ki017c0w6ay8kjwinwm8knjncci95mii30rmwz25as";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target = { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [ "dep:portable-atomic" "once_cell/critical-section" ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [ "std" "runtime-rng" ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "getrandom" "runtime-rng" "std" ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf-literal" ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [ "perf-literal" "std" ];
      };
      "alloc-no-stdlib" = rec {
        crateName = "alloc-no-stdlib";
        version = "2.0.4";
        edition = "2015";
        crateBin = [];
        sha256 = "1cy6r2sfv5y5cigv86vms7n5nlwhx1rbyxwcraqnmm1rxiib2yyc";
        libName = "alloc_no_stdlib";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
        ];
        features = {
        };
      };
      "alloc-stdlib" = rec {
        crateName = "alloc-stdlib";
        version = "0.2.2";
        edition = "2015";
        crateBin = [];
        sha256 = "1kkfbld20ab4165p29v172h8g0wvq8i06z8vnng14whw0isq5ywl";
        libName = "alloc_stdlib";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
        ];
        features = {
        };
      };
      "anchor-attribute-access-control" = rec {
        crateName = "anchor-attribute-access-control";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1ky0z4db10zsypx98x4c0i3m922ga0r6n0jk2bqss62d38agsw1z";
        procMacro = true;
        libName = "anchor_attribute_access_control";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
        };
      };
      "anchor-attribute-account" = rec {
        crateName = "anchor-attribute-account";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0r50i19pwjnagjh8xgc61z1lm1xgl97sf1vgw20rary7awf2cnki";
        procMacro = true;
        libName = "anchor_attribute_account";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
            features = [ "hash" ];
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
      };
      "anchor-attribute-constant" = rec {
        crateName = "anchor-attribute-constant";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1r02c4l2y0h2i4j04w99r06vgr492zk7j1syqb2j20qjmvw6s3bk";
        procMacro = true;
        libName = "anchor_attribute_constant";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
      };
      "anchor-attribute-error" = rec {
        crateName = "anchor-attribute-error";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1vrkndpn9p3s5m1pdqsq1r69ayx1wnwazp3l1f4b4drsri4y9ri7";
        procMacro = true;
        libName = "anchor_attribute_error";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
      };
      "anchor-attribute-event" = rec {
        crateName = "anchor-attribute-event";
        version = "0.31.1";
        edition = "2021";
        sha256 = "17yl3pygjvx8dghk2zqxqzcld27gqpg9mgnrzjpqbx5dai60wwfp";
        procMacro = true;
        libName = "anchor_attribute_event";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
            features = [ "hash" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "event-cpi" = [ "anchor-syn/event-cpi" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
      };
      "anchor-attribute-program" = rec {
        crateName = "anchor-attribute-program";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0g685s5k2qagndi7bql7rrvfvaq2nh6j6qjjycrfpbdfn94zvv05";
        procMacro = true;
        libName = "anchor_attribute_program";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang-idl";
            packageId = "anchor-lang-idl";
            features = [ "convert" ];
          }
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
          "interface-instructions" = [ "anchor-syn/interface-instructions" ];
        };
      };
      "anchor-client" = rec {
        crateName = "anchor-client";
        version = "0.31.1";
        edition = "2021";
        sha256 = "09fjvr3znyhq659522knlyc7j1i2gn6dmsbxy343f7ah28dykcs9";
        libName = "anchor_client";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "solana-account-decoder";
            packageId = "solana-account-decoder";
          }
          {
            name = "solana-client";
            packageId = "solana-client";
          }
          {
            name = "solana-sdk";
            packageId = "solana-sdk";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "rt" "sync" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
        };
      };
      "anchor-derive-accounts" = rec {
        crateName = "anchor-derive-accounts";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0jb1gb5x7hg2gkj1vj9hlqq8xr3q745h39v2yid4k21sg5hd32dy";
        procMacro = true;
        libName = "anchor_derive_accounts";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "allow-missing-optionals" = [ "anchor-syn/allow-missing-optionals" ];
          "anchor-debug" = [ "anchor-syn/anchor-debug" ];
          "idl-build" = [ "anchor-syn/idl-build" ];
          "init-if-needed" = [ "anchor-syn/init-if-needed" ];
        };
      };
      "anchor-derive-serde" = rec {
        crateName = "anchor-derive-serde";
        version = "0.31.1";
        edition = "2021";
        sha256 = "1r76v47mxs3gpwfz03hc38lc12a7m9x6gg1avp1f1gxpmiwfximb";
        procMacro = true;
        libName = "anchor_derive_serde";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-syn";
            packageId = "anchor-syn";
          }
          {
            name = "borsh-derive-internal";
            packageId = "borsh-derive-internal";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];
        features = {
          "idl-build" = [ "anchor-syn/idl-build" ];
        };
      };
      "anchor-derive-space" = rec {
        crateName = "anchor-derive-space";
        version = "0.31.1";
        edition = "2021";
        sha256 = "19yf4b8cix2h1jr71qzn3sn1zr7kyqrw0wp4l1ax6vrzf3002jhk";
        procMacro = true;
        libName = "anchor_derive_space";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "extra-traits" ];
          }
        ];

      };
      "anchor-lang" = rec {
        crateName = "anchor-lang";
        version = "0.31.1";
        edition = "2021";
        sha256 = "02hsaqaknyk78vp2rfa1fbz8s7w6izh9dhb2ywqfj1ar0lbv3fp6";
        libName = "anchor_lang";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-attribute-access-control";
            packageId = "anchor-attribute-access-control";
          }
          {
            name = "anchor-attribute-account";
            packageId = "anchor-attribute-account";
          }
          {
            name = "anchor-attribute-constant";
            packageId = "anchor-attribute-constant";
          }
          {
            name = "anchor-attribute-error";
            packageId = "anchor-attribute-error";
          }
          {
            name = "anchor-attribute-event";
            packageId = "anchor-attribute-event";
          }
          {
            name = "anchor-attribute-program";
            packageId = "anchor-attribute-program";
          }
          {
            name = "anchor-derive-accounts";
            packageId = "anchor-derive-accounts";
          }
          {
            name = "anchor-derive-serde";
            packageId = "anchor-derive-serde";
          }
          {
            name = "anchor-derive-space";
            packageId = "anchor-derive-space";
          }
          {
            name = "base64";
            packageId = "base64 0.21.7";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "allow-missing-optionals" = [ "anchor-derive-accounts/allow-missing-optionals" ];
          "anchor-debug" = [ "anchor-attribute-access-control/anchor-debug" "anchor-attribute-account/anchor-debug" "anchor-attribute-constant/anchor-debug" "anchor-attribute-error/anchor-debug" "anchor-attribute-event/anchor-debug" "anchor-attribute-program/anchor-debug" "anchor-derive-accounts/anchor-debug" ];
          "anchor-lang-idl" = [ "dep:anchor-lang-idl" ];
          "event-cpi" = [ "anchor-attribute-event/event-cpi" ];
          "idl-build" = [ "anchor-attribute-account/idl-build" "anchor-attribute-constant/idl-build" "anchor-attribute-event/idl-build" "anchor-attribute-error/idl-build" "anchor-attribute-program/idl-build" "anchor-derive-accounts/idl-build" "anchor-derive-serde/idl-build" "anchor-lang-idl/build" ];
          "init-if-needed" = [ "anchor-derive-accounts/init-if-needed" ];
          "interface-instructions" = [ "anchor-attribute-program/interface-instructions" ];
          "lazy-account" = [ "anchor-attribute-account/lazy-account" "anchor-derive-serde/lazy-account" ];
        };
      };
      "anchor-lang-idl" = rec {
        crateName = "anchor-lang-idl";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0624ibhvrl0vs0ac1zlaslpmivrw1jmsani6jvi6hpwr46fmks1j";
        libName = "anchor_lang_idl";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anchor-lang-idl-spec";
            packageId = "anchor-lang-idl-spec";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "heck";
            packageId = "heck";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
          }
        ];
        features = {
          "build" = [ "regex" ];
          "convert" = [ "heck" "sha2" ];
          "heck" = [ "dep:heck" ];
          "regex" = [ "dep:regex" ];
          "sha2" = [ "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "convert" "heck" "sha2" ];
      };
      "anchor-lang-idl-spec" = rec {
        crateName = "anchor-lang-idl-spec";
        version = "0.1.0";
        edition = "2021";
        sha256 = "0f1q20zw3819jibamcl2rpv0jbj7yyhjjfmcplhyc3s42lqi9prb";
        libName = "anchor_lang_idl_spec";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];

      };
      "anchor-syn" = rec {
        crateName = "anchor-syn";
        version = "0.31.1";
        edition = "2021";
        sha256 = "0rzdi6291j4gq4w6b4r8blg7sn40y76n4j3ls87dyhy61kcsdisx";
        libName = "anchor_syn";
        authors = [
          "Anchor Maintainers <accounts@200ms.io>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bs58";
            packageId = "bs58";
          }
          {
            name = "heck";
            packageId = "heck";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            features = [ "span-locations" ];
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "extra-traits" "parsing" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "cargo_toml" = [ "dep:cargo_toml" ];
          "idl-build" = [ "cargo_toml" ];
        };
        resolvedDefaultFeatures = [ "hash" ];
      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.98";
        edition = "2018";
        sha256 = "11ylvjdrcjs0q9jgk1af4r5cx1qppj63plxqkq595vmc24rjsvg1";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "ark-bn254" = rec {
        crateName = "ark-bn254";
        version = "0.4.0";
        edition = "2021";
        sha256 = "03qjfa4zvfkv974z7xr1s8q28ncgvz2x9mvq1mclknaca9hlabx2";
        libName = "ark_bn254";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ec";
            packageId = "ark-ec";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "curve" = [ "scalar_field" ];
          "default" = [ "curve" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-ec/std" ];
        };
        resolvedDefaultFeatures = [ "curve" "default" "scalar_field" ];
      };
      "ark-ec" = rec {
        crateName = "ark-ec";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fkh0rswp4d5rn4hmmbibz2wh6x6k3sp21faijb29b2nkm1rmzfy";
        libName = "ark_ec";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-poly";
            packageId = "ark-poly";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" "ark-serialize/std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ff" = rec {
        crateName = "ark-ff";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1fk6546nddgs3lsnv1s06fh8mnik5h1ijmck928d4jpla3w7m17c";
        libName = "ark_ff";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff-asm";
            packageId = "ark-ff-asm";
          }
          {
            name = "ark-ff-macros";
            packageId = "ark-ff-macros";
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            features = [ "use_core" ];
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.10.5";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        features = {
          "parallel" = [ "std" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-serialize/std" "itertools/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "ark-ff-asm" = rec {
        crateName = "ark-ff-asm";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0j13p6ymma3ypbjipfkc937pn57as8qpwgrpg5nvrl2mw97smm1y";
        procMacro = true;
        libName = "ark_ff_asm";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-ff-macros" = rec {
        crateName = "ark-ff-macros";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0ra5a4paqbqqlc9a3cnwkwxh7l1411wsnna1az28k218wjq7kgks";
        procMacro = true;
        libName = "ark_ff_macros";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "parsing" "extra-traits" ];
          }
        ];

      };
      "ark-poly" = rec {
        crateName = "ark-poly";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1gw6zrbl1rx1jwcnwwaq2p727fda66yaipxsrjcxi1g19v2by86k";
        libName = "ark_poly";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-ff";
            packageId = "ark-ff";
            usesDefaultFeatures = false;
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "derivative";
            packageId = "derivative";
            usesDefaultFeatures = false;
            features = [ "use_core" ];
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "parallel" = [ "std" "ark-ff/parallel" "rayon" "ark-std/parallel" ];
          "rayon" = [ "dep:rayon" ];
          "std" = [ "ark-std/std" "ark-ff/std" ];
        };
      };
      "ark-serialize" = rec {
        crateName = "ark-serialize";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1992x2cd05pw3v5hfqnb8114g2cwdk3cmmcvz0i2ygdq09dbidxd";
        libName = "ark_serialize";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "ark-serialize-derive";
            packageId = "ark-serialize-derive";
            optional = true;
          }
          {
            name = "ark-std";
            packageId = "ark-std";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            usesDefaultFeatures = false;
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ark-serialize-derive" = [ "dep:ark-serialize-derive" ];
          "derive" = [ "ark-serialize-derive" ];
          "std" = [ "ark-std/std" ];
        };
        resolvedDefaultFeatures = [ "ark-serialize-derive" "default" "derive" ];
      };
      "ark-serialize-derive" = rec {
        crateName = "ark-serialize-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1sl2yrpk88v4lfgkblwgd2yqa89hw48jbd9jmx4ybmqgdny82cmf";
        procMacro = true;
        libName = "ark_serialize_derive";
        authors = [
          "arkworks Contributors"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "ark-std" = rec {
        crateName = "ark-std";
        version = "0.4.0";
        edition = "2021";
        sha256 = "11aigd20y0x9l3mw1bxsrgklzbscn86lrp78mmjbgskf1hg3z2cl";
        libName = "ark_std";
        authors = [
          "arkworks contributors"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            usesDefaultFeatures = false;
            features = [ "std_rng" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
            features = [ "std" ];
          }
        ];
        features = {
          "colored" = [ "dep:colored" ];
          "default" = [ "std" ];
          "getrandom" = [ "rand/std" ];
          "parallel" = [ "rayon" "std" ];
          "print-trace" = [ "std" "colored" ];
          "rayon" = [ "dep:rayon" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "asn1-rs" = rec {
        crateName = "asn1-rs";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1w7zq0392qs7kkv0nzw50bfqvq7q9zxv48fsp3sxyl83mzfxavvz";
        libName = "asn1_rs";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs-derive";
            packageId = "asn1-rs-derive";
          }
          {
            name = "asn1-rs-impl";
            packageId = "asn1-rs-impl";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
          }
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "time";
            packageId = "time";
            optional = true;
            features = [ "macros" "parsing" "formatting" ];
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bits" = [ "bitvec" ];
          "bitvec" = [ "dep:bitvec" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "datetime" = [ "time" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "cookie-factory" ];
          "time" = [ "dep:time" ];
        };
        resolvedDefaultFeatures = [ "datetime" "default" "std" "time" ];
      };
      "asn1-rs-derive" = rec {
        crateName = "asn1-rs-derive";
        version = "0.4.0";
        edition = "2018";
        sha256 = "0v7fgmnzk7jjxv51grhwzcx5bf167nlqwk3vcmq7xblf5s4karbj";
        procMacro = true;
        libName = "asn1_rs_derive";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.12.6";
          }
        ];

      };
      "asn1-rs-impl" = rec {
        crateName = "asn1-rs-impl";
        version = "0.1.0";
        edition = "2018";
        sha256 = "1va27bn7qxqp4wanzjlkagnynv6jnrhnwmcky2ahzb1r405p6xr7";
        procMacro = true;
        libName = "asn1_rs_impl";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0dbdlkzlncbibd3ij6y6jmvjd0cmdn48ydcfdpfhw09njd93r5c1";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
        ];

      };
      "async-compression" = rec {
        crateName = "async-compression";
        version = "0.4.26";
        edition = "2018";
        sha256 = "1f9b8z1jkvvf0sr3b4iz7b9b1rfjqn7g80d1hj4hpalbimvl2zwk";
        libName = "async_compression";
        authors = [
          "Wim Looman <wim@nemo157.com>"
          "Allen Bui <fairingrey@gmail.com>"
        ];
        dependencies = [
          {
            name = "brotli";
            packageId = "brotli";
            optional = true;
          }
          {
            name = "flate2";
            packageId = "flate2";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" "macros" "rt-multi-thread" "io-std" ];
          }
        ];
        features = {
          "all" = [ "all-implementations" "all-algorithms" ];
          "all-algorithms" = [ "brotli" "bzip2" "deflate" "gzip" "lz4" "lzma" "xz-parallel" "xz" "zlib" "zstd" "deflate64" ];
          "all-implementations" = [ "futures-io" "tokio" ];
          "brotli" = [ "dep:brotli" ];
          "bzip2" = [ "dep:bzip2" ];
          "deflate" = [ "flate2" ];
          "deflate64" = [ "dep:deflate64" ];
          "flate2" = [ "dep:flate2" ];
          "futures-io" = [ "dep:futures-io" ];
          "gzip" = [ "flate2" ];
          "libzstd" = [ "dep:libzstd" ];
          "lz4" = [ "dep:lz4" ];
          "lzma" = [ "dep:liblzma" ];
          "tokio" = [ "dep:tokio" ];
          "xz" = [ "lzma" ];
          "xz-parallel" = [ "xz" "liblzma/parallel" ];
          "xz2" = [ "xz" ];
          "zlib" = [ "flate2" ];
          "zstd" = [ "libzstd" "zstd-safe" ];
          "zstd-safe" = [ "dep:zstd-safe" ];
          "zstdmt" = [ "zstd" "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "brotli" "flate2" "gzip" "tokio" "zlib" ];
      };
      "async-lock" = rec {
        crateName = "async-lock";
        version = "3.4.0";
        edition = "2021";
        sha256 = "060vh45i809wcqyxzs5g69nqiqah7ydz0hpkcjys9258vqn4fvpz";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" "dep:loom" ];
          "std" = [ "event-listener/std" "event-listener-strategy/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.88";
        edition = "2021";
        sha256 = "1dgxvz7g75cmz6vqqz0mri4xazc6a8xfj1db6r9fxz29lzyd6fg5";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "full" "parsing" "printing" "proc-macro" "visit-mut" ];
          }
        ];

      };
      "atty" = rec {
        crateName = "atty";
        version = "0.2.14";
        edition = "2015";
        sha256 = "1s7yslcs6a28c5vz7jwj63lkfgyx8mx99fdirlhi9lbhhzhrpcyr";
        authors = [
          "softprops <d.tangren@gmail.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.1.19";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "consoleapi" "processenv" "minwinbase" "minwindef" "winbase" ];
          }
        ];

      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1s77f98id9l4af4alklmzq46f21c980v13z2r1pcxx6bqgw0d1n0";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.75";
        edition = "2021";
        sha256 = "00hhizz29mvd7cdqyz5wrj98vqkihgcxmv2vl7z0d0f53qrac1k8";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target = { target, features }: (!((target."windows" or false) && ("msvc" == target."env" or null) && (!("uwp" == target."vendor" or null))));
            features = [ "read_core" "elf" "macho" "pe" "xcoff" "unaligned" "archive" ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: ((target."windows" or false) || ("cygwin" == target."os" or null));
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "ruzstd" = [ "dep:ruzstd" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.12.3" = rec {
        crateName = "base64";
        version = "0.12.3";
        edition = "2018";
        sha256 = "1zq33had71xh48n17g4kqs96szhx3yh7qibzwi4fk217n3vz0h9l";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "base64 0.13.1" = rec {
        crateName = "base64";
        version = "0.13.1";
        edition = "2018";
        sha256 = "1s494mqmzjb766fy1kqlccgfg2sdcjb6hzbvzqv2jw65fdi5h6wy";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "base64 0.21.7" = rec {
        crateName = "base64";
        version = "0.21.7";
        edition = "2018";
        sha256 = "0rw52yvsk75kar9wgqfwgb414kvil1gn7mqkrhn9zf1537mpsacx";
        authors = [
          "Alice Maz <alice@alicemaz.com>"
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "base64 0.22.1" = rec {
        crateName = "base64";
        version = "0.22.1";
        edition = "2018";
        sha256 = "1imqzgh7bxcikp5vx3shqvw9j09g9ly0xr0jma0q66i52r7jbcvj";
        authors = [
          "Marshall Pierce <marshall@mpierce.org>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bincode" = rec {
        crateName = "bincode";
        version = "1.3.3";
        edition = "2015";
        sha256 = "1bfw3mnwzx5g1465kiqllp5n4r10qrqy88kdlp3jfwnq2ya5xx5i";
        authors = [
          "Ty Overby <ty@pre-alpha.com>"
          "Francesco Mazzoli <f@mazzo.li>"
          "David Tolnay <dtolnay@gmail.com>"
          "Zoey Riordan <zoey@dos.cafe>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
        };
      };
      "bitflags" = rec {
        crateName = "bitflags";
        version = "2.9.1";
        edition = "2021";
        sha256 = "0rz9rpp5wywwqb3mxfkywh4drmzci2fch780q7lifbf6bsc5d3hv";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "blake3" = rec {
        crateName = "blake3";
        version = "1.8.2";
        edition = "2021";
        sha256 = "1854x65zmjh9w9cfhyyyg0wmm2k5d87l13l4m7y40ajbkslam21q";
        authors = [
          "Jack O'Connor <oconnor663@gmail.com>"
          "Samuel Neves"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "constant_time_eq";
            packageId = "constant_time_eq";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            features = [ "mac" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "default" = [ "std" ];
          "digest" = [ "dep:digest" ];
          "mmap" = [ "std" "dep:memmap2" ];
          "rayon" = [ "dep:rayon-core" ];
          "serde" = [ "dep:serde" ];
          "traits-preview" = [ "dep:digest" ];
          "zeroize" = [ "dep:zeroize" "arrayvec/zeroize" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "traits-preview" ];
      };
      "block-buffer 0.10.4" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-buffer 0.9.0" = rec {
        crateName = "block-buffer";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1r4pf90s7d7lj1wdjhlnqa26vvbm6pnc33z138lxpnp9srpi2lj1";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
        };
      };
      "borsh 0.10.4" = rec {
        crateName = "borsh";
        version = "0.10.4";
        edition = "2018";
        crateBin = [];
        sha256 = "1vkgajwrpncr46hk6nn8j3382jffkpy9xhcisfxdwb5n9vb58phi";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive 0.10.4";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.13.2";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "borsh 1.5.7" = rec {
        crateName = "borsh";
        version = "1.5.7";
        edition = "2018";
        crateBin = [];
        sha256 = "1kikljm5yr3l9qsw5xvdccragxj4445s4s3fqsgy6hmmipwld1md";
        authors = [
          "Near Inc <hello@near.org>"
        ];
        dependencies = [
          {
            name = "borsh-derive";
            packageId = "borsh-derive 1.5.7";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "borsh-derive" = [ "dep:borsh-derive" ];
          "bson" = [ "dep:bson" ];
          "bytes" = [ "dep:bytes" ];
          "default" = [ "std" ];
          "derive" = [ "borsh-derive" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "indexmap" = [ "dep:indexmap" ];
          "unstable__schema" = [ "derive" "borsh-derive/schema" ];
        };
        resolvedDefaultFeatures = [ "borsh-derive" "default" "derive" "std" "unstable__schema" ];
      };
      "borsh-derive 0.10.4" = rec {
        crateName = "borsh-derive";
        version = "0.10.4";
        edition = "2018";
        sha256 = "12gg3kgi6gi4qlqrxlccpnhffsxsb8scbqlnss6rj8wl1pw164l3";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "borsh-derive-internal";
            packageId = "borsh-derive-internal";
          }
          {
            name = "borsh-schema-derive-internal";
            packageId = "borsh-schema-derive-internal";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 0.1.5";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-derive 1.5.7" = rec {
        crateName = "borsh-derive";
        version = "1.5.7";
        edition = "2018";
        sha256 = "1hwsznww7d01bh1fzpndzmcpyp00xpl2y9bg70i3z0zmqb0d7lgx";
        procMacro = true;
        libName = "borsh_derive";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "fold" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "fold" "parsing" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" "schema" ];
      };
      "borsh-derive-internal" = rec {
        crateName = "borsh-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1cvn16046101px9b98i3np95rmrwvzbi63d7l957362cci8bmmk5";
        libName = "borsh_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "borsh-schema-derive-internal" = rec {
        crateName = "borsh-schema-derive-internal";
        version = "0.10.4";
        edition = "2018";
        sha256 = "1m5nldxh5ji4hxw7g3zlm6xqwj4f2j32nsg6hfz2fd06dzcr2ri7";
        libName = "borsh_schema_derive_internal";
        authors = [
          "Near Inc <hello@nearprotocol.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" "fold" ];
          }
        ];

      };
      "brotli" = rec {
        crateName = "brotli";
        version = "8.0.1";
        edition = "2015";
        crateBin = [];
        sha256 = "038fdq2whhzsxxav5wyy5nqv5c49xr0qwr1q85997wm41skyx4cr";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
          "The Brotli Authors"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
          {
            name = "alloc-stdlib";
            packageId = "alloc-stdlib";
            optional = true;
          }
          {
            name = "brotli-decompressor";
            packageId = "brotli-decompressor";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc-stdlib" = [ "dep:alloc-stdlib" ];
          "benchmark" = [ "brotli-decompressor/benchmark" ];
          "default" = [ "std" ];
          "disable-timer" = [ "brotli-decompressor/disable-timer" ];
          "ffi-api" = [ "brotli-decompressor/ffi-api" ];
          "seccomp" = [ "brotli-decompressor/seccomp" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "alloc-stdlib" "brotli-decompressor/std" ];
          "validation" = [ "sha2" ];
        };
        resolvedDefaultFeatures = [ "alloc-stdlib" "default" "std" ];
      };
      "brotli-decompressor" = rec {
        crateName = "brotli-decompressor";
        version = "5.0.0";
        edition = "2015";
        crateBin = [];
        sha256 = "00yyswj1rj20ma4wr4wcci4r9ywlgvxa87nqsv5rik5y588vhjw7";
        libName = "brotli_decompressor";
        authors = [
          "Daniel Reiter Horn <danielrh@dropbox.com>"
          "The Brotli Authors"
        ];
        dependencies = [
          {
            name = "alloc-no-stdlib";
            packageId = "alloc-no-stdlib";
          }
          {
            name = "alloc-stdlib";
            packageId = "alloc-stdlib";
            optional = true;
          }
        ];
        features = {
          "alloc-stdlib" = [ "dep:alloc-stdlib" ];
          "default" = [ "std" ];
          "std" = [ "alloc-stdlib" ];
          "unsafe" = [ "alloc-no-stdlib/unsafe" "alloc-stdlib/unsafe" ];
        };
        resolvedDefaultFeatures = [ "alloc-stdlib" "std" ];
      };
      "bs58" = rec {
        crateName = "bs58";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1x3v51n5n2s3l0rgrsn142akdf331n2qsa75pscw71fi848vm25z";
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "grab_spare_slice" ];
          }
        ];
        devDependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "rustc_1_55" ];
          }
        ];
        features = {
          "alloc" = [ "tinyvec?/alloc" ];
          "cb58" = [ "sha2" ];
          "check" = [ "sha2" ];
          "default" = [ "std" ];
          "sha2" = [ "dep:sha2" ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "alloc" "tinyvec?/std" ];
          "tinyvec" = [ "dep:tinyvec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.19.0";
        edition = "2021";
        sha256 = "0hsdndvcpqbjb85ghrhska2qxvp9i75q2vb70hma9fxqawdy9ia6";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "bench_allocator_api" = [ "allocator_api" "blink-alloc/nightly" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bv" = rec {
        crateName = "bv";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0h5kbl54fsccznfixw83xndbripw39y2qkqjwf709p75iqfvnd48";
        authors = [
          "Jesse A. Tov <jesse.tov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        buildDependencies = [
          {
            name = "feature-probe";
            packageId = "feature-probe";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.23.1";
        edition = "2018";
        sha256 = "08ilqv7x5lckj82i41j5lx2is9krcxiibgrs9pispr245rwsaxjw";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [ "aarch64_simd" "avx512_simd" "align_offset" "alloc_uninit" "const_zeroed" "derive" "impl_core_error" "min_const_generics" "must_cast" "must_cast_extra" "pod_saturating" "track_caller" "transparentwrapper_extra" "wasm_simd" "zeroable_atomics" "zeroable_maybe_uninit" "zeroable_unwind_fn" ];
          "must_cast_extra" = [ "must_cast" ];
        };
        resolvedDefaultFeatures = [ "bytemuck_derive" "derive" ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.9.3";
        edition = "2018";
        sha256 = "18g1r1zgwiz5px2kf1n55ibjb2aqm86nkw28ss1mn85k94xjgk3y";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.10.1";
        edition = "2018";
        sha256 = "0smd4wi2yrhp5pmq571yiaqx84bjqlm1ixqhnvfwzzc6pqkn26yp";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "extra-platforms" = [ "dep:extra-platforms" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "serde" "std" ];
      };
      "caps" = rec {
        crateName = "caps";
        version = "0.5.5";
        edition = "2018";
        sha256 = "02vk0w48rncgvfmj2mz2kpzvdgc14z225451w7lvvkwvaansl2qr";
        authors = [
          "Luca Bruno <lucab@lucabruno.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_support" = [ "serde" ];
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.2.29";
        edition = "2018";
        sha256 = "0qlkaspjmywvjyfqhpv2x4kwrqs6b69zg33wfi2l8fg2im9rj5aw";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [ "dep:libc" "dep:jobserver" ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.1";
        edition = "2018";
        sha256 = "0s0jr5j797q1vqjcd41l0v5izlmlqm7lxy512b418xz5r65mfmcm";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "cfg_aliases" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cfg_eval" = rec {
        crateName = "cfg_eval";
        version = "0.1.2";
        edition = "2021";
        sha256 = "13zqm1jc0ghc0bj1f33kcqxfa3l1dxvsqcjp9w0rd63b874mymj5";
        procMacro = true;
        authors = [
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "parsing" "printing" ];
          }
        ];
        features = {
          "docs-rs" = [ "better-docs" ];
          "ui-tests" = [ "better-docs" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "chrono" = rec {
        crateName = "chrono";
        version = "0.4.41";
        edition = "2021";
        sha256 = "0k8wy2mph0mgipq28vv3wirivhb31pqs7jyid0dzjivz0i9djsf4";
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "android-tzdata" = [ "dep:android-tzdata" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "clock" = [ "winapi" "iana-time-zone" "android-tzdata" "now" ];
          "default" = [ "clock" "std" "oldtime" "wasmbind" ];
          "iana-time-zone" = [ "dep:iana-time-zone" ];
          "js-sys" = [ "dep:js-sys" ];
          "now" = [ "std" ];
          "pure-rust-locales" = [ "dep:pure-rust-locales" ];
          "rkyv" = [ "dep:rkyv" "rkyv/size_32" ];
          "rkyv-16" = [ "dep:rkyv" "rkyv?/size_16" ];
          "rkyv-32" = [ "dep:rkyv" "rkyv?/size_32" ];
          "rkyv-64" = [ "dep:rkyv" "rkyv?/size_64" ];
          "rkyv-validation" = [ "rkyv?/validation" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "unstable-locales" = [ "pure-rust-locales" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasmbind" = [ "wasm-bindgen" "js-sys" ];
          "winapi" = [ "windows-link" ];
          "windows-link" = [ "dep:windows-link" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "cipher" = rec {
        crateName = "cipher";
        version = "0.4.4";
        edition = "2021";
        sha256 = "1b9x9agg67xq5nq879z66ni4l08m6m3hqcshk37d4is4ysd3ngvp";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "inout";
            packageId = "inout";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-padding" = [ "inout/block-padding" ];
          "dev" = [ "blobby" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" "inout/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [ "pin-project" "std" "futures-core-03" "futures-io-03" "pin-project-lite" ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [ "memchr/std" "bytes" "alloc" ];
          "tokio" = [ "tokio-dep" "tokio-util/io" "futures-core-03" "pin-project-lite" ];
          "tokio-02" = [ "pin-project" "std" "tokio-02-dep" "futures-core-03" "pin-project-lite" "bytes_05" ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [ "pin-project" "std" "tokio-03-dep" "futures-core-03" "pin-project-lite" ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "alloc" "bytes" "default" "std" ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "console" = rec {
        crateName = "console";
        version = "0.15.11";
        edition = "2021";
        sha256 = "1n5gmsjk6isbnw6qss043377kln20lfwlmdk3vswpwpr21dwnk05";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_Console" "Win32_Storage_FileSystem" "Win32_UI_Input_KeyboardAndMouse" ];
          }
        ];
        features = {
          "default" = [ "unicode-width" "ansi-parsing" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
        resolvedDefaultFeatures = [ "ansi-parsing" "unicode-width" ];
      };
      "console_error_panic_hook" = rec {
        crateName = "console_error_panic_hook";
        version = "0.1.7";
        edition = "2015";
        sha256 = "1g5v8s0ndycc10mdn6igy914k645pgpcl8vjpz6nvxkhyirynsm0";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "console_log" = rec {
        crateName = "console_log";
        version = "0.2.2";
        edition = "2018";
        sha256 = "17s9awnafrz3cb2k4i9brvi8f2bqzcd5lk80ia5qf0c5bvv757z8";
        authors = [
          "Matthew Nicholson <matt@matt-land.com>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            features = [ "console" ];
          }
        ];
        features = {
          "color" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "constant_time_eq" = rec {
        crateName = "constant_time_eq";
        version = "0.3.1";
        edition = "2021";
        sha256 = "19nwwczii762pwlsm7bpizgjg8hkg1kqi32b2g4rglijklsbhx3w";
        authors = [
          "Cesar Eduardo Barros <cesarb@cesarb.eti.br>"
        ];
        features = {
        };
      };
      "core-foundation" = rec {
        crateName = "core-foundation";
        version = "0.10.1";
        edition = "2021";
        sha256 = "1xjns6dqf36rni2x9f47b65grxwdm20kwdg9lhmzdrrkwadcv9mj";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "with-uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "default" "link" ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.17";
        edition = "2018";
        sha256 = "10023dnnaghhdl70xcds12fsx2b966sxbxjq5sxs49mvxqw5ivar";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target.name == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.5.0";
        edition = "2021";
        sha256 = "04d51liy8rbssra92p0qnwjw8i9rm9c4m3bwy19wjamz1k4w30cl";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-channel" = rec {
        crateName = "crossbeam-channel";
        version = "0.5.15";
        edition = "2021";
        sha256 = "1cicd9ins0fkpfgvz9vhz3m9rpkh6n8d3437c3wnfsdkd3wgif42";
        libName = "crossbeam_channel";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-deque" = rec {
        crateName = "crossbeam-deque";
        version = "0.8.6";
        edition = "2021";
        sha256 = "0l9f1saqp1gn5qy0rxvkmz4m6n7fc0b3dbm6q1r5pmgpnyvi3lcx";
        libName = "crossbeam_deque";
        dependencies = [
          {
            name = "crossbeam-epoch";
            packageId = "crossbeam-epoch";
            usesDefaultFeatures = false;
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "crossbeam-epoch/std" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crossbeam-epoch" = rec {
        crateName = "crossbeam-epoch";
        version = "0.9.18";
        edition = "2021";
        sha256 = "03j2np8llwf376m3fxqx859mgp9f83hj1w34153c7a9c7i5ar0jv";
        libName = "crossbeam_epoch";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "loom-crate" "crossbeam-utils/loom" ];
          "loom-crate" = [ "dep:loom-crate" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [ "alloc" "crossbeam-utils/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.21";
        edition = "2021";
        sha256 = "0a3aa2bmc8q35fb67432w16wvi54sfmb69rk9h5bhd18vw0c99fh";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1mbp5navim2qr3x48lyvadqblcxc1dm0lqr0swrkkwy2qblvw3s6";
        authors = [
          "Eira Fransham <jackefransham@gmail.com>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [ "default" "limit_128" ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "getrandom" "rand_core" "std" ];
      };
      "crypto-mac" = rec {
        crateName = "crypto-mac";
        version = "0.8.0";
        edition = "2018";
        sha256 = "1axfs4zmy74rn9666p92j7nmcv11zdp2d51yrppc2dv26cqa715m";
        libName = "crypto_mac";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
        };
      };
      "ctr" = rec {
        crateName = "ctr";
        version = "0.9.2";
        edition = "2021";
        sha256 = "0d88b73waamgpfjdml78icxz45d95q7vi2aqa604b0visqdfws83";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cipher";
            packageId = "cipher";
          }
        ];
        devDependencies = [
          {
            name = "cipher";
            packageId = "cipher";
            features = [ "dev" ];
          }
        ];
        features = {
          "alloc" = [ "cipher/alloc" ];
          "block-padding" = [ "cipher/block-padding" ];
          "std" = [ "cipher/std" "alloc" ];
          "zeroize" = [ "cipher/zeroize" ];
        };
      };
      "curve25519-dalek 3.2.0" = rec {
        crateName = "curve25519-dalek";
        version = "3.2.0";
        edition = "2015";
        sha256 = "0q8v97275cy6v4ly6y2qwv9a8phnpjg9sy8kv7r6mgdjfacxz7qb";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
            usesDefaultFeatures = false;
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zeroize/alloc" ];
          "avx2_backend" = [ "simd_backend" ];
          "default" = [ "std" "u64_backend" ];
          "fiat-crypto" = [ "dep:fiat-crypto" ];
          "fiat_u32_backend" = [ "fiat-crypto" ];
          "fiat_u64_backend" = [ "fiat-crypto" ];
          "nightly" = [ "subtle/nightly" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "serde" = [ "dep:serde" ];
          "simd_backend" = [ "nightly" "u64_backend" "packed_simd" ];
          "std" = [ "alloc" "subtle/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" "u64_backend" ];
      };
      "curve25519-dalek 4.2.0" = rec {
        crateName = "curve25519-dalek";
        version = "4.2.0";
        edition = "2021";
        sha256 = "0zn9wzgv7mv5s8hs6kh6pzks2in4p1k8svm6rji6jxb3pmfpqfrp";
        libName = "curve25519_dalek";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "curve25519-dalek-derive";
            packageId = "curve25519-dalek-derive";
            target = { target, features }: ((!("fiat" == target."curve25519_dalek_backend" or null)) && (!("serial" == target."curve25519_dalek_backend" or null)) && ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "fiat-crypto";
            packageId = "fiat-crypto";
            usesDefaultFeatures = false;
            target = { target, features }: ("fiat" == target."curve25519_dalek_backend" or null);
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
            features = [ "const-generics" ];
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "rustc_version";
            packageId = "rustc_version";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
            features = [ "getrandom" ];
          }
        ];
        features = {
          "alloc" = [ "zeroize?/alloc" ];
          "default" = [ "alloc" "precomputed-tables" "zeroize" ];
          "digest" = [ "dep:digest" "digest/core-api" ];
          "ff" = [ "dep:ff" ];
          "group" = [ "dep:group" "rand_core" ];
          "group-bits" = [ "group" "ff/bits" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "digest" "precomputed-tables" "rand_core" "serde" "zeroize" ];
      };
      "curve25519-dalek-derive" = rec {
        crateName = "curve25519-dalek-derive";
        version = "0.1.1";
        edition = "2021";
        sha256 = "1cry71xxrr0mcy5my3fb502cwfxy6822k4pm19cwrilrg7hq4s7l";
        procMacro = true;
        libName = "curve25519_dalek_derive";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1vmlphlrlw4f50z16p4bc9p5qwdni1ba95qmxfrrmzs6dh8lczzw";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [ "default" "suggestions" ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.11";
        edition = "2021";
        sha256 = "0bj1af6xl4ablnqbgn827m43b8fiicgv180749f5cphqdmcvj00d";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "extra-traits" ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [ "strsim" "suggestions" ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.11";
        edition = "2021";
        sha256 = "1bbfbc2px6sj1pqqq97bgqn6c8xdnb2fmz66f7f40nrqrcybjd7w";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "dashmap" = rec {
        crateName = "dashmap";
        version = "5.5.3";
        edition = "2018";
        sha256 = "0miqnlxi501vfbv6mw5jbmzgnj0wjrch3p4abvpd59s9v30lg1wp";
        authors = [
          "Acrimon <joel.wejdenstal@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.14.5";
            usesDefaultFeatures = false;
          }
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "inline" = [ "hashbrown/inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "data-encoding" = rec {
        crateName = "data-encoding";
        version = "2.9.0";
        edition = "2018";
        sha256 = "0xm46371aw613ghc12ay4vsnn49hpcmcwlijnqy8lbp2bpd308ra";
        libName = "data_encoding";
        authors = [
          "Julien Cretin <git@ia0.eu>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "der-parser" = rec {
        crateName = "der-parser";
        version = "8.2.0";
        edition = "2018";
        sha256 = "07mnz9y395zyxwj7nam2dbzkqdngfraxp2i7y2714dxmpbxpdmnv";
        libName = "der_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
          }
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            optional = true;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "cookie-factory" = [ "dep:cookie-factory" ];
          "default" = [ "std" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serialize" = [ "std" "cookie-factory" ];
        };
        resolvedDefaultFeatures = [ "bigint" "default" "num-bigint" "std" ];
      };
      "deranged" = rec {
        crateName = "deranged";
        version = "0.4.0";
        edition = "2021";
        sha256 = "13h6skwk411wzhf1l9l7d3yz5y6vg9d7s3dwhhb4a942r88nm7lw";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        dependencies = [
          {
            name = "powerfmt";
            packageId = "powerfmt";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "macros" = [ "dep:deranged-macros" ];
          "num" = [ "dep:num-traits" ];
          "powerfmt" = [ "dep:powerfmt" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" ];
          "rand" = [ "rand08" "rand09" ];
          "rand08" = [ "dep:rand08" ];
          "rand09" = [ "dep:rand09" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "powerfmt" "std" ];
      };
      "derivation-path" = rec {
        crateName = "derivation-path";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1w5dw1vkh544wkjl1dx5c1hz4x912mxyq0wchvnxic8x78ckfp3f";
        libName = "derivation_path";
        authors = [
          "Julian Popescu <jpopesculian@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "visit" "extra-traits" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "use_core" ];
      };
      "digest 0.10.7" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.10.4";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [ "alloc" "crypto-common/std" ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [ "alloc" "block-buffer" "core-api" "default" "mac" "std" "subtle" ];
      };
      "digest 0.9.0" = rec {
        crateName = "digest";
        version = "0.9.0";
        edition = "2018";
        sha256 = "0rmhvk33rgvd6ll71z8sng91a52rw14p0drjn1da0mqa138n1pfk";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "dev" = [ "blobby" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "displaydoc" = rec {
        crateName = "displaydoc";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1q0alair462j21iiqwrr21iabkfnb13d6x5w95lkdg21q2xrqdlp";
        procMacro = true;
        authors = [
          "Jane Lusby <jlusby@yaah.dev>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "dlopen2" = rec {
        crateName = "dlopen2";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1yjg27x20d0v65lji6l18amah5nlx8gciv64iqdz0zqp07qzbd09";
        authors = [
          "Szymon Wieloch <szymon.wieloch@gmail.com>"
          "Ahmed Masud <ahmed.masud@saf.ai>"
          "OpenByte <development.openbyte@gmail.com>"
        ];
        dependencies = [
          {
            name = "dlopen2_derive";
            packageId = "dlopen2_derive";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "winnt" "minwindef" "winerror" "libloaderapi" "errhandlingapi" "dbghelp" "processthreadsapi" "basetsd" ];
          }
        ];
        features = {
          "default" = [ "wrapper" "symbor" "derive" ];
          "derive" = [ "dlopen2_derive" ];
          "dlopen2_derive" = [ "dep:dlopen2_derive" ];
        };
        resolvedDefaultFeatures = [ "default" "derive" "dlopen2_derive" "symbor" "wrapper" ];
      };
      "dlopen2_derive" = rec {
        crateName = "dlopen2_derive";
        version = "0.3.0";
        edition = "2015";
        sha256 = "1ww1nq5iz560c39w238zg7z3asr2vbda73kf8lmcx3yync8sxjx6";
        procMacro = true;
        authors = [
          "Szymon Wieloch <szymon.wieloch@gmail.com>"
          "OpenByte <development.openbyte@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "ed25519" = rec {
        crateName = "ed25519";
        version = "1.5.3";
        edition = "2021";
        sha256 = "1rzydm5wd8szkddx3g55w4vm86y1ika8qp8qwckada5vf1fg7kwi";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "signature";
            packageId = "signature";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "pkcs8/alloc" ];
          "default" = [ "std" ];
          "pem" = [ "pkcs8/pem" ];
          "pkcs8" = [ "dep:pkcs8" ];
          "serde" = [ "dep:serde" ];
          "serde_bytes" = [ "serde" "serde_bytes_crate" "std" ];
          "serde_bytes_crate" = [ "dep:serde_bytes_crate" ];
          "std" = [ "signature/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "ed25519-dalek" = rec {
        crateName = "ed25519-dalek";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17bsriciv93nkm39z22w7mr0h2a3hnbmgf378v4c895gvkkblqn7";
        libName = "ed25519_dalek";
        authors = [
          "isis lovecruft <isis@patternsinthevoid.net>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 3.2.0";
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519";
            packageId = "ed25519";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            rename = "serde_crate";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.7.3";
          }
          {
            name = "serde";
            packageId = "serde";
            rename = "serde_crate";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "curve25519-dalek/alloc" "rand/alloc" "zeroize/alloc" ];
          "asm" = [ "sha2/asm" ];
          "batch" = [ "merlin" "rand" ];
          "batch_deterministic" = [ "merlin" "rand" "rand_core" ];
          "default" = [ "std" "rand" "u64_backend" ];
          "merlin" = [ "dep:merlin" ];
          "nightly" = [ "curve25519-dalek/nightly" ];
          "rand" = [ "dep:rand" ];
          "rand_core" = [ "dep:rand_core" ];
          "serde" = [ "serde_crate" "serde_bytes" "ed25519/serde" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "serde_crate" = [ "dep:serde_crate" ];
          "simd_backend" = [ "curve25519-dalek/simd_backend" ];
          "std" = [ "curve25519-dalek/std" "ed25519/std" "serde_crate/std" "sha2/std" "rand/std" ];
          "u32_backend" = [ "curve25519-dalek/u32_backend" ];
          "u64_backend" = [ "curve25519-dalek/u64_backend" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" "serde_crate" "std" "u64_backend" ];
      };
      "ed25519-dalek-bip32" = rec {
        crateName = "ed25519-dalek-bip32";
        version = "0.2.0";
        edition = "2018";
        sha256 = "024rlmqz8apsqlcz0ffhi6wff70hdzyf8gl7q3475f3180mfcawx";
        libName = "ed25519_dalek_bip32";
        authors = [
          "Julian Popescu <jpopesculian@gmail.com>"
        ];
        dependencies = [
          {
            name = "derivation-path";
            packageId = "derivation-path";
            usesDefaultFeatures = false;
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            usesDefaultFeatures = false;
            features = [ "u64_backend" "rand" ];
          }
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "derivation-path/std" "sha2/std" "ed25519-dalek/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.15.0";
        edition = "2021";
        sha256 = "069p1fknsmzn9llaizh77kip0pqmcwpdsykv2x30xpjyija5gis8";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" "use_std" ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "1.0.0";
        edition = "2021";
        sha256 = "1h5j7j7byi289by63s3w4a8b3g6l5ccdrws7a67nn07vdxj77ail";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "env_logger" = rec {
        crateName = "env_logger";
        version = "0.9.3";
        edition = "2018";
        sha256 = "1rq0kqpa8my6i1qcyhfqrn1g9xr5fbkwwbd42nqvlzn9qibncbm1";
        dependencies = [
          {
            name = "atty";
            packageId = "atty";
            optional = true;
          }
          {
            name = "humantime";
            packageId = "humantime";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "regex";
            packageId = "regex";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" "perf" ];
          }
          {
            name = "termcolor";
            packageId = "termcolor";
            optional = true;
          }
        ];
        features = {
          "atty" = [ "dep:atty" ];
          "default" = [ "termcolor" "atty" "humantime" "regex" ];
          "humantime" = [ "dep:humantime" ];
          "regex" = [ "dep:regex" ];
          "termcolor" = [ "dep:termcolor" ];
        };
        resolvedDefaultFeatures = [ "atty" "default" "humantime" "regex" "termcolor" ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.2";
        edition = "2015";
        sha256 = "03swzqznragy8n0x31lqc78g2af054jwivp7lkrbrc0khz74lyl7";

      };
      "event-listener 2.5.3" = rec {
        crateName = "event-listener";
        version = "2.5.3";
        edition = "2018";
        sha256 = "1q4w3pndc518crld6zsqvvpy9lkzwahp2zgza9kbzmmqh9gif1h2";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "event-listener 5.4.0" = rec {
        crateName = "event-listener";
        version = "5.4.0";
        edition = "2021";
        sha256 = "1bii2gn3vaa33s0gr2zph7cagiq0ppcfxcxabs24ri9z9kgar4il";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "std" ];
          "loom" = [ "concurrent-queue/loom" "parking?/loom" "dep:loom" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [ "portable-atomic-util" "portable_atomic_crate" "concurrent-queue/portable-atomic" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [ "concurrent-queue/std" "parking" ];
        };
        resolvedDefaultFeatures = [ "parking" "std" ];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.4";
        edition = "2021";
        sha256 = "14rv18av8s7n8yixg38bxp5vg2qs394rl1w052by5npzmbgz7scb";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.4.0";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "event-listener/loom" ];
          "portable-atomic" = [ "event-listener/portable-atomic" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "fastbloom" = rec {
        crateName = "fastbloom";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1f7m6cnn8v72dwbha78yjw3xpqvgbmd4vzrri44kpm0jypksdki7";
        authors = [
          "tomtomwombat"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
            optional = true;
          }
          {
            name = "siphasher";
            packageId = "siphasher 1.0.1";
          }
          {
            name = "wide";
            packageId = "wide";
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
        ];
        features = {
          "default" = [ "rand" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "siphasher/serde_std" ];
        };
        resolvedDefaultFeatures = [ "default" "rand" ];
      };
      "feature-probe" = rec {
        crateName = "feature-probe";
        version = "0.1.1";
        edition = "2015";
        sha256 = "1nhif9zpr2f17gagf0qb0v914wc3jr9sfjzvnpi7b7pcs73ksnl3";
        libName = "feature_probe";
        authors = [
          "Jesse A. Tov <jesse.tov@gmail.com>"
        ];

      };
      "fiat-crypto" = rec {
        crateName = "fiat-crypto";
        version = "0.3.0";
        edition = "2021";
        sha256 = "094z20x40qws7ca8khvjqssiajf5sy1b1cgdwqd0cl6kvlr1xkb4";
        libName = "fiat_crypto";
        authors = [
          "Fiat Crypto library authors <jgross@mit.edu>"
        ];
        features = {
          "default" = [ "std" ];
        };
      };
      "five8" = rec {
        crateName = "five8";
        version = "0.2.1";
        edition = "2021";
        sha256 = "0xfqsxcwwzqfras0d8az3dk80sn7q6hsin5hzkg1aiwb914qanx7";
        dependencies = [
          {
            name = "five8_core";
            packageId = "five8_core";
          }
        ];
        features = {
          "std" = [ "five8_core/std" ];
        };
      };
      "five8_const" = rec {
        crateName = "five8_const";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0ywsg49zdmnnaiihfpz54d2k7ay3k2rflqagq3r0ivy3igdc7pi6";
        dependencies = [
          {
            name = "five8_core";
            packageId = "five8_core";
          }
        ];

      };
      "five8_core" = rec {
        crateName = "five8_core";
        version = "0.1.2";
        edition = "2021";
        sha256 = "1993fnn127x6mapn5qj3czh8n68078ar96sb0hanqxszpi2byl95";
        features = {
        };
      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.1.2";
        edition = "2018";
        sha256 = "07abz7v50lkdr5fjw8zaw2v8gm2vbppc0f7nqm8x3v3gb6wpsgaa";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [ "any_zlib" "cloudflare-zlib-sys" ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [ "miniz_oxide" "any_impl" ];
          "zlib" = [ "any_zlib" "libz-sys" ];
          "zlib-default" = [ "any_zlib" "libz-sys/default" ];
          "zlib-ng" = [ "any_zlib" "libz-ng-sys" ];
          "zlib-ng-compat" = [ "zlib" "libz-sys/zlib-ng" ];
          "zlib-rs" = [ "any_zlib" "libz-rs-sys" ];
        };
        resolvedDefaultFeatures = [ "any_impl" "default" "miniz_oxide" "rust_backend" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1cgk0vyd7r45cj769jym4a6s7vwshvd0z4bqrb92q1fwibmkkwzn";
        libName = "foreign_types";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];

      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.1.1";
        edition = "2015";
        sha256 = "0jxgzd04ra4imjv8jgkmdq59kj8fsz6w4zxsbmlai34h26225c00";
        libName = "foreign_types_shared";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" "percent-encoding/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures" = rec {
        crateName = "futures";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0xh8ddbkm9jy8kc5gbvjp9a4b6rqqxvc8471yb2qaz5wm2qhgg35";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" ];
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" "futures-sink/alloc" "futures-channel/alloc" "futures-util/alloc" ];
          "async-await" = [ "futures-util/async-await" "futures-util/async-await-macro" ];
          "bilock" = [ "futures-util/bilock" ];
          "compat" = [ "std" "futures-util/compat" ];
          "default" = [ "std" "async-await" "executor" ];
          "executor" = [ "std" "futures-executor/std" ];
          "futures-executor" = [ "dep:futures-executor" ];
          "io-compat" = [ "compat" "futures-util/io-compat" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "futures-io/std" "futures-sink/std" "futures-util/std" "futures-util/io" "futures-util/channel" ];
          "thread-pool" = [ "executor" "futures-executor/thread-pool" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" "futures-channel/unstable" "futures-io/unstable" "futures-util/unstable" ];
          "write-all-vectored" = [ "futures-util/write-all-vectored" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "default" "executor" "futures-executor" "std" ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.31";
        edition = "2018";
        sha256 = "040vpqpqlbk099razq8lyn74m0f161zd0rp36hciqrwcg2zibzrd";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [ "alloc" "futures-core/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "futures-sink" "sink" "std" ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0gk6yrxgi5ihfanm2y431jadrll00n5ifhnpx090c2f2q1cr1wh5";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-executor" = rec {
        crateName = "futures-executor";
        version = "0.3.31";
        edition = "2018";
        sha256 = "17vcci6mdfzx4gbk0wx64chr2f13wwwpvyf3xd5fb1gmjzcx2a0y";
        libName = "futures_executor";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "num_cpus" = [ "dep:num_cpus" ];
          "std" = [ "futures-core/std" "futures-task/std" "futures-util/std" ];
          "thread-pool" = [ "std" "num_cpus" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1ikmw1yfbgvsychmsihdkwa8a1knank2d9a8dk01mbjar9w1np4y";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.31";
        edition = "2018";
        sha256 = "0l1n7kqzwwmgiznn0ywdc5i24z72zvh9q1dwps54mimppi7f6bhn";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.31";
        edition = "2018";
        sha256 = "1xyly6naq6aqm52d5rh236snm08kw8zadydwqz8bip70s6vzlxg5";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.31";
        edition = "2018";
        sha256 = "124rv4n90f5xwfsm9qw6y99755y021cmi5dhzh253s920z77s3zr";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "futures-timer" = rec {
        crateName = "futures-timer";
        version = "3.0.3";
        edition = "2018";
        sha256 = "094vw8k37djpbwv74bwf2qb7n6v6ghif4myss6smd6hgyajb127j";
        libName = "futures_timer";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "gloo-timers" = [ "dep:gloo-timers" ];
          "send_wrapper" = [ "dep:send_wrapper" ];
          "wasm-bindgen" = [ "gloo-timers" "send_wrapper" ];
        };
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.31";
        edition = "2018";
        sha256 = "10aa1ar8bgkgbr4wzxlidkqkcxf77gffyj8j7768h831pcaq784z";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" "futures-task/alloc" ];
          "async-await-macro" = [ "async-await" "futures-macro" ];
          "channel" = [ "std" "futures-channel" ];
          "compat" = [ "std" "futures_01" ];
          "default" = [ "std" "async-await" "async-await-macro" ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [ "std" "futures-io" "memchr" ];
          "io-compat" = [ "io" "compat" "tokio-io" ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [ "alloc" "futures-core/std" "futures-task/std" "slab" ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [ "futures-core/unstable" "futures-task/unstable" ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [ "alloc" "async-await" "async-await-macro" "channel" "default" "futures-channel" "futures-io" "futures-macro" "futures-sink" "io" "memchr" "sink" "slab" "std" ];
      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "gethostname" = rec {
        crateName = "gethostname";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0bl6wf7zclzmjriipzh98rr84xv2ilj664z8ffxh0vn46m7d7sy1";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [ "sysinfoapi" ];
          }
        ];

      };
      "getrandom 0.1.16" = rec {
        crateName = "getrandom";
        version = "0.1.16";
        edition = "2018";
        sha256 = "1kjzmz60qx9mn615ks1akjbf36n3lkv27zfwbcam0fzmj56wphwg";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: (target.name == "wasm32-unknown-unknown");
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.9.0+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            rename = "bindgen";
            optional = true;
            target = { target, features }: (target.name == "wasm32-unknown-unknown");
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js-sys" = [ "dep:js-sys" ];
          "log" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" ];
          "stdweb" = [ "dep:stdweb" ];
          "test-in-browser" = [ "wasm-bindgen" ];
          "wasm-bindgen" = [ "bindgen" "js-sys" ];
        };
        resolvedDefaultFeatures = [ "bindgen" "js-sys" "std" "wasm-bindgen" ];
      };
      "getrandom 0.2.16" = rec {
        crateName = "getrandom";
        version = "0.2.16";
        edition = "2018";
        sha256 = "14l5aaia20cc6cc08xdlhrzmfcylmrnprwnna20lqf746pqzjprk";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ((("wasm32" == target."arch" or null) || ("wasm64" == target."arch" or null)) && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [ "wasm-bindgen" "js-sys" ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "libc/rustc-dep-of-std" "wasi/rustc-dep-of-std" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "custom" "js" "js-sys" "std" "wasm-bindgen" ];
      };
      "getrandom 0.3.3" = rec {
        crateName = "getrandom";
        version = "0.3.3";
        edition = "2021";
        sha256 = "1x6jl875zp6b2b6qp9ghc84b0l76bvng2lvm8zfcmwjl7rb5w516";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)) && (builtins.elem "atomics" targetFeatures));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("linux" == target."os" or null) || ("android" == target."os" or null)) && (!((("linux" == target."os" or null) && ("" == target."env" or null)) || ("custom" == target."getrandom_backend" or null) || ("linux_raw" == target."getrandom_backend" or null) || ("rdrand" == target."getrandom_backend" or null) || ("rndr" == target."getrandom_backend" or null))));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("dragonfly" == target."os" or null) || ("freebsd" == target."os" or null) || ("hurd" == target."os" or null) || ("illumos" == target."os" or null) || ("cygwin" == target."os" or null) || (("horizon" == target."os" or null) && ("arm" == target."arch" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("haiku" == target."os" or null) || ("redox" == target."os" or null) || ("nto" == target."os" or null) || ("aix" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("ios" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null) || ("tvos" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (("macos" == target."os" or null) || ("openbsd" == target."os" or null) || ("vita" == target."os" or null) || ("emscripten" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("netbsd" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("solaris" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("vxworks" == target."os" or null);
          }
          {
            name = "r-efi";
            packageId = "r-efi";
            usesDefaultFeatures = false;
            target = { target, features }: (("uefi" == target."os" or null) && ("efi_rng" == target."getrandom_backend" or null));
          }
          {
            name = "wasi";
            packageId = "wasi 0.14.2+wasi-0.2.4";
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null) && ("p2" == target."env" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (("wasm32" == target."arch" or null) && (("unknown" == target."os" or null) || ("none" == target."os" or null)));
          }
        ];
        features = {
          "rustc-dep-of-std" = [ "dep:compiler_builtins" "dep:core" ];
          "wasm_js" = [ "dep:wasm-bindgen" "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "std" "wasm_js" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.1";
        edition = "2018";
        sha256 = "0gvqc0ramx8szv76jhfd4dms0zyamvlg4whhiz11j34hh3dqxqh7";
        features = {
          "default" = [ "read-all" "write" ];
          "endian-reader" = [ "read" "dep:stable_deref_trait" ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [ "read" "std" "fallible-iterator" "endian-reader" ];
          "rustc-dep-of-std" = [ "dep:core" "dep:alloc" "dep:compiler_builtins" ];
          "std" = [ "fallible-iterator?/std" "stable_deref_trait?/std" ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [ "read" "read-core" ];
      };
      "governor" = rec {
        crateName = "governor";
        version = "0.6.3";
        edition = "2018";
        sha256 = "0yw66yb1rfc7np23n9af9sb8kbhv3jnhvg3an1rsydbbxr1gb9v8";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
            optional = true;
          }
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-timer";
            packageId = "futures-timer";
            optional = true;
          }
          {
            name = "no-std-compat";
            packageId = "no-std-compat";
            features = [ "alloc" ];
          }
          {
            name = "nonzero_ext";
            packageId = "nonzero_ext";
            usesDefaultFeatures = false;
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
            features = [ "require-cas" ];
          }
          {
            name = "quanta";
            packageId = "quanta";
            optional = true;
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "spinning_top";
            packageId = "spinning_top";
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
        ];
        features = {
          "dashmap" = [ "dep:dashmap" ];
          "default" = [ "std" "dashmap" "jitter" "quanta" ];
          "futures" = [ "dep:futures" ];
          "futures-timer" = [ "dep:futures-timer" ];
          "jitter" = [ "rand" ];
          "no_std" = [ "no-std-compat/compat_hash" ];
          "quanta" = [ "dep:quanta" ];
          "rand" = [ "dep:rand" ];
          "std" = [ "no-std-compat/std" "nonzero_ext/std" "futures-timer" "futures" "dep:parking_lot" ];
        };
        resolvedDefaultFeatures = [ "dashmap" "default" "futures" "futures-timer" "jitter" "quanta" "rand" "std" ];
      };
      "hashbrown 0.13.2" = rec {
        crateName = "hashbrown";
        version = "0.13.2";
        edition = "2021";
        sha256 = "03ji3n19j4b6mf2wlla81vsixcmlivglp6hgk79d1pcxfcrw38s3";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "bumpalo" = [ "dep:bumpalo" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "ahash" "default" "inline-more" ];
      };
      "hashbrown 0.14.5" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "ahash" "inline-more" "allocator-api2" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "allocator-api2?/nightly" "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [ "nightly" "core" "compiler_builtins" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "hashbrown 0.15.4" = rec {
        crateName = "hashbrown";
        version = "0.15.4";
        edition = "2021";
        sha256 = "1mg045sm1nm00cwjm7ndi80hcmmv1v3z7gnapxyhd9qxc62sqwar";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "core" = [ "dep:core" ];
          "default" = [ "default-hasher" "inline-more" "allocator-api2" "equivalent" "raw-entry" ];
          "default-hasher" = [ "dep:foldhash" ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [ "bumpalo/allocator_api" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-dep-of-std" = [ "nightly" "core" "alloc" "rustc-internal-api" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "heck" = rec {
        crateName = "heck";
        version = "0.3.3";
        edition = "2018";
        sha256 = "0b0kkr790p66lvzn9nsmfjvydrbmh9z5gb664jchwgw64vxiwqkd";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        dependencies = [
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
          }
        ];

      };
      "hermit-abi 0.1.19" = rec {
        crateName = "hermit-abi";
        version = "0.1.19";
        edition = "2018";
        sha256 = "0cxcm8093nf5fyn114w8vxbrbcyvv91d4015rdnlgfll7cs6gd32";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins/rustc-dep-of-std" "libc/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.5.2" = rec {
        crateName = "hermit-abi";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1744vaqkczpwncfy960j2hxrbjl1q01csm84jpd9dajbdr2yy3zw";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" "alloc" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "histogram" = rec {
        crateName = "histogram";
        version = "0.6.9";
        edition = "2015";
        sha256 = "0s9660nyacb5dgb5qxzgbf6lxrki1fmmgcalwm38c2r9rcn8ijqj";
        authors = [
          "Brian Martin <brayniac@gmail.com>"
        ];

      };
      "hmac 0.12.1" = rec {
        crateName = "hmac";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0pmbr069sfg76z7wsssfk5ddcqd9ncp79fyz6zcm6yn115yc6jbc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "std" = [ "digest/std" ];
        };
      };
      "hmac 0.8.1" = rec {
        crateName = "hmac";
        version = "0.8.1";
        edition = "2018";
        sha256 = "0h48wc7iysh4xd6ci4prh8bb7nszijrh9w3blaaq8a6cilk8hs0j";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
        ];
        devDependencies = [
          {
            name = "crypto-mac";
            packageId = "crypto-mac";
            features = [ "dev" ];
          }
        ];

      };
      "hmac-drbg" = rec {
        crateName = "hmac-drbg";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1cc5ddks8bg3512fzrd4n2gqr1kqkvg1l33fv9s6anyzjh9hmshp";
        libName = "hmac_drbg";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "generic-array";
            packageId = "generic-array";
          }
          {
            name = "hmac";
            packageId = "hmac 0.8.1";
          }
        ];

      };
      "http 0.2.12" = rec {
        crateName = "http";
        version = "0.2.12";
        edition = "2018";
        sha256 = "1w81s4bcbmcj9bjp7mllm8jlz6b31wzvirz8bgpzbqkpwmbvn730";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];

      };
      "http 1.3.1" = rec {
        crateName = "http";
        version = "1.3.1";
        edition = "2018";
        sha256 = "0r95i5h7dr1xadp1ac9453w0s62s27hzkam356nyx2d9mqqmva7l";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "http-body" = rec {
        crateName = "http-body";
        version = "1.0.1";
        edition = "2018";
        sha256 = "111ir5k2b9ihz5nr9cz7cwm7fnydca7dx4hc7vr16scfzghxrzhy";
        libName = "http_body";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
        ];

      };
      "http-body-util" = rec {
        crateName = "http-body-util";
        version = "0.1.3";
        edition = "2018";
        sha256 = "0jm6jv4gxsnlsi1kzdyffjrj8cfr3zninnxpw73mvkxy4qzdj8dh";
        libName = "http_body_util";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Lucio Franco <luciofranco14@gmail.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "channel" = [ "dep:tokio" ];
          "full" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "httparse" = rec {
        crateName = "httparse";
        version = "1.10.1";
        edition = "2018";
        sha256 = "11ycd554bw2dkgw0q61xsa7a4jn1wb1xbfacmf3dbwsikvkkvgvd";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "humantime" = rec {
        crateName = "humantime";
        version = "2.2.0";
        edition = "2021";
        sha256 = "17rz8jhh1mcv4b03wnknhv1shwq2v9vhkhlfg884pprsig62l4cv";

      };
      "hyper" = rec {
        crateName = "hyper";
        version = "1.6.0";
        edition = "2021";
        sha256 = "103ggny2k31z0iq2gzwk2vbx601wx6xkpjpxn40hr3p3b0b5fayc";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            features = [ "const_generics" "const_new" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "want";
            packageId = "want";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "futures-channel";
            packageId = "futures-channel";
            features = [ "sink" ];
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" "sink" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "fs" "macros" "net" "io-std" "io-util" "rt" "rt-multi-thread" "sync" "time" "test-util" ];
          }
        ];
        features = {
          "client" = [ "dep:want" "dep:pin-project-lite" "dep:smallvec" ];
          "ffi" = [ "dep:http-body-util" "futures-util?/alloc" ];
          "full" = [ "client" "http1" "http2" "server" ];
          "http1" = [ "dep:futures-channel" "dep:futures-util" "dep:httparse" "dep:itoa" ];
          "http2" = [ "dep:futures-channel" "dep:futures-util" "dep:h2" ];
          "server" = [ "dep:httpdate" "dep:pin-project-lite" "dep:smallvec" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "default" "http1" ];
      };
      "hyper-rustls" = rec {
        crateName = "hyper-rustls";
        version = "0.27.7";
        edition = "2021";
        sha256 = "0n6g8998szbzhnvcs1b7ibn745grxiqmlpg53xz206v826v3xjg3";
        libName = "hyper_rustls";
        dependencies = [
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "client-legacy" "tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.1";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "hyper-util";
            packageId = "hyper-util";
            usesDefaultFeatures = false;
            features = [ "server-auto" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "tls12" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "io-std" "macros" "net" "rt-multi-thread" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "native-tokio" "http1" "tls12" "logging" "aws-lc-rs" ];
          "fips" = [ "aws-lc-rs" "rustls/fips" ];
          "http1" = [ "hyper-util/http1" ];
          "http2" = [ "hyper-util/http2" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" "tokio-rustls/logging" "rustls/logging" ];
          "native-tokio" = [ "rustls-native-certs" ];
          "ring" = [ "rustls/ring" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "tls12" = [ "tokio-rustls/tls12" "rustls/tls12" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
          "webpki-tokio" = [ "webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "http1" "ring" "tls12" "webpki-roots" "webpki-tokio" ];
      };
      "hyper-util" = rec {
        crateName = "hyper-util";
        version = "0.1.15";
        edition = "2021";
        sha256 = "1pyi2h8idwyadljs95gpihjvkfkmcxi5vn7s882vy0kg9jyxarkz";
        libName = "hyper_util";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            optional = true;
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "hyper";
            packageId = "hyper";
          }
          {
            name = "ipnet";
            packageId = "ipnet";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            features = [ "all" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "tower-service";
            packageId = "tower-service";
            optional = true;
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper";
            features = [ "full" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "test-util" "signal" ];
          }
        ];
        features = {
          "client" = [ "hyper/client" "dep:tracing" "dep:futures-channel" "dep:tower-service" ];
          "client-legacy" = [ "client" "dep:socket2" "tokio/sync" "dep:libc" "dep:futures-util" ];
          "client-proxy" = [ "client" "dep:base64" "dep:ipnet" "dep:percent-encoding" ];
          "client-proxy-system" = [ "dep:system-configuration" "dep:windows-registry" ];
          "full" = [ "client" "client-legacy" "client-proxy" "client-proxy-system" "server" "server-auto" "server-graceful" "service" "http1" "http2" "tokio" "tracing" ];
          "http1" = [ "hyper/http1" ];
          "http2" = [ "hyper/http2" ];
          "server" = [ "hyper/server" ];
          "server-auto" = [ "server" "http1" "http2" ];
          "server-graceful" = [ "server" "tokio/sync" ];
          "service" = [ "dep:tower-service" ];
          "tokio" = [ "dep:tokio" "tokio/net" "tokio/rt" "tokio/time" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "client" "client-legacy" "client-proxy" "default" "http1" "tokio" ];
      };
      "icu_collections" = rec {
        crateName = "icu_collections";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0izfgypv1hsxlz1h8fc2aak641iyvkak16aaz5b4aqg3s3sp4010";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" ];
          "databake" = [ "dep:databake" "zerovec/databake" ];
          "serde" = [ "dep:serde" "zerovec/serde" "potential_utf/serde" "alloc" ];
        };
      };
      "icu_locale_core" = rec {
        crateName = "icu_locale_core";
        version = "2.0.0";
        edition = "2021";
        sha256 = "02phv7vwhyx6vmaqgwkh2p4kc2kciykv2px6g4h8glxfrh02gphc";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "litemap";
            packageId = "litemap";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "alloc" ];
          "serde" = [ "dep:serde" "tinystr/serde" "alloc" ];
          "zerovec" = [ "dep:zerovec" "tinystr/zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "icu_normalizer" = rec {
        crateName = "icu_normalizer";
        version = "2.0.0";
        edition = "2021";
        sha256 = "0ybrnfnxx4sf09gsrxri8p48qifn54il6n3dq2xxgx4dw7l80s23";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_normalizer_data";
            packageId = "icu_normalizer_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "dep:icu_normalizer_data" "icu_properties?/compiled_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "icu_properties" "icu_collections/databake" "zerovec/databake" "icu_properties?/datagen" "icu_provider/export" ];
          "default" = [ "compiled_data" "utf8_iter" "utf16_iter" ];
          "icu_properties" = [ "dep:icu_properties" ];
          "serde" = [ "dep:serde" "icu_collections/serde" "zerovec/serde" "icu_properties?/serde" "icu_provider/serde" ];
          "utf16_iter" = [ "dep:utf16_iter" "write16" ];
          "utf8_iter" = [ "dep:utf8_iter" ];
          "write16" = [ "dep:write16" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_normalizer_data" = rec {
        crateName = "icu_normalizer_data";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1lvjpzxndyhhjyzd1f6vi961gvzhj244nribfpdqxjdgjdl0s880";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_properties" = rec {
        crateName = "icu_properties";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0az349pjg8f18lrjbdmxcpg676a7iz2ibc09d2wfz57b3sf62v01";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_collections";
            packageId = "icu_collections";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "icu_properties_data";
            packageId = "icu_properties_data";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "icu_provider";
            packageId = "icu_provider";
            usesDefaultFeatures = false;
          }
          {
            name = "potential_utf";
            packageId = "potential_utf";
            usesDefaultFeatures = false;
            features = [ "zerovec" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            usesDefaultFeatures = false;
            features = [ "yoke" "zerofrom" ];
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" "yoke" ];
          }
        ];
        features = {
          "alloc" = [ "zerovec/alloc" "icu_collections/alloc" ];
          "compiled_data" = [ "dep:icu_properties_data" "icu_provider/baked" ];
          "datagen" = [ "serde" "dep:databake" "potential_utf/databake" "zerovec/databake" "icu_collections/databake" "icu_locale_core/databake" "zerotrie/databake" "icu_provider/export" ];
          "default" = [ "compiled_data" ];
          "serde" = [ "dep:serde" "icu_locale_core/serde" "potential_utf/serde" "zerovec/serde" "icu_collections/serde" "icu_provider/serde" "zerotrie/serde" ];
          "unicode_bidi" = [ "dep:unicode-bidi" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "icu_properties_data" = rec {
        crateName = "icu_properties_data";
        version = "2.0.1";
        edition = "2021";
        sha256 = "0cnn3fkq6k88w7p86w7hsd1254s4sl783rpz4p6hlccq74a5k119";
        authors = [
          "The ICU4X Project Developers"
        ];

      };
      "icu_provider" = rec {
        crateName = "icu_provider";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1bz5v02gxv1i06yhdhs2kbwxkw3ny9r2vvj9j288fhazgfi0vj03";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_locale_core";
            packageId = "icu_locale_core";
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "tinystr";
            packageId = "tinystr";
            usesDefaultFeatures = false;
          }
          {
            name = "writeable";
            packageId = "writeable";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
            features = [ "alloc" "derive" ];
          }
          {
            name = "zerotrie";
            packageId = "zerotrie";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "icu_locale_core/alloc" "zerovec/alloc" "zerotrie/alloc" ];
          "baked" = [ "zerotrie" ];
          "deserialize_bincode_1" = [ "serde" "dep:bincode" "std" ];
          "deserialize_json" = [ "serde" "dep:serde_json" ];
          "deserialize_postcard_1" = [ "serde" "dep:postcard" ];
          "export" = [ "serde" "dep:erased-serde" "dep:databake" "std" "sync" "dep:postcard" "zerovec/databake" ];
          "logging" = [ "dep:log" ];
          "serde" = [ "dep:serde" "yoke/serde" ];
          "std" = [ "alloc" ];
          "zerotrie" = [ "dep:zerotrie" ];
        };
        resolvedDefaultFeatures = [ "baked" "zerotrie" ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "1.0.3";
        edition = "2018";
        sha256 = "0zlajvm2k3wy0ay8plr07w22hxkkmrxkffa6ah57ac6nci984vv8";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "idna_adapter";
            packageId = "idna_adapter";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [ "const_generics" ];
          }
          {
            name = "utf8_iter";
            packageId = "utf8_iter";
          }
        ];
        features = {
          "compiled_data" = [ "idna_adapter/compiled_data" ];
          "default" = [ "std" "compiled_data" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "compiled_data" "std" ];
      };
      "idna_adapter" = rec {
        crateName = "idna_adapter";
        version = "1.2.1";
        edition = "2021";
        sha256 = "0i0339pxig6mv786nkqcxnwqa87v4m94b2653f6k3aj0jmhfkjis";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "icu_normalizer";
            packageId = "icu_normalizer";
            usesDefaultFeatures = false;
          }
          {
            name = "icu_properties";
            packageId = "icu_properties";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "compiled_data" = [ "icu_normalizer/compiled_data" "icu_properties/compiled_data" ];
        };
        resolvedDefaultFeatures = [ "compiled_data" ];
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.10.0";
        edition = "2021";
        sha256 = "0qd6g26gxzl6dbf132w48fa8rr95glly3jhbk90i29726d9xhk7y";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown 0.15.4";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "indicatif" = rec {
        crateName = "indicatif";
        version = "0.17.11";
        edition = "2021";
        sha256 = "0db2b2r79r9x8x4lysq1ci9xm13c0xg0sqn3z960yh2bk2430fqq";
        dependencies = [
          {
            name = "console";
            packageId = "console";
            usesDefaultFeatures = false;
            features = [ "ansi-parsing" ];
          }
          {
            name = "number_prefix";
            packageId = "number_prefix";
          }
          {
            name = "portable-atomic";
            packageId = "portable-atomic";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
            optional = true;
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "default" = [ "unicode-width" "console/unicode-width" ];
          "futures" = [ "dep:futures-core" ];
          "improved_unicode" = [ "unicode-segmentation" "unicode-width" "console/unicode-width" ];
          "in_memory" = [ "vt100" ];
          "rayon" = [ "dep:rayon" ];
          "tokio" = [ "dep:tokio" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
          "unicode-width" = [ "dep:unicode-width" ];
          "vt100" = [ "dep:vt100" ];
        };
        resolvedDefaultFeatures = [ "default" "unicode-width" ];
      };
      "inout" = rec {
        crateName = "inout";
        version = "0.1.4";
        edition = "2021";
        sha256 = "008xfl1jn9rxsq19phnhbimccf4p64880jmnpg59wqi07kk117w7";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];
        features = {
          "block-padding" = [ "dep:block-padding" ];
          "std" = [ "block-padding/std" ];
        };
      };
      "io-uring" = rec {
        crateName = "io-uring";
        version = "0.7.8";
        edition = "2021";
        sha256 = "04whnj5a4pml44jhsmmf4p87bpgr7swkcijx4yjcng8900pj0vmq";
        libName = "io_uring";
        authors = [
          "quininer <quininer@live.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "direct-syscall" = [ "sc" ];
          "overwrite" = [ "bindgen" ];
          "sc" = [ "dep:sc" ];
        };
      };
      "ipnet" = rec {
        crateName = "ipnet";
        version = "2.11.0";
        edition = "2018";
        sha256 = "0c5i9sfi2asai28m8xp48k5gvwkqrg5ffpi767py6mzsrswv17s6";
        authors = [
          "Kris Price <kris@krisprice.nz>"
        ];
        features = {
          "default" = [ "std" ];
          "heapless" = [ "dep:heapless" ];
          "json" = [ "serde" "schemars" ];
          "schemars" = [ "dep:schemars" ];
          "ser_as_str" = [ "heapless" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "iri-string" = rec {
        crateName = "iri-string";
        version = "0.7.8";
        edition = "2021";
        sha256 = "1cl0wfq97wq4s1p4dl0ix5cfgsc5fn7l22ljgw9ab9x1qglypifv";
        libName = "iri_string";
        authors = [
          "YOSHIOKA Takuma <nop_thread@nops.red>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "memchr" = [ "dep:memchr" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" "memchr?/std" "serde?/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "itertools 0.10.5" = rec {
        crateName = "itertools";
        version = "0.10.5";
        edition = "2018";
        sha256 = "0ww45h7nxx5kj6z2y6chlskxd1igvs4j507anr6dzg99x1h25zdh";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [ "use_alloc" "either/use_std" ];
        };
        resolvedDefaultFeatures = [ "default" "use_alloc" "use_std" ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0b4fj9kz54dr3wam0vprjwgygvycyw8r0qwg7vp19ly8b2w16psa";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [ "java-locator" "libloading" ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        libName = "jni_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.33";
        edition = "2021";
        sha256 = "12jkn3cxvfs7jsb6knmh9y2b41lwmrk3vdqywkmssx61jzq65wiq";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            target = { target, features }: (target."windows" or false);
            features = [ "std" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "13x2qcky5l22z4xgivi59xhjjx4kxir1zg7gcj0f1ijzd4yg7yhw";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "jsonrpc-core" = rec {
        crateName = "jsonrpc-core";
        version = "18.0.0";
        edition = "2018";
        sha256 = "1sv5m6bxyscdqg8cfzlsm8f3vks3972zc9w475l4h19dxxmggxql";
        libName = "jsonrpc_core";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        dependencies = [
          {
            name = "futures";
            packageId = "futures";
            optional = true;
          }
          {
            name = "futures-executor";
            packageId = "futures-executor";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];
        features = {
          "arbitrary_precision" = [ "serde_json/arbitrary_precision" ];
          "default" = [ "futures-executor" "futures" ];
          "futures" = [ "dep:futures" ];
          "futures-executor" = [ "dep:futures-executor" ];
        };
        resolvedDefaultFeatures = [ "default" "futures" "futures-executor" ];
      };
      "kaigan" = rec {
        crateName = "kaigan";
        version = "0.2.6";
        edition = "2021";
        sha256 = "16jiml3p0zy3qa00rcp5pxd2iwa7fqc85gx3bbvg0dximvjmv89b";
        authors = [
          "Metaplex Developers <dev@metaplex.com>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "anchor" = [ "dep:anchor-lang" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "keccak" = rec {
        crateName = "keccak";
        version = "0.1.5";
        edition = "2018";
        sha256 = "0m06swsyd58hvb1z17q6picdwywprf1yf1s6l491zi8r26dazhpc";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: ("aarch64" == target."arch" or null);
          }
        ];
        features = {
        };
      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.174";
        edition = "2021";
        sha256 = "0xl7pqvw7g2874dy3kjady2fjr4rhj5lxsnxkkhr5689jcr6jw8i";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "align" "rustc-std-workspace-core" ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "extra_traits" "std" ];
      };
      "libsecp256k1" = rec {
        crateName = "libsecp256k1";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wvwg7r0qgggmvvp2sf9hb7vhxkny8k3v35p3hisr8pd3yy21ln9";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "base64";
            packageId = "base64 0.12.3";
            usesDefaultFeatures = false;
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "hmac-drbg";
            packageId = "hmac-drbg";
            optional = true;
          }
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
            usesDefaultFeatures = false;
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.9.9";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "typenum";
            packageId = "typenum";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "libsecp256k1-gen-ecmult";
            packageId = "libsecp256k1-gen-ecmult";
          }
          {
            name = "libsecp256k1-gen-genmult";
            packageId = "libsecp256k1-gen-genmult";
          }
        ];
        features = {
          "default" = [ "std" "hmac" "static-context" ];
          "hmac" = [ "hmac-drbg" "sha2" "typenum" ];
          "hmac-drbg" = [ "dep:hmac-drbg" ];
          "lazy-static-context" = [ "lazy_static" "std" ];
          "lazy_static" = [ "dep:lazy_static" ];
          "sha2" = [ "dep:sha2" ];
          "std" = [ "libsecp256k1-core/std" "sha2/std" "rand/std" "serde/std" "base64/std" ];
          "typenum" = [ "dep:typenum" ];
        };
        resolvedDefaultFeatures = [ "hmac" "hmac-drbg" "sha2" "static-context" "std" "typenum" ];
      };
      "libsecp256k1-core" = rec {
        crateName = "libsecp256k1-core";
        version = "0.2.2";
        edition = "2018";
        sha256 = "104a8yr8r472v3hsxnicjmgjmbkxl9qqdwf5b7vwwa7c1iqspxnh";
        libName = "libsecp256k1_core";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "subtle/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "libsecp256k1-gen-ecmult" = rec {
        crateName = "libsecp256k1-gen-ecmult";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1hy5agkfylvdlfsxm5n07ljx1byyy1cyc1rzm23ar3ykhjsrdayc";
        libName = "libsecp256k1_gen_ecmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "libsecp256k1-gen-genmult" = rec {
        crateName = "libsecp256k1-gen-genmult";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0pag9hq2pvisin0iy67q5m0388wf0qmv7gm290famqwmjcagxav7";
        libName = "libsecp256k1_gen_genmult";
        authors = [
          "Wei Tang <hi@that.world>"
        ];
        dependencies = [
          {
            name = "libsecp256k1-core";
            packageId = "libsecp256k1-core";
          }
        ];

      };
      "litemap" = rec {
        crateName = "litemap";
        version = "0.8.0";
        edition = "2021";
        sha256 = "0mlrlskwwhirxk3wsz9psh6nxcy491n0dh8zl02qgj0jzpssw7i4";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "testing" = [ "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.13";
        edition = "2021";
        sha256 = "0rd73p4299mjwl4hhlfj9qr88v3r0kc8s1nszkfmnq2ky43nb4wn";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "atomic_usize" "default" ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.27";
        edition = "2021";
        sha256 = "150x589dqil307rv0rwj0jsgz5bjbwvl83gyl61jf873a7rjvp0k";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [ "kv_std" "value-bag/serde" "serde" ];
          "kv_std" = [ "std" "kv" "value-bag/error" ];
          "kv_sval" = [ "kv" "value-bag/sval" "sval" "sval_ref" ];
          "kv_unstable" = [ "kv" "value-bag" ];
          "kv_unstable_serde" = [ "kv_serde" "kv_unstable_std" ];
          "kv_unstable_std" = [ "kv_std" "kv_unstable" ];
          "kv_unstable_sval" = [ "kv_sval" "kv_unstable" ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "lru-slab" = rec {
        crateName = "lru-slab";
        version = "0.1.2";
        edition = "2021";
        sha256 = "0m2139k466qj3bnpk66bwivgcx3z88qkxvlzk70vd65jq373jaqi";
        libName = "lru_slab";
        authors = [
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.5";
        edition = "2021";
        sha256 = "1h2bh2jajkizz04fh047lpid5wgw2cr9igpkdhl3ibzscpd858ij";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [ "core" ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "memmap2" = rec {
        crateName = "memmap2";
        version = "0.5.10";
        edition = "2018";
        sha256 = "09xk415fxyl4a9pgby4im1v2gqlb5lixpm99dczkk30718na9yl3";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "merlin" = rec {
        crateName = "merlin";
        version = "3.0.0";
        edition = "2018";
        sha256 = "0z9rh9jlpcs0i0cijbs6pcq26gl4qwz05y7zbnv7h2gwk4kqxhsq";
        authors = [
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            usesDefaultFeatures = false;
          }
          {
            name = "keccak";
            packageId = "keccak";
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            features = [ "zeroize_derive" ];
          }
        ];
        features = {
          "debug-transcript" = [ "hex" ];
          "default" = [ "std" ];
          "hex" = [ "dep:hex" ];
          "std" = [ "rand_core/std" "byteorder/std" ];
        };
      };
      "minimal-lexical" = rec {
        crateName = "minimal-lexical";
        version = "0.2.1";
        edition = "2018";
        sha256 = "16ppc5g84aijpri4jzv14rvcnslvlpphbszc7zzp6vfkddf4qdb8";
        libName = "minimal_lexical";
        authors = [
          "Alex Huszagh <ahuszagh@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.9";
        edition = "2021";
        sha256 = "05k3pdg8bjjzayq3rf0qhpirq9k37pxnasfn4arbs17phqn6m9qz";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
          "Rich Geldreich richgel99@gmail.com"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [ "core" "alloc" "adler2/rustc-dep-of-std" ];
          "serde" = [ "dep:serde" ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [ "with-alloc" ];
      };
      "mio" = rec {
        crateName = "mio";
        version = "1.0.4";
        edition = "2021";
        sha256 = "073n3kam3nz8j8had35fd2nn7j6a33pi3y5w3kq608cari2d9gkq";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Wdk_Foundation" "Wdk_Storage_FileSystem" "Wdk_System_IO" "Win32_Foundation" "Win32_Networking_WinSock" "Win32_Storage_FileSystem" "Win32_System_IO" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
          "default" = [ "log" ];
          "log" = [ "dep:log" ];
          "os-ext" = [ "os-poll" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_Security" ];
        };
        resolvedDefaultFeatures = [ "net" "os-ext" "os-poll" ];
      };
      "nix" = rec {
        crateName = "nix";
        version = "0.30.1";
        edition = "2021";
        sha256 = "1dixahq9hk191g0c2ydc0h1ppxj0xw536y6rl63vlnp06lx3ylkl";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "event" = [ "poll" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [ "fs" "uio" ];
        };
        resolvedDefaultFeatures = [ "default" "feature" "memoffset" "net" "socket" "user" ];
      };
      "no-std-compat" = rec {
        crateName = "no-std-compat";
        version = "0.4.1";
        edition = "2018";
        sha256 = "132vrf710zsdp40yp1z3kgc2ss8pi0z4gmihsz3y7hl4dpd56f5r";
        libName = "no_std_compat";
        authors = [
          "jD91mZM2 <me@krake.one>"
        ];
        features = {
          "compat_hash" = [ "hashbrown" ];
          "compat_sync" = [ "spin" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "spin" = [ "dep:spin" ];
        };
        resolvedDefaultFeatures = [ "alloc" "std" ];
      };
      "nom" = rec {
        crateName = "nom";
        version = "7.1.3";
        edition = "2018";
        sha256 = "0jha9901wxam390jcf5pfa0qqfrgh8li787jx2ip0yk5b8y9hwyj";
        authors = [
          "contact@geoffroycouprie.com"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "minimal-lexical";
            packageId = "minimal-lexical";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" "memchr/std" "minimal-lexical/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "nonzero_ext" = rec {
        crateName = "nonzero_ext";
        version = "0.3.0";
        edition = "2015";
        sha256 = "08fghyinb07xwhbj7vwvlhg45g5cvhvld2min25njidir12rdgrq";
        authors = [
          "Andreas Fuchs <asf@boinkor.net>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num" = rec {
        crateName = "num";
        version = "0.2.1";
        edition = "2015";
        sha256 = "0dhcvhprvvx1iaaq7sxlgxw5awmj8dibni8vhizi59zyz4q60lxq";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.2.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-complex";
            packageId = "num-complex";
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-iter";
            packageId = "num-iter";
            usesDefaultFeatures = false;
          }
          {
            name = "num-rational";
            packageId = "num-rational";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-bigint/i128" "num-complex/i128" "num-integer/i128" "num-iter/i128" "num-rational/i128" "num-traits/i128" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "rand" = [ "num-bigint/rand" "num-complex/rand" ];
          "serde" = [ "num-bigint/serde" "num-complex/serde" "num-rational/serde" ];
          "std" = [ "num-bigint/std" "num-complex/std" "num-integer/std" "num-iter/std" "num-rational/std" "num-rational/bigint" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "num-bigint" "std" ];
      };
      "num-bigint 0.2.6" = rec {
        crateName = "num-bigint";
        version = "0.2.6";
        edition = "2015";
        sha256 = "015k3wixdi4w698sappvy43pf8bvkw0f88xplmdgc3zfk2cpy309";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "quickcheck_macros" = [ "dep:quickcheck_macros" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-bigint 0.4.6" = rec {
        crateName = "num-bigint";
        version = "0.4.6";
        edition = "2021";
        sha256 = "1f903zd33i6hkjpsgwhqwi2wffnvkxbn6rv4mkgcjcqi7xr4zr55";
        libName = "num_bigint";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num-complex" = rec {
        crateName = "num-complex";
        version = "0.2.4";
        edition = "2015";
        sha256 = "15dwaksw729r3v14sgzc9723s3fnfixiir8jzwx7b7kim48r9cdn";
        libName = "num_complex";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "i128" = [ "num-traits/i128" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-conv" = rec {
        crateName = "num-conv";
        version = "0.1.0";
        edition = "2021";
        sha256 = "1ndiyg82q73783jq18isi71a7mjh56wxrk52rlvyx0mi5z9ibmai";
        libName = "num_conv";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];

      };
      "num-derive" = rec {
        crateName = "num-derive";
        version = "0.4.2";
        edition = "2021";
        sha256 = "00p2am9ma8jgd2v6xpsz621wc7wbn1yqi71g15gc3h67m7qmafgd";
        procMacro = true;
        libName = "num_derive";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "num-integer" = rec {
        crateName = "num-integer";
        version = "0.1.46";
        edition = "2018";
        sha256 = "13w5g54a9184cqlbsq80rnxw4jj4s0d8wv75jsq5r2lms8gncsbr";
        libName = "num_integer";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "i128" "std" ];
      };
      "num-iter" = rec {
        crateName = "num-iter";
        version = "0.1.45";
        edition = "2018";
        sha256 = "1gzm7vc5g9qsjjl3bqk9rz1h6raxhygbrcpbfl04swlh0i506a8l";
        libName = "num_iter";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
            features = [ "i128" ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "num-rational" = rec {
        crateName = "num-rational";
        version = "0.2.4";
        edition = "2015";
        sha256 = "1vsaz96chxcgpqd5a0dq8hb3b4sj6dnlhwmpbkf4mx6vnls0202w";
        libName = "num_rational";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.2.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "num-integer";
            packageId = "num-integer";
            usesDefaultFeatures = false;
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "bigint" = [ "num-bigint" ];
          "bigint-std" = [ "bigint" "num-bigint/std" ];
          "default" = [ "bigint-std" "std" ];
          "i128" = [ "num-integer/i128" "num-traits/i128" ];
          "num-bigint" = [ "dep:num-bigint" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "num-integer/std" "num-traits/std" ];
        };
        resolvedDefaultFeatures = [ "bigint" "num-bigint" "std" ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [ "default" "i128" "std" ];
      };
      "num_cpus" = rec {
        crateName = "num_cpus";
        version = "1.17.0";
        edition = "2015";
        sha256 = "0fxjazlng4z8cgbmsvbzv411wrg7x3hyxdq8nxixgzjswyylppwi";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.5.2";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
        ];

      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.4";
        edition = "2021";
        sha256 = "0ykvfah4ddfi2dwjcksc33j34i84kb7plycxwr6dijp69kjb8wx9";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.4";
        edition = "2021";
        sha256 = "03gr5218x4rs52kx4srx3jn1c6vmx3drd506vl0axax88v47is3p";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.3.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" "parsing" ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [ "proc-macro-crate" "std" ];
      };
      "number_prefix" = rec {
        crateName = "number_prefix";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1wvh13wvlajqxkb1filsfzbrnq0vrmrw298v2j3sy82z1rm282w3";
        authors = [
          "Benjamin Sago <ogham@bsago.me>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.7";
        edition = "2018";
        sha256 = "11vv97djn9nc5n6w1gc6bd96d2qk2c8cg1kw5km9bsi3v4a8x532";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [ "read" "write" "build" "std" "compression" "wasm" ];
          "alloc" = [ "dep:alloc" ];
          "build" = [ "build_core" "write_std" "elf" ];
          "build_core" = [ "read_core" "write_core" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [ "dep:flate2" "dep:ruzstd" "std" ];
          "core" = [ "dep:core" ];
          "default" = [ "read" "compression" ];
          "doc" = [ "read_core" "write_std" "build_core" "std" "compression" "archive" "coff" "elf" "macho" "pe" "wasm" "xcoff" ];
          "pe" = [ "coff" ];
          "read" = [ "read_core" "archive" "coff" "elf" "macho" "pe" "xcoff" "unaligned" ];
          "rustc-dep-of-std" = [ "core" "compiler_builtins" "alloc" "memchr/rustc-dep-of-std" ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [ "all" "unstable" ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [ "write_std" "coff" "elf" "macho" "pe" "xcoff" ];
          "write_core" = [ "dep:crc32fast" "dep:indexmap" "dep:hashbrown" ];
          "write_std" = [ "write_core" "std" "indexmap?/std" "crc32fast?/std" ];
        };
        resolvedDefaultFeatures = [ "archive" "coff" "elf" "macho" "pe" "read_core" "unaligned" "xcoff" ];
      };
      "oid-registry" = rec {
        crateName = "oid-registry";
        version = "0.6.1";
        edition = "2018";
        sha256 = "1zwvjp3ad6gzn8g8w2hcn9a2xdap0lkzckhlnwp6rabbzdpz7vcv";
        libName = "oid_registry";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
          }
        ];
        features = {
          "crypto" = [ "kdf" "pkcs1" "pkcs7" "pkcs9" "pkcs12" "nist_algs" "x962" ];
          "default" = [ "registry" ];
        };
        resolvedDefaultFeatures = [ "crypto" "default" "kdf" "nist_algs" "pkcs1" "pkcs12" "pkcs7" "pkcs9" "registry" "x509" "x962" ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.21.3";
        edition = "2021";
        sha256 = "0b9x77lb9f1j6nqgf5aka4s2qj0nly176bpbrv6f9iakk5ff3xa2";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [ "dep:critical-section" "portable-atomic" ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "race" "std" ];
      };
      "opaque-debug" = rec {
        crateName = "opaque-debug";
        version = "0.3.1";
        edition = "2018";
        sha256 = "10b3w0kydz5jf1ydyli5nv10gdfp97xh79bgz327d273bs46b3f0";
        libName = "opaque_debug";
        authors = [
          "RustCrypto Developers"
        ];

      };
      "openssl" = rec {
        crateName = "openssl";
        version = "0.10.73";
        edition = "2021";
        sha256 = "1y7b3kanpgb92wiqhwbyqfsdr1xdjzssxqywl4cixay88r6p61c5";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "openssl-macros";
            packageId = "openssl-macros";
          }
          {
            name = "openssl-sys";
            packageId = "openssl-sys";
            rename = "ffi";
          }
        ];
        features = {
          "aws-lc" = [ "ffi/aws-lc" ];
          "bindgen" = [ "ffi/bindgen" ];
          "unstable_boringssl" = [ "ffi/unstable_boringssl" ];
          "vendored" = [ "ffi/vendored" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "openssl-macros" = rec {
        crateName = "openssl-macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "173xxvfc63rr5ybwqwylsir0vq6xsj4kxiv4hmg4c3vscdmncj59";
        procMacro = true;
        libName = "openssl_macros";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "openssl-probe" = rec {
        crateName = "openssl-probe";
        version = "0.1.6";
        edition = "2021";
        sha256 = "0bl52x55laalqb707k009h8kfawliwp992rlsvkzy49n47p2fpnh";
        libName = "openssl_probe";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "openssl-sys" = rec {
        crateName = "openssl-sys";
        version = "0.9.109";
        edition = "2021";
        links = "openssl";
        sha256 = "0wc54dshsac1xicq6b5wz01p358zcbf542f2s6vph3b38wp6w2ch";
        build = "build/main.rs";
        libName = "openssl_sys";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
          {
            name = "vcpkg";
            packageId = "vcpkg";
          }
        ];
        features = {
          "aws-lc" = [ "dep:aws-lc-sys" ];
          "bindgen" = [ "dep:bindgen" ];
          "bssl-sys" = [ "dep:bssl-sys" ];
          "openssl-src" = [ "dep:openssl-src" ];
          "unstable_boringssl" = [ "bssl-sys" ];
          "vendored" = [ "openssl-src" ];
        };
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.4";
        edition = "2021";
        sha256 = "04sab1c7304jg8k0d5b2pxbj1fvgzcf69l3n2mfpkdb96vs8pmbh";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [ "parking_lot_core/nightly" "lock_api/nightly" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.11";
        edition = "2021";
        sha256 = "19g4d6m5k4ggacinqprnn8xvdaszc3y5smsmbz1adcdmaqm8v0xw";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [ "petgraph" "thread-id" "backtrace" ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "pbkdf2" = rec {
        crateName = "pbkdf2";
        version = "0.11.0";
        edition = "2021";
        sha256 = "05q9wqjvfrs4dvw03yn3bvcs4zghz0a7ycfa53pz2k2fqhp6k843";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "mac" ];
          }
        ];
        features = {
          "default" = [ "simple" ];
          "hmac" = [ "dep:hmac" ];
          "parallel" = [ "rayon" "std" ];
          "password-hash" = [ "dep:password-hash" ];
          "rayon" = [ "dep:rayon" ];
          "sha1" = [ "dep:sha1" ];
          "sha2" = [ "dep:sha2" ];
          "simple" = [ "hmac" "password-hash" "sha2" ];
          "std" = [ "password-hash/std" ];
        };
      };
      "pem" = rec {
        crateName = "pem";
        version = "1.1.1";
        edition = "2018";
        sha256 = "1f184b7vs5kgwglfsy9adqqy7625jsq8jj1lsxah9abn78kmr0x8";
        authors = [
          "Jonathan Creekmore <jonathan@thecreekmores.org>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "percentage" = rec {
        crateName = "percentage";
        version = "0.1.0";
        edition = "2018";
        sha256 = "0dvralnva3535mxfaq3mv9nsfbxlphvpjw0b49bl1wbnha9kplig";
        authors = [
          "<maxlegend69@gmail.com>"
        ];
        dependencies = [
          {
            name = "num";
            packageId = "num";
          }
        ];

      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.16";
        edition = "2018";
        sha256 = "16wzc7z7dfkf9bmjin22f5282783f6mdksnr0nv0j5ym5f9gyg1v";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.32";
        edition = "2018";
        sha256 = "0k4h3gnzs94sjb2ix6jyksacs52cf1fanpwsmlhjnwrdnp8dppby";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "polyval" = rec {
        crateName = "polyval";
        version = "0.6.2";
        edition = "2021";
        sha256 = "09gs56vm36ls6pyxgh06gw2875z2x77r8b2km8q28fql0q6yc7wx";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
          {
            name = "universal-hash";
            packageId = "universal-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "universal-hash/std" ];
          "zeroize" = [ "dep:zeroize" ];
        };
      };
      "portable-atomic" = rec {
        crateName = "portable-atomic";
        version = "1.11.1";
        edition = "2018";
        sha256 = "10s4cx9y3jvw0idip09ar52s2kymq8rq9a668f793shn1ar6fhpq";
        libName = "portable_atomic";
        features = {
          "critical-section" = [ "dep:critical-section" ];
          "default" = [ "fallback" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "fallback" "require-cas" ];
      };
      "potential_utf" = rec {
        crateName = "potential_utf";
        version = "0.1.2";
        edition = "2021";
        sha256 = "11dm6k3krx3drbvhgjw8z508giiv0m09wzl6ghza37176w4c79z5";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "serde" = [ "dep:serde" ];
          "writeable" = [ "dep:writeable" "alloc" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "zerovec" ];
      };
      "powerfmt" = rec {
        crateName = "powerfmt";
        version = "0.2.0";
        edition = "2021";
        sha256 = "14ckj2xdpkhv3h6l5sdmb9f1d57z8hbfpdldjc2vl5givq2y77j3";
        authors = [
          "Jacob Pratt <jacob@jhpratt.dev>"
        ];
        features = {
          "default" = [ "std" "macros" ];
          "macros" = [ "dep:powerfmt-macros" ];
          "std" = [ "alloc" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.21";
        edition = "2021";
        sha256 = "1abxx6qz5qnd43br1dd9b2savpihzjza8gb4fbzdql1gxp2f7sl5";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [ "simd" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "simd" "std" ];
      };
      "proc-macro-crate 0.1.5" = rec {
        crateName = "proc-macro-crate";
        version = "0.1.5";
        edition = "2018";
        sha256 = "11cpihdk9ba68hzw95aa8zxn0i5g6kdrfd4l2cy3d5jvb72a6vhx";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml";
            packageId = "toml";
          }
        ];

      };
      "proc-macro-crate 3.3.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.3.0";
        edition = "2021";
        sha256 = "0d9xlymplfi9yv3f5g4bp0d6qh70apnihvqcjllampx4f5lmikpd";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit";
            usesDefaultFeatures = false;
            features = [ "parse" ];
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.95";
        edition = "2021";
        sha256 = "0y7pwxv6sh4fgg6s715ygk1i7g3w02c0ljgcsfm046isibkfbcq2";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" "span-locations" ];
      };
      "qstring" = rec {
        crateName = "qstring";
        version = "0.7.2";
        edition = "2018";
        sha256 = "0khhcpwifis87r5chr4jiv3w1bkswcf226c0yjx809pzbzkglr6l";
        authors = [
          "Martin Algesten <martin@algesten.se>"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
        ];

      };
      "quanta" = rec {
        crateName = "quanta";
        version = "0.12.6";
        edition = "2021";
        sha256 = "1iq6iz61rf76vmj7bvjhvsfcz6509qpbs6chr2yrf3bgfnfmmazk";
        authors = [
          "Toby Lawrence <toby@nuclearfurnace.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(("windows" == target."os" or null) || ("wasm32" == target."arch" or null)));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86" == target."arch" or null);
          }
          {
            name = "raw-cpuid";
            packageId = "raw-cpuid";
            target = { target, features }: ("x86_64" == target."arch" or null);
          }
          {
            name = "wasi";
            packageId = "wasi 0.11.1+wasi-snapshot-preview1";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("wasi" == target."os" or null));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (("wasm32" == target."arch" or null) && ("unknown" == target."os" or null));
            features = [ "Window" "Performance" ];
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: ("windows" == target."os" or null);
            features = [ "profileapi" ];
          }
        ];
        features = {
          "default" = [ "flaky_tests" ];
          "prost" = [ "prost-types" ];
          "prost-types" = [ "dep:prost-types" ];
        };
        resolvedDefaultFeatures = [ "default" "flaky_tests" ];
      };
      "quinn" = rec {
        crateName = "quinn";
        version = "0.11.8";
        edition = "2021";
        sha256 = "1j02h87nfxww5mjcw4vjcnx8b70q0yinnc8xvjv82ryskii18qk2";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
            rename = "proto";
            usesDefaultFeatures = false;
          }
          {
            name = "quinn-udp";
            packageId = "quinn-udp";
            rename = "udp";
            usesDefaultFeatures = false;
            features = [ "tracing" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" "rt" "rt-multi-thread" "time" "macros" ];
          }
        ];
        features = {
          "async-io" = [ "dep:async-io" ];
          "async-std" = [ "dep:async-std" ];
          "aws-lc-rs" = [ "proto/aws-lc-rs" ];
          "aws-lc-rs-fips" = [ "proto/aws-lc-rs-fips" ];
          "bloom" = [ "proto/bloom" ];
          "default" = [ "log" "platform-verifier" "runtime-tokio" "rustls-ring" "bloom" ];
          "futures-io" = [ "dep:futures-io" ];
          "log" = [ "tracing/log" "proto/log" "udp/log" ];
          "platform-verifier" = [ "proto/platform-verifier" ];
          "ring" = [ "proto/ring" ];
          "runtime-async-std" = [ "async-io" "async-std" ];
          "runtime-smol" = [ "async-io" "smol" ];
          "runtime-tokio" = [ "tokio/time" "tokio/rt" "tokio/net" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "aws-lc-rs" "proto/rustls-aws-lc-rs" "proto/aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "dep:rustls" "aws-lc-rs-fips" "proto/rustls-aws-lc-rs-fips" "proto/aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "ring" "proto/rustls-ring" "proto/ring" ];
          "smol" = [ "dep:smol" ];
        };
        resolvedDefaultFeatures = [ "bloom" "default" "log" "platform-verifier" "ring" "runtime-tokio" "rustls" "rustls-ring" ];
      };
      "quinn-proto" = rec {
        crateName = "quinn-proto";
        version = "0.11.12";
        edition = "2021";
        sha256 = "0bj2yyrf1mrg2bcj19ipsspvrj5sq0di0pz5maw5pj31j4x89ps9";
        libName = "quinn_proto";
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "fastbloom";
            packageId = "fastbloom";
            optional = true;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm_js" ];
          }
          {
            name = "lru-slab";
            packageId = "lru-slab";
          }
          {
            name = "rand";
            packageId = "rand 0.9.1";
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "wasm32_unknown_unknown_js" ];
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
            features = [ "web" ];
          }
          {
            name = "rustls-platform-verifier";
            packageId = "rustls-platform-verifier";
            optional = true;
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" "alloc" ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs?/aws-lc-sys" "aws-lc-rs?/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "aws-lc-rs" "aws-lc-rs?/fips" ];
          "bloom" = [ "dep:fastbloom" ];
          "default" = [ "rustls-ring" "log" "bloom" ];
          "log" = [ "tracing/log" ];
          "platform-verifier" = [ "dep:rustls-platform-verifier" ];
          "ring" = [ "dep:ring" ];
          "rustls" = [ "rustls-ring" ];
          "rustls-aws-lc-rs" = [ "dep:rustls" "rustls?/aws-lc-rs" "aws-lc-rs" ];
          "rustls-aws-lc-rs-fips" = [ "rustls-aws-lc-rs" "aws-lc-rs-fips" ];
          "rustls-log" = [ "rustls?/logging" ];
          "rustls-ring" = [ "dep:rustls" "rustls?/ring" "ring" ];
        };
        resolvedDefaultFeatures = [ "bloom" "default" "log" "platform-verifier" "ring" "rustls-ring" ];
      };
      "quinn-udp" = rec {
        crateName = "quinn-udp";
        version = "0.5.13";
        edition = "2021";
        sha256 = "0w0ri3wv5g419i5dfv4qmjxh4ayc4hp77y2gy4p3axp2kqhb3szw";
        libName = "quinn_udp";
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null)));
          }
          {
            name = "tracing";
            packageId = "tracing";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_System_IO" "Win32_Networking_WinSock" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases";
          }
        ];
        features = {
          "default" = [ "tracing" "log" ];
          "direct-log" = [ "dep:log" ];
          "log" = [ "tracing/log" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "log" "tracing" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.40";
        edition = "2018";
        sha256 = "1394cxjg6nwld82pzp2d4fp6pmaz32gai1zh9z5hvh0dawww118q";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "r-efi" = rec {
        crateName = "r-efi";
        version = "5.3.0";
        edition = "2018";
        sha256 = "03sbfm3g7myvzyylff6qaxk4z6fy76yv860yy66jiswc2m6b7kb9";
        libName = "r_efi";
        features = {
          "core" = [ "dep:core" ];
          "examples" = [ "native" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "rand 0.7.3" = rec {
        crateName = "rand";
        version = "0.7.3";
        edition = "2018";
        sha256 = "00sdaimkbz491qgi6qxkv582yivl32m2jd401kzbn94vsiwicsva";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            rename = "getrandom_package";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.2.2";
            usesDefaultFeatures = false;
            target = { target, features }: (!("emscripten" == target."os" or null));
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
          {
            name = "rand_hc";
            packageId = "rand_hc";
            target = { target, features }: ("emscripten" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "rand_hc";
            packageId = "rand_hc";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" ];
          "getrandom" = [ "getrandom_package" "rand_core/getrandom" ];
          "getrandom_package" = [ "dep:getrandom_package" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "nightly" = [ "simd_support" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_pcg" = [ "dep:rand_pcg" ];
          "simd_support" = [ "packed_simd" ];
          "small_rng" = [ "rand_pcg" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "stdweb" = [ "getrandom_package/stdweb" ];
          "wasm-bindgen" = [ "getrandom_package/wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "getrandom_package" "libc" "std" ];
      };
      "rand 0.8.5" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.3.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [ "std" "std_rng" ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" "rand_core/serde1" ];
          "simd_support" = [ "packed_simd" ];
          "std" = [ "rand_core/std" "rand_chacha/std" "alloc" "getrandom" "libc" ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "getrandom" "libc" "rand_chacha" "std" "std_rng" ];
      };
      "rand 0.9.1" = rec {
        crateName = "rand";
        version = "0.9.1";
        edition = "2021";
        sha256 = "15yxfcxbgmwba5cv7mjg9bhc1r5c9483dfcdfspg62x4jk8dkgwz";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "rand_chacha";
            packageId = "rand_chacha 0.9.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "std_rng" "os_rng" "small_rng" "thread_rng" ];
          "log" = [ "dep:log" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" "rand_core/serde" ];
          "std" = [ "rand_core/std" "rand_chacha?/std" "alloc" ];
          "std_rng" = [ "dep:rand_chacha" ];
          "thread_rng" = [ "std" "std_rng" "os_rng" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "os_rng" "small_rng" "std" "std_rng" "thread_rng" ];
      };
      "rand_chacha 0.2.2" = rec {
        crateName = "rand_chacha";
        version = "0.2.2";
        edition = "2018";
        sha256 = "00il36fkdbsmpr99p9ksmmp6dn1md7rmnwmz0rr77jbrca2yvj7l";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];
        features = {
          "default" = [ "std" "simd" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.3.1" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.6.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_chacha 0.9.0" = rec {
        crateName = "rand_chacha";
        version = "0.9.0";
        edition = "2021";
        sha256 = "1jr5ygix7r60pz0s1cv3ms1f6pd1i9pcdmnxzzhjc3zn3mgjn0nk";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
          }
        ];
        devDependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.9.3";
            features = [ "os_rng" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "os_rng" = [ "rand_core/os_rng" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "ppv-lite86/std" "rand_core/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core 0.5.1" = rec {
        crateName = "rand_core";
        version = "0.5.1";
        edition = "2018";
        sha256 = "06bdvx08v3rkz451cm7z59xwwqn1rkfh6v9ay77b14f8dwlybgch";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.6.4" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "alloc" "getrandom" "getrandom/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "getrandom" "std" ];
      };
      "rand_core 0.9.3" = rec {
        crateName = "rand_core";
        version = "0.9.3";
        edition = "2021";
        sha256 = "0f3xhf16yks5ic6kmgxcpv1ngdhp48mmfy4ag82i1wnwh8ws3ncr";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom 0.3.3";
            optional = true;
          }
        ];
        features = {
          "os_rng" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "getrandom?/std" ];
        };
        resolvedDefaultFeatures = [ "os_rng" "std" ];
      };
      "rand_hc" = rec {
        crateName = "rand_hc";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0g31sqwpmsirdlwr0svnacr4dbqyz339im4ssl9738cjgfpjjcfa";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "rand_core";
            packageId = "rand_core 0.5.1";
          }
        ];

      };
      "raw-cpuid" = rec {
        crateName = "raw-cpuid";
        version = "11.5.0";
        edition = "2018";
        crateBin = [];
        sha256 = "0ijix3jmc89k54ly82z2wqgv90kggr868ilsl5xrj9zd72w7mpy6";
        libName = "raw_cpuid";
        authors = [
          "Gerd Zellweger <mail@gerdzellweger.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        features = {
          "clap" = [ "dep:clap" ];
          "cli" = [ "display" "clap" ];
          "display" = [ "std" "termimad" "serde_json" "serialize" ];
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "serde_json" = [ "dep:serde_json" ];
          "serialize" = [ "serde" "serde_derive" ];
          "termimad" = [ "dep:termimad" ];
        };
      };
      "rayon" = rec {
        crateName = "rayon";
        version = "1.10.0";
        edition = "2021";
        sha256 = "1ylgnzwgllajalr4v00y4kj22klq2jbwllm70aha232iah0sc65l";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
          {
            name = "rayon-core";
            packageId = "rayon-core";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" "rayon-core/web_spin_lock" ];
        };
      };
      "rayon-core" = rec {
        crateName = "rayon-core";
        version = "1.12.1";
        edition = "2021";
        links = "rayon-core";
        sha256 = "1qpwim68ai5h0j7axa8ai8z0payaawv3id0lrgkqmapx7lx8fr8l";
        libName = "rayon_core";
        authors = [
          "Niko Matsakis <niko@alum.mit.edu>"
          "Josh Stone <cuviper@gmail.com>"
        ];
        dependencies = [
          {
            name = "crossbeam-deque";
            packageId = "crossbeam-deque";
          }
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
          }
        ];
        features = {
          "web_spin_lock" = [ "dep:wasm_sync" ];
        };
      };
      "redox_syscall" = rec {
        crateName = "redox_syscall";
        version = "0.5.13";
        edition = "2021";
        sha256 = "1mlzna9bcd7ss1973bmysr3hpjrys82b3bd7l03h4jkbxv8bf10d";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "userspace" ];
          "rustc-dep-of-std" = [ "core" "bitflags/rustc-dep-of-std" ];
        };
        resolvedDefaultFeatures = [ "default" "userspace" ];
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.11.1";
        edition = "2021";
        sha256 = "148i41mzbx8bmq32hsj1q4karkzzx5m60qza6gdw4pdc9qdyyi5m";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata";
            usesDefaultFeatures = false;
            features = [ "alloc" "syntax" "meta" "nfa-pikevm" ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "perf" "unicode" "regex-syntax/default" ];
          "logging" = [ "aho-corasick?/logging" "memchr?/logging" "regex-automata/logging" ];
          "perf" = [ "perf-cache" "perf-dfa" "perf-onepass" "perf-backtrack" "perf-inline" "perf-literal" ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [ "regex-automata/dfa-build" "regex-automata/dfa-search" ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [ "dep:aho-corasick" "dep:memchr" "regex-automata/perf-literal" ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [ "aho-corasick?/std" "memchr?/std" "regex-automata/std" "regex-syntax/std" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "regex-automata/unicode" "regex-syntax/unicode" ];
          "unicode-age" = [ "regex-automata/unicode-age" "regex-syntax/unicode-age" ];
          "unicode-bool" = [ "regex-automata/unicode-bool" "regex-syntax/unicode-bool" ];
          "unicode-case" = [ "regex-automata/unicode-case" "regex-syntax/unicode-case" ];
          "unicode-gencat" = [ "regex-automata/unicode-gencat" "regex-syntax/unicode-gencat" ];
          "unicode-perl" = [ "regex-automata/unicode-perl" "regex-automata/unicode-word-boundary" "regex-syntax/unicode-perl" ];
          "unicode-script" = [ "regex-automata/unicode-script" "regex-syntax/unicode-script" ];
          "unicode-segment" = [ "regex-automata/unicode-segment" "regex-syntax/unicode-segment" ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "perf" "perf-backtrack" "perf-cache" "perf-dfa" "perf-inline" "perf-literal" "perf-onepass" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.4.9";
        edition = "2021";
        sha256 = "02092l8zfh3vkmk47yjc8d631zhhcd49ck2zr133prvd3z38v7l0";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" "syntax" "perf" "unicode" "meta" "nfa" "dfa" "hybrid" ];
          "dfa" = [ "dfa-build" "dfa-search" "dfa-onepass" ];
          "dfa-build" = [ "nfa-thompson" "dfa-search" ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [ "alloc" "nfa-thompson" ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [ "logging" "std" ];
          "logging" = [ "dep:log" "aho-corasick?/logging" "memchr?/logging" ];
          "meta" = [ "syntax" "nfa-pikevm" ];
          "nfa" = [ "nfa-thompson" "nfa-pikevm" "nfa-backtrack" ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [ "perf-inline" "perf-literal" ];
          "perf-literal" = [ "perf-literal-substring" "perf-literal-multisubstring" ];
          "perf-literal-multisubstring" = [ "std" "dep:aho-corasick" ];
          "perf-literal-substring" = [ "aho-corasick?/perf-literal" "dep:memchr" ];
          "std" = [ "regex-syntax?/std" "memchr?/std" "aho-corasick?/std" "alloc" ];
          "syntax" = [ "dep:regex-syntax" "alloc" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" "regex-syntax?/unicode" ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "alloc" "dfa-onepass" "hybrid" "meta" "nfa-backtrack" "nfa-pikevm" "nfa-thompson" "perf-inline" "perf-literal" "perf-literal-multisubstring" "perf-literal-substring" "std" "syntax" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" "unicode-word-boundary" ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.8.5";
        edition = "2021";
        sha256 = "0p41p3hj9ww7blnbwbj9h7rwxzxg0c1hvrdycgys8rxyhqqw859b";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" "unicode" ];
          "unicode" = [ "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
        };
        resolvedDefaultFeatures = [ "default" "std" "unicode" "unicode-age" "unicode-bool" "unicode-case" "unicode-gencat" "unicode-perl" "unicode-script" "unicode-segment" ];
      };
      "registry" = rec {
        crateName = "registry";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/registry; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "valence-common";
            packageId = "valence-common";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "no-entrypoint" "no-idl" "no-log-ix-name" ];
      };
      "reqwest" = rec {
        crateName = "reqwest";
        version = "0.12.22";
        edition = "2021";
        sha256 = "0cbmfrcrk6wbg93apmji0fln1ca9322af2kc7dpa18vcgs9k3jfb";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "async-compression";
            packageId = "async-compression";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tokio" ];
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "http-body-util";
            packageId = "http-body-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hyper";
            packageId = "hyper";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" ];
          }
          {
            name = "hyper-rustls";
            packageId = "hyper-rustls";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "tls12" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "client" "client-legacy" "client-proxy" "tokio" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "quinn";
            packageId = "quinn";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rustls" "runtime-tokio" ];
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "tls12" ];
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde_urlencoded";
            packageId = "serde_urlencoded";
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            features = [ "futures" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "net" "time" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.26.2";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "tls12" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "codec" "io" ];
          }
          {
            name = "tower";
            packageId = "tower";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "timeout" "util" ];
          }
          {
            name = "tower-http";
            packageId = "tower-http";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "follow-redirect" ];
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "AbortController" "AbortSignal" "Headers" "Request" "RequestInit" "RequestMode" "Response" "Window" "FormData" "Blob" "BlobPropertyBag" "ServiceWorkerGlobalScope" "RequestCredentials" "File" "ReadableStream" ];
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 1.0.1";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "std" "alloc" ];
          }
          {
            name = "hyper";
            packageId = "hyper";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "server" ];
          }
          {
            name = "hyper-util";
            packageId = "hyper-util";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "http1" "http2" "client" "client-legacy" "server-auto" "server-graceful" "tokio" ];
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "derive" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "macros" "rt-multi-thread" ];
          }
          {
            name = "tower";
            packageId = "tower";
            usesDefaultFeatures = false;
            features = [ "limit" ];
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "serde-serialize" ];
          }
        ];
        features = {
          "__rustls" = [ "dep:hyper-rustls" "dep:tokio-rustls" "dep:rustls" "__tls" ];
          "__rustls-ring" = [ "hyper-rustls?/ring" "tokio-rustls?/ring" "rustls?/ring" "quinn?/ring" ];
          "__tls" = [ "dep:rustls-pki-types" "tokio/io-util" ];
          "blocking" = [ "dep:futures-channel" "futures-channel?/sink" "dep:futures-util" "futures-util?/io" "futures-util?/sink" "tokio/sync" ];
          "brotli" = [ "dep:async-compression" "async-compression?/brotli" "dep:futures-util" "dep:tokio-util" ];
          "charset" = [ "dep:encoding_rs" "dep:mime" ];
          "cookies" = [ "dep:cookie_crate" "dep:cookie_store" ];
          "default" = [ "default-tls" "charset" "http2" "system-proxy" ];
          "default-tls" = [ "dep:hyper-tls" "dep:native-tls-crate" "__tls" "dep:tokio-native-tls" ];
          "deflate" = [ "dep:async-compression" "async-compression?/zlib" "dep:futures-util" "dep:tokio-util" ];
          "gzip" = [ "dep:async-compression" "async-compression?/gzip" "dep:futures-util" "dep:tokio-util" ];
          "h2" = [ "dep:h2" ];
          "hickory-dns" = [ "dep:hickory-resolver" "dep:once_cell" ];
          "http2" = [ "h2" "hyper/http2" "hyper-util/http2" "hyper-rustls?/http2" ];
          "http3" = [ "rustls-tls-manual-roots" "dep:h3" "dep:h3-quinn" "dep:quinn" "tokio/macros" ];
          "json" = [ "dep:serde_json" ];
          "macos-system-configuration" = [ "system-proxy" ];
          "multipart" = [ "dep:mime_guess" "dep:futures-util" ];
          "native-tls" = [ "default-tls" ];
          "native-tls-alpn" = [ "native-tls" "native-tls-crate?/alpn" "hyper-tls?/alpn" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate?/vendored" ];
          "rustls-tls" = [ "rustls-tls-webpki-roots" ];
          "rustls-tls-manual-roots" = [ "rustls-tls-manual-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-manual-roots-no-provider" = [ "__rustls" ];
          "rustls-tls-native-roots" = [ "rustls-tls-native-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-native-roots-no-provider" = [ "dep:rustls-native-certs" "hyper-rustls?/native-tokio" "__rustls" ];
          "rustls-tls-no-provider" = [ "rustls-tls-manual-roots-no-provider" ];
          "rustls-tls-webpki-roots" = [ "rustls-tls-webpki-roots-no-provider" "__rustls-ring" ];
          "rustls-tls-webpki-roots-no-provider" = [ "dep:webpki-roots" "hyper-rustls?/webpki-tokio" "__rustls" ];
          "stream" = [ "tokio/fs" "dep:futures-util" "dep:tokio-util" "dep:wasm-streams" ];
          "system-proxy" = [ "hyper-util/client-proxy-system" ];
          "zstd" = [ "dep:async-compression" "async-compression?/zstd" "dep:futures-util" "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "__rustls" "__rustls-ring" "__tls" "blocking" "brotli" "deflate" "gzip" "json" "rustls-tls" "rustls-tls-webpki-roots" "rustls-tls-webpki-roots-no-provider" ];
      };
      "reqwest-middleware" = rec {
        crateName = "reqwest-middleware";
        version = "0.4.2";
        edition = "2018";
        sha256 = "0kld10iq9jf8nhsjb8mqlkzkplbl0z9vq97y6cbzxb76lql7vwap";
        libName = "reqwest_middleware";
        authors = [
          "Rodrigo Gryzinski <rodrigo.gryzinski@truelayer.com>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "reqwest";
            packageId = "reqwest";
            features = [ "rustls-tls" ];
          }
        ];
        features = {
          "charset" = [ "reqwest/charset" ];
          "http2" = [ "reqwest/http2" ];
          "json" = [ "reqwest/json" ];
          "multipart" = [ "reqwest/multipart" ];
          "rustls-tls" = [ "reqwest/rustls-tls" ];
        };
      };
      "ring" = rec {
        crateName = "ring";
        version = "0.17.14";
        edition = "2021";
        links = "ring_core_0_17_14_";
        sha256 = "1dw32gv19ccq4hsx3ribhpdzri1vnrlcfqb2vj41xn4l49n9ws54";
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("apple" == target."vendor" or null) && (("ios" == target."os" or null) || ("macos" == target."os" or null) || ("tvos" == target."os" or null) || ("visionos" == target."os" or null) || ("watchos" == target."os" or null)));
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) || (("arm" == target."arch" or null) && ("little" == target."endian" or null))) && (("android" == target."os" or null) || ("linux" == target."os" or null)));
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: ((("aarch64" == target."arch" or null) && ("little" == target."endian" or null)) && ("windows" == target."os" or null));
            features = [ "Win32_Foundation" "Win32_System_Threading" ];
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) || (target."windows" or false) || ("wasi" == target."os" or null));
          }
        ];
        features = {
          "default" = [ "alloc" "dev_urandom_fallback" ];
          "std" = [ "alloc" ];
          "wasm32_unknown_unknown_js" = [ "getrandom/js" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "dev_urandom_fallback" "wasm32_unknown_unknown_js" ];
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.25";
        edition = "2015";
        sha256 = "0kxq6m0drr40434ch32j31dkg00iaf4zxmqg7sqxajhcz0wng7lq";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [ "core" ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "2.1.1";
        edition = "2021";
        sha256 = "03gz5lvd9ghcwsal022cgkq67dmimcgdjghfb5yb5d352ga06xrm";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rand" = [ "dep:rand" "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "rustc_version" = rec {
        crateName = "rustc_version";
        version = "0.4.1";
        edition = "2018";
        sha256 = "14lvdsmr5si5qbqzrajgb6vfn69k0sfygrvfvr2mps26xwi3mjyg";
        dependencies = [
          {
            name = "semver";
            packageId = "semver";
          }
        ];

      };
      "rusticata-macros" = rec {
        crateName = "rusticata-macros";
        version = "4.1.0";
        edition = "2018";
        sha256 = "0ch67lljmgl5pfrlb90bl5kkp2x6yby1qaxnpnd0p5g9xjkc9w7s";
        libName = "rusticata_macros";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "nom";
            packageId = "nom";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "rustls 0.21.12" = rec {
        crateName = "rustls";
        version = "0.21.12";
        edition = "2021";
        sha256 = "0gjdg2a9r81sdwkyw3n5yfbkrr6p9gyk3xr2kcsr3cs83x6s2miz";
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.101.7";
            rename = "webpki";
            features = [ "alloc" "std" ];
          }
          {
            name = "sct";
            packageId = "sct";
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "default" = [ "logging" "tls12" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "read_buf" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
        };
        resolvedDefaultFeatures = [ "default" "log" "logging" "tls12" ];
      };
      "rustls 0.23.29" = rec {
        crateName = "rustls";
        version = "0.23.29";
        edition = "2021";
        sha256 = "1lcvzvzqk8xx8jzg0x5v3mkqgwkwr7v6zdq8zw8rp6xj74h3i494";
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "alloc" "race" ];
          }
          {
            name = "ring";
            packageId = "ring";
            optional = true;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "alloc" ];
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.4";
            rename = "webpki";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
          {
            name = "zeroize";
            packageId = "zeroize";
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "dep:aws-lc-rs" "webpki/aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "brotli" = [ "dep:brotli" "dep:brotli-decompressor" "std" ];
          "default" = [ "aws_lc_rs" "logging" "prefer-post-quantum" "std" "tls12" ];
          "fips" = [ "aws_lc_rs" "aws-lc-rs?/fips" "webpki/aws-lc-rs-fips" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "log" = [ "dep:log" ];
          "logging" = [ "log" ];
          "prefer-post-quantum" = [ "aws_lc_rs" ];
          "read_buf" = [ "rustversion" "std" ];
          "ring" = [ "dep:ring" "webpki/ring" ];
          "rustversion" = [ "dep:rustversion" ];
          "std" = [ "webpki/std" "pki-types/std" "once_cell/std" ];
          "zlib" = [ "dep:zlib-rs" ];
        };
        resolvedDefaultFeatures = [ "ring" "std" "tls12" ];
      };
      "rustls-native-certs" = rec {
        crateName = "rustls-native-certs";
        version = "0.8.1";
        edition = "2021";
        sha256 = "1ls7laa3748mkn23fmi3g4mlwk131lx6chq2lyc8v2mmabfz5kvz";
        libName = "rustls_native_certs";
        dependencies = [
          {
            name = "openssl-probe";
            packageId = "openssl-probe";
            target = { target, features }: ((target."unix" or false) && (!("macos" == target."os" or null)));
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            features = [ "std" ];
          }
          {
            name = "schannel";
            packageId = "schannel";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: ("macos" == target."os" or null);
          }
        ];

      };
      "rustls-pki-types" = rec {
        crateName = "rustls-pki-types";
        version = "1.12.0";
        edition = "2021";
        sha256 = "0yawbdpix8jif6s8zj1p2hbyb7y3bj66fhx0y7hyf4qh4964m6i2";
        libName = "rustls_pki_types";
        dependencies = [
          {
            name = "web-time";
            packageId = "web-time";
            optional = true;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "dep:zeroize" ];
          "default" = [ "alloc" ];
          "std" = [ "alloc" ];
          "web" = [ "web-time" ];
          "web-time" = [ "dep:web-time" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" "web" "web-time" ];
      };
      "rustls-platform-verifier" = rec {
        crateName = "rustls-platform-verifier";
        version = "0.5.3";
        edition = "2021";
        sha256 = "1hdc6h6p89x7bz3jsxj9xj7wv1swg4qqpp238i0cb3j0fvd7qy0r";
        libName = "rustls_platform_verifier";type = [ "cdylib" "rlib" ];
        authors = [
          "ComplexSpaces <complexspacescode@gmail.com>"
          "1Password"
        ];
        dependencies = [
          {
            name = "core-foundation";
            packageId = "core-foundation";
            target = { target, features }: (("apple" == target."vendor" or null));
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            target = { target, features }: (("apple" == target."vendor" or null));
          }
          {
            name = "jni";
            packageId = "jni";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "jni";
            packageId = "jni";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustls-native-certs";
            packageId = "rustls-native-certs";
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("apple" == target."vendor" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-platform-verifier-android";
            packageId = "rustls-platform-verifier-android";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.4";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!("android" == target."os" or null)) && (!("apple" == target."vendor" or null)) && (!("wasm32" == target."arch" or null)));
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.4";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.103.4";
            rename = "webpki";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "security-framework";
            packageId = "security-framework";
            target = { target, features }: (("apple" == target."vendor" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            target = { target, features }: (("apple" == target."vendor" or null));
            features = [ "OSX_10_14" ];
          }
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 0.26.11";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" ];
          }
        ];
        devDependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "ring" ];
          }
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 0.26.11";
            target = { target, features }: ("freebsd" == target."os" or null);
          }
        ];
        features = {
          "android_logger" = [ "dep:android_logger" ];
          "base64" = [ "dep:base64" ];
          "cert-logging" = [ "base64" ];
          "docsrs" = [ "jni" ];
          "ffi-testing" = [ "android_logger" "rustls/ring" ];
          "jni" = [ "dep:jni" ];
        };
      };
      "rustls-platform-verifier-android" = rec {
        crateName = "rustls-platform-verifier-android";
        version = "0.1.1";
        edition = "2021";
        sha256 = "13vq6sxsgz9547xm2zbdxiw8x7ad1g8n8ax6xvxsjqszk7q6awgq";
        libName = "rustls_platform_verifier_android";

      };
      "rustls-webpki 0.101.7" = rec {
        crateName = "rustls-webpki";
        version = "0.101.7";
        edition = "2021";
        sha256 = "0rapfhpkqp75552i8r0y7f4vq7csb4k7gjjans0df73sxv8paqlb";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = [ "ring/alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "rustls-webpki 0.103.4" = rec {
        crateName = "rustls-webpki";
        version = "0.103.4";
        edition = "2021";
        sha256 = "1z4jmmgasjgk9glb160a66bshvgifa64mgfjrkqp7dy1w158h5qa";
        libName = "webpki";
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];
        features = {
          "alloc" = [ "ring?/alloc" "pki-types/alloc" ];
          "aws-lc-rs" = [ "dep:aws-lc-rs" "aws-lc-rs/aws-lc-sys" "aws-lc-rs/prebuilt-nasm" ];
          "aws-lc-rs-fips" = [ "dep:aws-lc-rs" "aws-lc-rs/fips" ];
          "aws-lc-rs-unstable" = [ "aws-lc-rs" "aws-lc-rs/unstable" ];
          "default" = [ "std" ];
          "ring" = [ "dep:ring" ];
          "std" = [ "alloc" "pki-types/std" ];
        };
        resolvedDefaultFeatures = [ "alloc" "ring" "std" ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.21";
        edition = "2018";
        sha256 = "07bb1xx05hhwpnl43sqrhsmxyk5sd5m5baadp19nxp69s9xij3ca";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.20";
        edition = "2018";
        sha256 = "07s855l8sb333h6bpn24pka5sp7hjk2w667xy6a0khkf6sqv5lr8";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "safe_arch" = rec {
        crateName = "safe_arch";
        version = "0.7.4";
        edition = "2018";
        sha256 = "08sk47n1kcm5w2di6bpgi2hsw8r2caz2230pwqvbdqfv5pl2vc4n";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
        };
        resolvedDefaultFeatures = [ "bytemuck" "default" ];
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "schannel" = rec {
        crateName = "schannel";
        version = "0.1.27";
        edition = "2018";
        sha256 = "0gbbhy28v72kd5iina0z2vcdl3vz63mk5idvkzn5r52z6jmfna8z";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Steffen Butzer <steffen.butzer@outlook.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_Foundation" "Win32_Security_Cryptography" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_SystemInformation" ];
          }
        ];
        devDependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            features = [ "Win32_System_SystemInformation" "Win32_System_Time" ];
          }
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "sct" = rec {
        crateName = "sct";
        version = "0.7.1";
        edition = "2021";
        sha256 = "056lmi2xkzdg1dbai6ha3n57s18cbip4pnmpdhyljli3m99n216s";
        authors = [
          "Joseph Birr-Pixton <jpixton@gmail.com>"
        ];
        dependencies = [
          {
            name = "ring";
            packageId = "ring";
          }
          {
            name = "untrusted";
            packageId = "untrusted";
          }
        ];

      };
      "security-framework" = rec {
        crateName = "security-framework";
        version = "3.2.0";
        edition = "2021";
        sha256 = "05mkrddi9i18h9p098d0iimqv1xxz0wd8mbgpbvh9jj67x0205r7";
        libName = "security_framework";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation";
          }
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "security-framework-sys";
            packageId = "security-framework-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "OSX_10_12" = [ "security-framework-sys/OSX_10_12" ];
          "OSX_10_13" = [ "OSX_10_12" "security-framework-sys/OSX_10_13" "alpn" "session-tickets" ];
          "OSX_10_14" = [ "OSX_10_13" "security-framework-sys/OSX_10_14" ];
          "OSX_10_15" = [ "OSX_10_14" "security-framework-sys/OSX_10_15" ];
          "default" = [ "OSX_10_12" ];
          "log" = [ "dep:log" ];
          "sync-keychain" = [ "OSX_10_13" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_12" "OSX_10_13" "OSX_10_14" "alpn" "default" "session-tickets" ];
      };
      "security-framework-sys" = rec {
        crateName = "security-framework-sys";
        version = "2.14.0";
        edition = "2021";
        sha256 = "0chwn01qrnvs59i5220bymd38iddy4krbnmfnhf4k451aqfj7ns9";
        libName = "security_framework_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
          "Kornel <kornel@geekhood.net>"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "OSX_10_10" = [ "OSX_10_9" ];
          "OSX_10_11" = [ "OSX_10_10" ];
          "OSX_10_12" = [ "OSX_10_11" ];
          "OSX_10_13" = [ "OSX_10_12" ];
          "OSX_10_14" = [ "OSX_10_13" ];
          "OSX_10_15" = [ "OSX_10_14" ];
          "default" = [ "OSX_10_12" ];
        };
        resolvedDefaultFeatures = [ "OSX_10_10" "OSX_10_11" "OSX_10_12" "OSX_10_13" "OSX_10_14" "OSX_10_9" "default" ];
      };
      "semver" = rec {
        crateName = "semver";
        version = "1.0.26";
        edition = "2018";
        sha256 = "1l5q2vb8fjkby657kdyfpvv40x2i2xqq9bg57pxqakfj92fgmrjn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.219";
        edition = "2018";
        sha256 = "1dl6nyxnsi82a197sd752128a4avm6mxnscywas1jq30srp2q3jz";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "derive" "serde_derive" "std" ];
      };
      "serde-big-array" = rec {
        crateName = "serde-big-array";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0zsb9s9rcca3408kg20c6xpx917c9vbbnap5gvrf0wvdqz17rz0i";
        libName = "serde_big_array";
        authors = [
          "est31 <MTest31@outlook.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];

      };
      "serde_bytes" = rec {
        crateName = "serde_bytes";
        version = "0.11.17";
        edition = "2018";
        sha256 = "15kds0mw19lvm8ydd1qbharh5rz96zir06yn2silqbfy3cigsdw4";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "std" = [ "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.219";
        edition = "2015";
        sha256 = "001azhjmj7ya52pmfiw4ppxm16nd44y15j2pf5gkcwrcgz7pc0jv";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "clone-impls" "derive" "parsing" "printing" "proc-macro" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.140";
        edition = "2021";
        sha256 = "0wwkp4vc20r87081ihj3vpyz5qf7wqkqipq17v99nv6wjrp8n1i0";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" "std" ];
          "std" = [ "memchr/std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "serde_urlencoded" = rec {
        crateName = "serde_urlencoded";
        version = "0.7.1";
        edition = "2018";
        sha256 = "1zgklbdaysj3230xivihs30qi5vkhigg323a9m62k8jwf4a1qjfk";
        authors = [
          "Anthony Ramine <n.oxyde@gmail.com>"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "serde_with" = rec {
        crateName = "serde_with";
        version = "3.14.0";
        edition = "2021";
        sha256 = "1manlm83865xwlvgv8frc472x19b75pd89a54mpxpagg3zb5ri7j";
        authors = [
          "Jonas Bushart"
          "Marcin Kaźmierczak"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_with_macros";
            packageId = "serde_with_macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" "base64?/alloc" "chrono_0_4?/alloc" "hex?/alloc" "serde_json?/alloc" "time_0_3?/alloc" ];
          "base64" = [ "dep:base64" "alloc" ];
          "chrono" = [ "chrono_0_4" ];
          "chrono_0_4" = [ "dep:chrono_0_4" ];
          "default" = [ "std" "macros" ];
          "guide" = [ "dep:document-features" "macros" "std" ];
          "hashbrown_0_14" = [ "dep:hashbrown_0_14" "alloc" ];
          "hashbrown_0_15" = [ "dep:hashbrown_0_15" "alloc" ];
          "hex" = [ "dep:hex" "alloc" ];
          "indexmap" = [ "indexmap_1" ];
          "indexmap_1" = [ "dep:indexmap_1" "alloc" ];
          "indexmap_2" = [ "dep:indexmap_2" "alloc" ];
          "json" = [ "dep:serde_json" "alloc" ];
          "macros" = [ "dep:serde_with_macros" ];
          "schemars_0_8" = [ "dep:schemars_0_8" "std" "serde_with_macros?/schemars_0_8" ];
          "schemars_0_9" = [ "dep:schemars_0_9" "alloc" "serde_with_macros?/schemars_0_9" "dep:serde_json" ];
          "schemars_1" = [ "dep:schemars_1" "alloc" "serde_with_macros?/schemars_1" "dep:serde_json" ];
          "std" = [ "alloc" "serde/std" "chrono_0_4?/clock" "chrono_0_4?/std" "indexmap_1?/std" "indexmap_2?/std" "time_0_3?/serde-well-known" "time_0_3?/std" "schemars_0_9?/std" "schemars_1?/std" ];
          "time_0_3" = [ "dep:time_0_3" ];
        };
        resolvedDefaultFeatures = [ "macros" ];
      };
      "serde_with_macros" = rec {
        crateName = "serde_with_macros";
        version = "3.14.0";
        edition = "2021";
        sha256 = "03xk9ghj2s6n331r565mgh22w0749vnq50094nd0vkk5cmg9946y";
        procMacro = true;
        authors = [
          "Jonas Bushart"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" "full" "parsing" ];
          }
        ];
        features = {
        };
      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86" == target."arch" or null) || ("x86_64" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.10.9" = rec {
        crateName = "sha2";
        version = "0.10.9";
        edition = "2018";
        sha256 = "10xjj843v31ghsksd9sl9y12qfc48157j1xpb8v1ml39jy0psl57";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "sha2 0.9.9" = rec {
        crateName = "sha2";
        version = "0.9.9";
        edition = "2018";
        sha256 = "006q2f0ar26xcjxqz8zsncfgz86zqa5dkwlwv03rhx1rpzhs2n2d";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer 0.9.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target = { target, features }: (("aarch64" == target."arch" or null) || ("x86_64" == target."arch" or null) || ("x86" == target."arch" or null));
          }
          {
            name = "digest";
            packageId = "digest 0.9.0";
          }
          {
            name = "opaque-debug";
            packageId = "opaque-debug";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.9.0";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "sha3" = rec {
        crateName = "sha3";
        version = "0.10.8";
        edition = "2018";
        sha256 = "0q5s3qlwnk8d5j34jya98j1v2p3009wdmnqdza3yydwgi8kjv1vm";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "keccak";
            packageId = "keccak";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest 0.10.7";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "keccak/asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "shard" = rec {
        crateName = "shard";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/shard; };type = [ "cdylib" "lib" ];
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "registry";
            packageId = "registry";
            features = [ "cpi" ];
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "valence-common";
            packageId = "valence-common";
          }
        ];
        features = {
          "cpi" = [ "no-entrypoint" ];
        };
        resolvedDefaultFeatures = [ "cpi" "default" "no-entrypoint" "no-idl" "no-log-ix-name" ];
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "signal-hook" = rec {
        crateName = "signal-hook";
        version = "0.3.18";
        edition = "2018";
        sha256 = "1qnnbq4g2vixfmlv28i1whkr0hikrf1bsc4xjy2aasj2yina30fq";
        libName = "signal_hook";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Thomas Himmelstoss <thimm@posteo.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
          }
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "channel" "iterator" ];
          "extended-siginfo" = [ "channel" "iterator" "extended-siginfo-raw" ];
          "extended-siginfo-raw" = [ "cc" ];
          "iterator" = [ "channel" ];
        };
        resolvedDefaultFeatures = [ "channel" "default" "iterator" ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.5";
        edition = "2015";
        sha256 = "042lkqrpnlrgvrrcirgigxyp1zk70d8v0fsr5w7a18k3bw2vh0wj";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "signature" = rec {
        crateName = "signature";
        version = "1.6.4";
        edition = "2021";
        sha256 = "0z3xg405pg827g6hfdprnszsdqkkbrsfx7f1dl04nv9g7cxks8vl";
        authors = [
          "RustCrypto Developers"
        ];
        features = {
          "default" = [ "std" ];
          "derive-preview" = [ "digest-preview" "signature_derive" ];
          "digest" = [ "dep:digest" ];
          "digest-preview" = [ "digest" ];
          "rand-preview" = [ "rand_core" ];
          "rand_core" = [ "dep:rand_core" ];
          "signature_derive" = [ "dep:signature_derive" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "siphasher 0.3.11" = rec {
        crateName = "siphasher";
        version = "0.3.11";
        edition = "2018";
        sha256 = "03axamhmwsrmh0psdw3gf7c0zc4fyl5yjxfifz9qfka6yhkqid9q";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "siphasher 1.0.1" = rec {
        crateName = "siphasher";
        version = "1.0.1";
        edition = "2018";
        sha256 = "17f35782ma3fn6sh21c027kjmd227xyrx06ffi8gw4xzv9yry6an";
        authors = [
          "Frank Denis <github@pureftpd.org>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_json" = [ "dep:serde_json" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [ "std" "serde/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.10";
        edition = "2018";
        sha256 = "03f5a9gdp33mngya4qwq2555138pj74pl015scv57wsic5rikp04";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.15.1";
        edition = "2018";
        sha256 = "00xxdxxpgyq5vjnpljvkmy99xij5rxgh913ii1v16kzynnivgcb7";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bincode" = [ "dep:bincode" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "impl_bincode" = [ "bincode" "unty" ];
          "malloc_size_of" = [ "dep:malloc_size_of" ];
          "serde" = [ "dep:serde" ];
          "unty" = [ "dep:unty" ];
        };
        resolvedDefaultFeatures = [ "const_generics" "const_new" ];
      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.5.10";
        edition = "2021";
        sha256 = "0y067ki5q946w91xlz2sb175pnfazizva6fi3kfp639mxnmpc8z2";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Networking_WinSock" "Win32_System_IO" "Win32_System_Threading" "Win32_System_WindowsProgramming" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "solana-account" = rec {
        crateName = "solana-account";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0n0215xhlpgqs39aiy00l7sv3q4qr30vy8s0hj6agbmfxpj9z50g";
        libName = "solana_account";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-sysvar" "solana-instruction/serde" "serde" ];
          "dev-context-only-utils" = [ "bincode" "dep:qualifier_attr" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-pubkey/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-account-decoder" = rec {
        crateName = "solana-account-decoder";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0a75w0yfcrn2ybn9gpqx1m810m83milmxs17inan5z12wgrjn8bc";
        libName = "solana_account_decoder";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "Inflector";
            packageId = "Inflector";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
          }
          {
            name = "bv";
            packageId = "bv";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
            features = [ "zstd" ];
          }
          {
            name = "solana-address-lookup-table-interface";
            packageId = "solana-address-lookup-table-interface";
            features = [ "bincode" "bytemuck" ];
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-config-program-client";
            packageId = "solana-config-program-client";
            features = [ "serde" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-loader-v3-interface";
            packageId = "solana-loader-v3-interface";
            features = [ "serde" ];
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
            features = [ "serde" ];
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-program-pack";
            packageId = "solana-program-pack";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
          }
          {
            name = "solana-slot-history";
            packageId = "solana-slot-history";
          }
          {
            name = "solana-stake-interface";
            packageId = "solana-stake-interface";
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
          }
          {
            name = "solana-vote-interface";
            packageId = "solana-vote-interface";
            features = [ "bincode" ];
          }
          {
            name = "spl-generic-token";
            packageId = "spl-generic-token";
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-2022";
            packageId = "spl-token-2022";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-group-interface";
            packageId = "spl-token-group-interface";
          }
          {
            name = "spl-token-metadata-interface";
            packageId = "spl-token-metadata-interface";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "zstd";
            packageId = "zstd";
          }
        ];
        devDependencies = [
          {
            name = "solana-account";
            packageId = "solana-account";
            features = [ "bincode" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];

      };
      "solana-account-decoder-client-types" = rec {
        crateName = "solana-account-decoder-client-types";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1li7mmq8irnmhvawbj2xhgjan1f7f6r0z014s468ak29jrxgg4hp";
        libName = "solana_account_decoder_client_types";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "zstd";
            packageId = "zstd";
            optional = true;
          }
        ];
        features = {
          "zstd" = [ "dep:zstd" ];
        };
        resolvedDefaultFeatures = [ "zstd" ];
      };
      "solana-account-info" = rec {
        crateName = "solana-account-info";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1nl7743bhq3369r6rswqjdfvb6qz5mnglvpw00ir3wcf50m1bxf8";
        libName = "solana_account_info";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" ];
      };
      "solana-address-lookup-table-interface" = rec {
        crateName = "solana-address-lookup-table-interface";
        version = "2.2.2";
        edition = "2021";
        sha256 = "15dkwsk636ck14lr5r8wd4knbcp59ccycffbcm5bcw78xxkkyryi";
        libName = "solana_address_lookup_table_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "curve25519" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-instruction" "serde" "solana-instruction/bincode" ];
          "bytemuck" = [ "dep:bytemuck" "solana-pubkey/bytemuck" ];
          "dev-context-only-utils" = [ "bincode" "bytemuck" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "bytemuck" "serde" ];
      };
      "solana-atomic-u64" = rec {
        crateName = "solana-atomic-u64";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1hkvd5k4gx36rrf8bv5ycq35a5qwl12p97ib0mdlcq7y1rr54bnm";
        libName = "solana_atomic_u64";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: (!("64" == target."pointer_width" or null));
          }
        ];

      };
      "solana-big-mod-exp" = rec {
        crateName = "solana-big-mod-exp";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0rvm3q453cnc4y6zqqdshf445qm9rmdx2rch2gyjrrn3p8mpznvm";
        libName = "solana_big_mod_exp";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-bincode" = rec {
        crateName = "solana-bincode";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1p1s015dsrb69csirqgri9d9wawqf25hx030scyzxjgriixpi8qr";
        libName = "solana_bincode";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];

      };
      "solana-blake3-hasher" = rec {
        crateName = "solana-blake3-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0wj6189cmz0bchnlrz0f57yhzginl210ij2g94a1mcx14lg81851";
        libName = "solana_blake3_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "blake3";
            packageId = "blake3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "blake3";
            packageId = "blake3";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "blake3" = [ "dep:blake3" ];
          "borsh" = [ "dep:borsh" "std" ];
          "dev-context-only-utils" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "std" = [ "solana-hash/std" ];
        };
        resolvedDefaultFeatures = [ "blake3" ];
      };
      "solana-bn254" = rec {
        crateName = "solana-bn254";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0hz2g66wvnpzm5zs0av45m5k2y3vgsi9dkzs6qzq6cl724jz2824";
        libName = "solana_bn254";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ark-bn254";
            packageId = "ark-bn254";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "ark-ec";
            packageId = "ark-ec";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "ark-ff";
            packageId = "ark-ff";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "ark-serialize";
            packageId = "ark-serialize";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-borsh" = rec {
        crateName = "solana-borsh";
        version = "2.2.1";
        edition = "2021";
        sha256 = "016hfczc3js9iyhx7ci296a4gc3zippnp9jscpbax9x1s2y370vi";
        libName = "solana_borsh";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            features = [ "derive" "unstable__schema" ];
          }
        ];

      };
      "solana-client" = rec {
        crateName = "solana-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1ls1f90ccsva8ds3y1cxb32hgy4kn0h3jpgwx0f0hf8619bz64ss";
        libName = "solana_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "quinn";
            packageId = "quinn";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-client-traits";
            packageId = "solana-client-traits";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-connection-cache";
            packageId = "solana-connection-cache";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-epoch-info";
            packageId = "solana-epoch-info";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-measure";
            packageId = "solana-measure";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubsub-client";
            packageId = "solana-pubsub-client";
          }
          {
            name = "solana-quic-client";
            packageId = "solana-quic-client";
          }
          {
            name = "solana-quic-definitions";
            packageId = "solana-quic-definitions";
          }
          {
            name = "solana-rpc-client";
            packageId = "solana-rpc-client";
            usesDefaultFeatures = false;
            features = [ "default" ];
          }
          {
            name = "solana-rpc-client-api";
            packageId = "solana-rpc-client-api";
          }
          {
            name = "solana-rpc-client-nonce-utils";
            packageId = "solana-rpc-client-nonce-utils";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-streamer";
            packageId = "solana-streamer";
          }
          {
            name = "solana-thin-client";
            packageId = "solana-thin-client";
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
          {
            name = "solana-tpu-client";
            packageId = "solana-tpu-client";
            usesDefaultFeatures = false;
            features = [ "default" ];
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "solana-udp-client";
            packageId = "solana-udp-client";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];

      };
      "solana-client-traits" = rec {
        crateName = "solana-client-traits";
        version = "2.2.1";
        edition = "2021";
        sha256 = "19vjmifgq0qqvzhbfmdsgan051g9cflbinmk1sgg4ag6fhc0gw43";
        libName = "solana_client_traits";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-epoch-info";
            packageId = "solana-epoch-info";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
        ];

      };
      "solana-clock" = rec {
        crateName = "solana-clock";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0c9f5vy0sg7z6ij8bamqir4s6rnl6fz8fgbx7nnq5vgwf2mq5d0v";
        libName = "solana_clock";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-cluster-type" = rec {
        crateName = "solana-cluster-type";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0zn952jf246vpsi7h3sfrn2is607y77pka3y216kaa5a5pm9zkks";
        libName = "solana_cluster_type";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-commitment-config" = rec {
        crateName = "solana-commitment-config";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0wzv01kvpj164p3bg08rgb5zgcy3nz6rnzk9w4nq7ypdwgfw8jdc";
        libName = "solana_commitment_config";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-compute-budget-interface" = rec {
        crateName = "solana-compute-budget-interface";
        version = "2.2.2";
        edition = "2021";
        sha256 = "1r5fqfl73jz5x450b5kw7mxpg09z6dz4ybnn0sm9j11dqb2d4cl4";
        libName = "solana_compute_budget_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "dev-context-only-utils" = [ "borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "borsh" "serde" ];
      };
      "solana-config-program-client" = rec {
        crateName = "solana-config-program-client";
        version = "0.0.2";
        edition = "2021";
        sha256 = "0pjrqghci1c99cw7wf3y7rxrvdl5yz0z1d195s9d8pqhdz1ymb2k";
        libName = "solana_config_program_client";
        authors = [
          "Anza Technology Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
          }
          {
            name = "kaigan";
            packageId = "kaigan";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "solana-program";
            packageId = "solana-program";
            features = [ "borsh" ];
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
        ];
        features = {
          "fetch" = [ "dep:solana-client" "dep:solana-sdk" ];
          "serde" = [ "dep:bincode" "dep:serde" "kaigan/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-connection-cache" = rec {
        crateName = "solana-connection-cache";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0j3lvk2rbnyvqprf3lgi4yknxq4aph207jw3y9lwl561xggxa0vs";
        libName = "solana_connection_cache";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-measure";
            packageId = "solana-measure";
          }
          {
            name = "solana-metrics";
            packageId = "solana-metrics";
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "indicatif" = [ "dep:indicatif" ];
        };
      };
      "solana-cpi" = rec {
        crateName = "solana-cpi";
        version = "2.2.1";
        edition = "2021";
        sha256 = "04gax44qqqc53d8ypq51qp38xrz2yp835z128q0vmhnxxlk13iwd";
        libName = "solana_cpi";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-stable-layout";
            packageId = "solana-stable-layout";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "curve25519" ];
          }
        ];

      };
      "solana-curve25519" = rec {
        crateName = "solana-curve25519";
        version = "2.3.4";
        edition = "2021";
        sha256 = "12h2vxs9m3ypg6y8avf0p0spxni1clsh63hahpl8vjrhbw0g8r5y";
        libName = "solana_curve25519";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 4.2.0";
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" "serde" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "subtle";
            packageId = "subtle";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-decode-error" = rec {
        crateName = "solana-decode-error";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0dasc86cgckxapvjzd6aip1hw4nw2p5gf4q9wx1gkcldl631cy4c";
        libName = "solana_decode_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
        ];

      };
      "solana-define-syscall" = rec {
        crateName = "solana-define-syscall";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1qmfn5mhakpra7if3p8aq8il0jqr9mfn56pyx8i8272lrymy5qra";
        libName = "solana_define_syscall";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-derivation-path" = rec {
        crateName = "solana-derivation-path";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0yvkb2r5hkqj70579fxr7i2b38yw5chhc3m1rk1mwp5jk3bmd5wk";
        libName = "solana_derivation_path";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "derivation-path";
            packageId = "derivation-path";
            usesDefaultFeatures = false;
          }
          {
            name = "qstring";
            packageId = "qstring";
          }
          {
            name = "uriparse";
            packageId = "uriparse";
          }
        ];

      };
      "solana-ed25519-program" = rec {
        crateName = "solana-ed25519-program";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0ls7x11w8mx2glyj8a6fgqn234qjvm5ny1crixcax8qyd6hszzm1";
        libName = "solana_ed25519_program";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-precompile-error";
            packageId = "solana-precompile-error";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];

      };
      "solana-epoch-info" = rec {
        crateName = "solana-epoch-info";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0yyp41dlrhrnz5lwad0cbhfb0ddgjpyywwr9yfwv144j8h5nzvwh";
        libName = "solana_epoch_info";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-epoch-rewards" = rec {
        crateName = "solana-epoch-rewards";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1dsd70zn78zid1zyva2v46dj8gprdfzqkzmn1fhrwfrjvp9pbdc6";
        libName = "solana_epoch_rewards";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-hash/frozen-abi" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-hash/serde" ];
          "sysvar" = [ "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-epoch-rewards-hasher" = rec {
        crateName = "solana-epoch-rewards-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "06z8fv69rrribar09lyvd2sx4pjl8ga5yn04160p8xdfc8kgvicn";
        libName = "solana_epoch_rewards_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "siphasher";
            packageId = "siphasher 0.3.11";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-epoch-schedule" = rec {
        crateName = "solana-epoch-schedule";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1vb7dxgphfxg026vq5y2wkvf9br9lqbfvmxi4zbmbk6yplghgkiz";
        libName = "solana_epoch_schedule";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-example-mocks" = rec {
        crateName = "solana-example-mocks";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1lrrirq3jlcxsisxikjb5q810fdm4l2iw5a7jd9qvfxqrdb1sil4";
        libName = "solana_example_mocks";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "solana-address-lookup-table-interface";
            packageId = "solana-address-lookup-table-interface";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keccak-hasher";
            packageId = "solana-keccak-hasher";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            features = [ "serde" ];
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-feature-gate-interface" = rec {
        crateName = "solana-feature-gate-interface";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0vcm9djnbhig6ym30p4b5mw5fgf533j0byqn6178x7j45cwcbxa3";
        libName = "solana_feature_gate_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
            optional = true;
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
            optional = true;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-account" "dep:solana-account-info" "dep:solana-instruction" "dep:solana-program-error" "dep:solana-rent" "dep:solana-system-interface" "serde" ];
          "dev-context-only-utils" = [ "bincode" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-feature-set" = rec {
        crateName = "solana-feature-set";
        version = "2.2.5";
        edition = "2021";
        sha256 = "0vbbzn7fsp75kcj8ql9wigvmvc64d1kcpqz6i1gl5ml9w9qkkfck";
        libName = "solana_feature_set";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-fee-calculator" = rec {
        crateName = "solana-fee-calculator";
        version = "2.2.1";
        edition = "2021";
        sha256 = "13fdf0zjlj25n88di6n7aa1f1lxl938qk080qcmq3cqgv84c96yq";
        libName = "solana_fee_calculator";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-fee-structure" = rec {
        crateName = "solana-fee-structure";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0knxb2hdkidad8p6hxs39853ls0vyddp93v1pw8fhf0wb1rzdb9k";
        libName = "solana_fee_structure";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-native-token";
            packageId = "solana-native-token";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-genesis-config" = rec {
        crateName = "solana-genesis-config";
        version = "2.3.0";
        edition = "2021";
        sha256 = "17wqakjx2lvpxmpcc14h1fdchzvqs9w9v8h7xxzx75kvsj2m0wmk";
        libName = "solana_genesis_config";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "chrono";
            packageId = "chrono";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-cluster-type";
            packageId = "solana-cluster-type";
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-inflation";
            packageId = "solana-inflation";
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-logger";
            packageId = "solana-logger";
          }
          {
            name = "solana-poh-config";
            packageId = "solana-poh-config";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "solana-shred-version";
            packageId = "solana-shred-version";
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-account/serde" "solana-clock/serde" "solana-cluster-type/serde" "solana-epoch-schedule/serde" "solana-fee-calculator/serde" "solana-inflation/serde" "solana-poh-config/serde" "solana-rent/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-hard-forks" = rec {
        crateName = "solana-hard-forks";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1bwblb8hlw4k6shxwknharqq8ydqbwdvmn0iavaymqkqz1qq7hmn";
        libName = "solana_hard_forks";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-hash" = rec {
        crateName = "solana-hash";
        version = "2.3.0";
        edition = "2021";
        sha256 = "0qrvr54vc7lc85gjbvibh7bl6072vw3z04snaixjiyh00fgnxfdm";
        libName = "solana_hash";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "std" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "default" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "borsh" "bytemuck" "default" "serde" "std" ];
      };
      "solana-inflation" = rec {
        crateName = "solana-inflation";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1qvxji1iq34kdhdaxrkirvlqa3l5cr4kwmrrd376irdqkshgdvi3";
        libName = "solana_inflation";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-instruction" = rec {
        crateName = "solana-instruction";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1188lppmnf4462nkg6bz9qcmd42bpi33mlg9f57vcxi8x0n8waa7";
        libName = "solana_instruction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:serde" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
          "syscalls" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "bincode" "borsh" "default" "serde" "std" "syscalls" ];
      };
      "solana-instructions-sysvar" = rec {
        crateName = "solana-instructions-sysvar";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0msgjmm89pxyrliya1pp79czq63ilj64plwibd7hqbawmmpmms70";
        libName = "solana_instructions_sysvar";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "dep:qualifier_attr" ];
        };
      };
      "solana-keccak-hasher" = rec {
        crateName = "solana-keccak-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0y9gw75396scycg0dmg8g3v7xnwn5nag8p93k4dlaanlzdbvkbn7";
        libName = "solana_keccak_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "sha3";
            packageId = "sha3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha3";
            packageId = "sha3";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "std" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sha3" = [ "dep:sha3" ];
          "std" = [ "solana-hash/std" ];
        };
        resolvedDefaultFeatures = [ "sha3" ];
      };
      "solana-keypair" = rec {
        crateName = "solana-keypair";
        version = "2.2.3";
        edition = "2021";
        sha256 = "1fwq3szj8pakan12wa07w1bwzk3xdvv9a6hj7vlkbi853am08gxx";
        libName = "solana_keypair";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "ed25519-dalek-bip32";
            packageId = "ed25519-dalek-bip32";
            optional = true;
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "rand";
            packageId = "rand 0.7.3";
            rename = "rand0-7";
          }
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
            optional = true;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-seed-derivable";
            packageId = "solana-seed-derivable";
            optional = true;
          }
          {
            name = "solana-seed-phrase";
            packageId = "solana-seed-phrase";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            features = [ "std" "verify" ];
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "seed-derivable" = [ "dep:solana-derivation-path" "dep:solana-seed-derivable" "dep:ed25519-dalek-bip32" ];
        };
        resolvedDefaultFeatures = [ "seed-derivable" ];
      };
      "solana-last-restart-slot" = rec {
        crateName = "solana-last-restart-slot";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1pawnp0nih8y4sfj98981kpxf46gxmp2bkb56m3ffwnw5yn60qsa";
        libName = "solana_last_restart_slot";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-loader-v2-interface" = rec {
        crateName = "solana-loader-v2-interface";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0m4nqkhld9293lzgpbhyv447s84yafhfxy0dsdyawy5ddl00iayq";
        libName = "solana_loader_v2_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "bincode" "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "bincode" = [ "dep:solana-instruction" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-loader-v3-interface" = rec {
        crateName = "solana-loader-v3-interface";
        version = "5.0.0";
        edition = "2021";
        sha256 = "18k3kb4hd357gr35nch6ljdbny7afkbcqfs4dcap61wbbfh64wbg";
        libName = "solana_loader_v3_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "curve25519" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-system-interface" "serde" "solana-instruction/bincode" ];
          "dev-context-only-utils" = [ "bincode" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-loader-v4-interface" = rec {
        crateName = "solana-loader-v4-interface";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0zlycpcp7f4wy0nfxjvfkhb43jrln1n2lsm9wa1rmwzi89r7fskh";
        libName = "solana_loader_v4_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-system-interface" "serde" "solana-instruction/bincode" ];
          "dev-context-only-utils" = [ "bincode" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_bytes" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-logger" = rec {
        crateName = "solana-logger";
        version = "2.3.1";
        edition = "2021";
        sha256 = "1mawxg34bsv7v2jjfhcbip4cg3l85m4l4ajkkf9k7mxgq5z7g3nv";
        libName = "solana_logger";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "env_logger";
            packageId = "env_logger";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "signal-hook";
            packageId = "signal-hook";
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
        ];

      };
      "solana-measure" = rec {
        crateName = "solana-measure";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1wqfik49vnj1x79ik00sp7nyhyg0kyb3c7n5k2cy69c7ihx06zf1";
        libName = "solana_measure";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-message" = rec {
        crateName = "solana-message";
        version = "2.4.0";
        edition = "2021";
        sha256 = "0jrism4xwd7c2d44w2kam7bxg0z6ln7jd3dpi6zp9zvnwfyam5hp";
        libName = "solana_message";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "blake3";
            packageId = "blake3";
            optional = true;
            features = [ "traits-preview" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-bincode";
            packageId = "solana-bincode";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
            optional = true;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-bincode" "dep:solana-system-interface" "serde" ];
          "blake3" = [ "dep:blake3" ];
          "dev-context-only-utils" = [ "bincode" "blake3" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-hash/frozen-abi" "solana-pubkey/frozen-abi" "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:solana-short-vec" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "blake3" "serde" ];
      };
      "solana-metrics" = rec {
        crateName = "solana-metrics";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1d64j361zbgfi6qxm6p00ix3bbx84chkhyjhz487h4asaki1c4yl";
        libName = "solana_metrics";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "gethostname";
            packageId = "gethostname";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = [ "blocking" "brotli" "deflate" "gzip" "rustls-tls" "json" ];
          }
          {
            name = "solana-cluster-type";
            packageId = "solana-cluster-type";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-msg" = rec {
        crateName = "solana-msg";
        version = "2.2.1";
        edition = "2021";
        sha256 = "14l0k8vi2630rk7s79f7wm7crr2fn6fb078sg31apyls74a1lspk";
        libName = "solana_msg";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-native-token" = rec {
        crateName = "solana-native-token";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1agl9j3l98pjgq6fyzf1db6g10v70q80b729vm9l15rn1j45nlb1";
        libName = "solana_native_token";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-net-utils" = rec {
        crateName = "solana-net-utils";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0hnr3msaj0ivw0asxgl86lassmvirzc092s43xxnw3nmbgr5vgxx";
        libName = "solana_net_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix";
            features = [ "socket" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "solana-serde";
            packageId = "solana-serde";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "dep:pcap-file" "dep:hxdmp" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "solana-nonce" = rec {
        crateName = "solana-nonce";
        version = "2.2.1";
        edition = "2021";
        sha256 = "098kvwyzpnkmyjk19n6iy9k013wlkd89vgd50iif0dsm33mj4gkh";
        libName = "solana_nonce";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "serde" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-fee-calculator/serde" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-nonce-account" = rec {
        crateName = "solana-nonce-account";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1nhllv6q643kzs8k117201p4ddc6vafl713a9la61gwd1fi73sfd";
        libName = "solana_nonce_account";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account";
            packageId = "solana-account";
            features = [ "bincode" ];
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
            features = [ "serde" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];

      };
      "solana-offchain-message" = rec {
        crateName = "solana-offchain-message";
        version = "2.2.1";
        edition = "2021";
        sha256 = "10b5jj6wli84kcshcrijsyjig84swkd5bkj7y7qkgsjxvs53j9mm";
        libName = "solana_offchain_message";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-packet";
            packageId = "solana-packet";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "verify" ];
          "verify" = [ "dep:solana-pubkey" "solana-signature/verify" ];
        };
        resolvedDefaultFeatures = [ "verify" ];
      };
      "solana-packet" = rec {
        crateName = "solana-packet";
        version = "2.2.1";
        edition = "2021";
        sha256 = "09yinvj9cjh02l3psg1dvmk6izfd7i5w6pnal70kwys0mwnjskq0";
        libName = "solana_packet";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "cfg_eval";
            packageId = "cfg_eval";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_with";
            packageId = "serde_with";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "macros" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "serde" ];
          "dev-context-only-utils" = [ "bincode" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "bitflags/serde" "dep:cfg_eval" "dep:serde" "dep:serde_derive" "dep:serde_with" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-perf" = rec {
        crateName = "solana-perf";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0wp19la0dsnld7k95h66gqrdl6cl8p8lyg2dgl9gl8c8x7a5957a";
        libName = "solana_perf";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bv";
            packageId = "bv";
            features = [ "serde" ];
          }
          {
            name = "bytes";
            packageId = "bytes";
            features = [ "serde" ];
          }
          {
            name = "caps";
            packageId = "caps";
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 4.2.0";
            features = [ "digest" "rand_core" ];
          }
          {
            name = "dlopen2";
            packageId = "dlopen2";
          }
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ("linux" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix";
            target = { target, features }: ("linux" == target."os" or null);
            features = [ "user" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-metrics";
            packageId = "solana-metrics";
          }
          {
            name = "solana-packet";
            packageId = "solana-packet";
            features = [ "bincode" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rayon-threadlimit";
            packageId = "solana-rayon-threadlimit";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            features = [ "verify" ];
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
        ];
        features = {
          "dev-context-only-utils" = [ "dep:solana-clock" "dep:solana-keypair" "dep:solana-signer" "dep:solana-system-interface" "dep:solana-system-transaction" "dep:solana-transaction" "dep:solana-vote-program" "dep:solana-vote" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-short-vec/frozen-abi" "solana-vote-program/frozen-abi" ];
        };
      };
      "solana-poh-config" = rec {
        crateName = "solana-poh-config";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0xgfrhgbkwpk97j5vd5z0n2cb2ahhrkbpyqfdfn84006p6sc6l6n";
        libName = "solana_poh_config";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-precompile-error" = rec {
        crateName = "solana-precompile-error";
        version = "2.2.2";
        edition = "2021";
        sha256 = "1y7r24l8a37q88lg0rhg9p5am5ni339qvvkmn7idyxyyyp0v51sd";
        libName = "solana_precompile_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
        ];

      };
      "solana-precompiles" = rec {
        crateName = "solana-precompiles";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0ciqmvlyn3b031y9c5y574hijr5ws2kk06sx1zdjwrbwlml2gs9n";
        libName = "solana_precompiles";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "solana-ed25519-program";
            packageId = "solana-ed25519-program";
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-precompile-error";
            packageId = "solana-precompile-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-secp256k1-program";
            packageId = "solana-secp256k1-program";
            features = [ "bincode" ];
          }
          {
            name = "solana-secp256r1-program";
            packageId = "solana-secp256r1-program";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "openssl-vendored" = [ "solana-secp256r1-program/openssl-vendored" ];
        };
      };
      "solana-presigner" = rec {
        crateName = "solana-presigner";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1zlh3i4q2wny0nnxsv0v351vj0ilv567gdhhjp35y4m4wqj7m9c1";
        libName = "solana_presigner";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            features = [ "verify" ];
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
        ];

      };
      "solana-program" = rec {
        crateName = "solana-program";
        version = "2.3.0";
        edition = "2021";
        sha256 = "043j8szk639r4pij9n5701xf8xh56yayhrkin3xy4i9mpm2s3v4q";
        libName = "solana_program";type = [ "cdylib" "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "blake3";
            packageId = "blake3";
            features = [ "traits-preview" ];
          }
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "console_error_panic_hook";
            packageId = "console_error_panic_hook";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "console_log";
            packageId = "console_log";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("solana" == target."os" or null);
            features = [ "custom" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memoffset";
            packageId = "memoffset";
          }
          {
            name = "num-bigint";
            packageId = "num-bigint 0.4.6";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
            features = [ "i128" ];
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_bytes";
            packageId = "serde_bytes";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
            features = [ "bincode" ];
          }
          {
            name = "solana-address-lookup-table-interface";
            packageId = "solana-address-lookup-table-interface";
            features = [ "bincode" "bytemuck" ];
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-big-mod-exp";
            packageId = "solana-big-mod-exp";
          }
          {
            name = "solana-bincode";
            packageId = "solana-bincode";
          }
          {
            name = "solana-blake3-hasher";
            packageId = "solana-blake3-hasher";
            features = [ "blake3" ];
          }
          {
            name = "solana-borsh";
            packageId = "solana-borsh";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-epoch-rewards";
            packageId = "solana-epoch-rewards";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-example-mocks";
            packageId = "solana-example-mocks";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-feature-gate-interface";
            packageId = "solana-feature-gate-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
            features = [ "serde" ];
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
            features = [ "bytemuck" "serde" "std" ];
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "bincode" "serde" "std" "syscalls" ];
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-keccak-hasher";
            packageId = "solana-keccak-hasher";
            features = [ "sha3" ];
          }
          {
            name = "solana-last-restart-slot";
            packageId = "solana-last-restart-slot";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-loader-v2-interface";
            packageId = "solana-loader-v2-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-loader-v3-interface";
            packageId = "solana-loader-v3-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-loader-v4-interface";
            packageId = "solana-loader-v4-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            features = [ "bincode" "blake3" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-native-token";
            packageId = "solana-native-token";
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
            features = [ "serde" ];
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
            features = [ "serde" ];
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-program-pack";
            packageId = "solana-program-pack";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "bytemuck" "curve25519" "serde" "std" ];
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-secp256k1-recover";
            packageId = "solana-secp256k1-recover";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            features = [ "sha2" ];
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-slot-history";
            packageId = "solana-slot-history";
            features = [ "serde" "sysvar" ];
          }
          {
            name = "solana-stable-layout";
            packageId = "solana-stable-layout";
          }
          {
            name = "solana-stake-interface";
            packageId = "solana-stake-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "bincode" "bytemuck" ];
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
          {
            name = "solana-vote-interface";
            packageId = "solana-vote-interface";
            features = [ "bincode" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "dev-context-only-utils" ];
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "dep:solana-borsh" "solana-hash/borsh" "solana-instruction/borsh" "solana-program-error/borsh" "solana-pubkey/borsh" "solana-stake-interface/borsh" ];
          "default" = [ "borsh" ];
          "dev-context-only-utils" = [ "solana-instructions-sysvar/dev-context-only-utils" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-epoch-rewards/frozen-abi" "solana-epoch-schedule/frozen-abi" "solana-fee-calculator/frozen-abi" "solana-hash/frozen-abi" "solana-instruction/frozen-abi" "solana-message/frozen-abi" "solana-pubkey/frozen-abi" "solana-rent/frozen-abi" "solana-short-vec/frozen-abi" "solana-stake-interface/frozen-abi" "solana-sysvar/frozen-abi" ];
        };
        resolvedDefaultFeatures = [ "borsh" "default" ];
      };
      "solana-program-entrypoint" = rec {
        crateName = "solana-program-entrypoint";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1ggddah5i2f02g9phgca9h2zaj3c98dfw22h18lpblhf38dh9kij";
        libName = "solana_program_entrypoint";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-program-error" = rec {
        crateName = "solana-program-error";
        version = "2.2.2";
        edition = "2021";
        sha256 = "0xg7mmb6b3zqiz24fdnsc3n2mc0vsrxz6dz2psj2wbk4glhy1qly";
        libName = "solana_program_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "borsh" "serde" ];
      };
      "solana-program-memory" = rec {
        crateName = "solana-program-memory";
        version = "2.3.1";
        edition = "2021";
        sha256 = "04hpcy8lxzlbx5cnmka3mzjsi76yzqi56s0hvk7xcgvg1h4jcm1s";
        libName = "solana_program_memory";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
        ];

      };
      "solana-program-option" = rec {
        crateName = "solana-program-option";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1l4p6fxavd74shg4mzibif294arpcga39f6svfkfs5n6kcp7lryw";
        libName = "solana_program_option";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-program-pack" = rec {
        crateName = "solana-program-pack";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0yr7xgfyy6clrdg9gxn5zq4sa995ssvwrylpqlvxq4kfbvqhx7ri";
        libName = "solana_program_pack";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
        ];

      };
      "solana-pubkey" = rec {
        crateName = "solana-pubkey";
        version = "2.4.0";
        edition = "2021";
        sha256 = "1wagvdblirnrlrh2yj8vi9asy7cg7263k6grl4n0a6i6qfwssqlv";
        libName = "solana_pubkey";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 4.2.0";
            optional = true;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" ];
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "five8_const";
            packageId = "five8_const";
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.2.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "js" "wasm-bindgen" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-atomic-u64";
            packageId = "solana-atomic-u64";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            optional = true;
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "std" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "curve25519" = [ "dep:curve25519-dalek" "sha2" ];
          "default" = [ "std" ];
          "dev-context-only-utils" = [ "dep:arbitrary" "rand" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "rand" = [ "dep:rand" "std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sha2" = [ "dep:solana-sha256-hasher" "solana-sha256-hasher/sha2" ];
        };
        resolvedDefaultFeatures = [ "borsh" "bytemuck" "curve25519" "default" "rand" "serde" "sha2" "std" ];
      };
      "solana-pubsub-client" = rec {
        crateName = "solana-pubsub-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1l08l577giynirad5faakvf2652xdkqn4dra6x6r67yz03xnbsp8";
        libName = "solana_pubsub_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "http";
            packageId = "http 0.2.12";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client-types";
            packageId = "solana-rpc-client-types";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-stream";
            packageId = "tokio-stream";
          }
          {
            name = "tokio-tungstenite";
            packageId = "tokio-tungstenite";
            features = [ "rustls-tls-webpki-roots" ];
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
            features = [ "rustls-tls-webpki-roots" ];
          }
          {
            name = "url";
            packageId = "url";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];

      };
      "solana-quic-client" = rec {
        crateName = "solana-quic-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "070cfmrcfhyab6vp5m6ynczdzvczq18zl0avk4gj4isix1hqhj9m";
        libName = "solana_quic_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock";
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "quinn";
            packageId = "quinn";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-connection-cache";
            packageId = "solana-connection-cache";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-measure";
            packageId = "solana-measure";
          }
          {
            name = "solana-metrics";
            packageId = "solana-metrics";
          }
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-quic-definitions";
            packageId = "solana-quic-definitions";
          }
          {
            name = "solana-rpc-client-api";
            packageId = "solana-rpc-client-api";
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-streamer";
            packageId = "solana-streamer";
          }
          {
            name = "solana-tls-utils";
            packageId = "solana-tls-utils";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
            features = [ "dev-context-only-utils" ];
          }
        ];

      };
      "solana-quic-definitions" = rec {
        crateName = "solana-quic-definitions";
        version = "2.3.1";
        edition = "2021";
        sha256 = "17ip6i9s7nksx61v7jf0qmprij17b8q8zcgp6l61vss9n3ax9w7v";
        libName = "solana_quic_definitions";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
        ];

      };
      "solana-rayon-threadlimit" = rec {
        crateName = "solana-rayon-threadlimit";
        version = "2.3.4";
        edition = "2021";
        sha256 = "052dsx5gvgsrvd6994ggzr1az1ksiyqs3yc12d6sh1v2v8lb683r";
        libName = "solana_rayon_threadlimit";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num_cpus";
            packageId = "num_cpus";
          }
        ];

      };
      "solana-rent" = rec {
        crateName = "solana-rent";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1014bmlcl41qf65546sj6cl89cvzf0kminn2x2k8rscxxbysibni";
        libName = "solana_rent";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-rent-collector" = rec {
        crateName = "solana-rent-collector";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1x1v5miry313n1wyk691dr3vkfvqpi1mwhj48a10v2qhspsij7kw";
        libName = "solana_rent_collector";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-genesis-config";
            packageId = "solana-genesis-config";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-epoch-schedule/serde" "solana-rent/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-rent-debits" = rec {
        crateName = "solana-rent-debits";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1k8qv8s80vc1ksdv9xrfvk7qryng6272il9q8kkr4d00qq9r2vsg";
        libName = "solana_rent_debits";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-reward-info";
            packageId = "solana-reward-info";
          }
        ];
        features = {
        };
      };
      "solana-reserved-account-keys" = rec {
        crateName = "solana-reserved-account-keys";
        version = "2.2.2";
        edition = "2021";
        sha256 = "1cc5nc4zybv5zh84lz3spy3390xz9a8pq16dyy5g58x2kjhjxcp4";
        libName = "solana_reserved_account_keys";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-reward-info" = rec {
        crateName = "solana-reward-info";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0bsamracm8hg02129b928j0w0a3kcb5ws4bfiymy06lv2dlmn80q";
        libName = "solana_reward_info";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-rpc-client" = rec {
        crateName = "solana-rpc-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1fj9nnczij4yp6g7hs2gzm00sp5ayz6lz8z3ld178nqms9a8vr73";
        libName = "solana_rpc_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = [ "blocking" "brotli" "deflate" "gzip" "rustls-tls" "json" ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
            features = [ "zstd" ];
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-epoch-info";
            packageId = "solana-epoch-info";
            features = [ "serde" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
            features = [ "serde" ];
          }
          {
            name = "solana-feature-gate-interface";
            packageId = "solana-feature-gate-interface";
            features = [ "serde" ];
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client-api";
            packageId = "solana-rpc-client-api";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "solana-transaction-status-client-types";
            packageId = "solana-transaction-status-client-types";
          }
          {
            name = "solana-version";
            packageId = "solana-version";
          }
          {
            name = "solana-vote-interface";
            packageId = "solana-vote-interface";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];
        features = {
          "default" = [ "spinner" ];
          "spinner" = [ "dep:indicatif" ];
        };
        resolvedDefaultFeatures = [ "default" "spinner" ];
      };
      "solana-rpc-client-api" = rec {
        crateName = "solana-rpc-client-api";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0z7kns1n5xzd8ibfzpr4395ilqx0pbm1lijik7ywbvs2fddqa447";
        libName = "solana_rpc_client_api";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "jsonrpc-core";
            packageId = "jsonrpc-core";
          }
          {
            name = "reqwest";
            packageId = "reqwest";
            usesDefaultFeatures = false;
            features = [ "rustls-tls" ];
          }
          {
            name = "reqwest-middleware";
            packageId = "reqwest-middleware";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-rpc-client-types";
            packageId = "solana-rpc-client-types";
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "solana-transaction-status-client-types";
            packageId = "solana-transaction-status-client-types";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-rpc-client-nonce-utils" = rec {
        crateName = "solana-rpc-client-nonce-utils";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0wa6h8l0rvw29s28k2h17b9q7lf1239yzgsf0sldrmh40imqnbsq";
        libName = "solana_rpc_client_nonce_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-account";
            packageId = "solana-account";
            features = [ "bincode" ];
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-nonce";
            packageId = "solana-nonce";
            features = [ "serde" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client";
            packageId = "solana-rpc-client";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "clap" = [ "dep:clap" "dep:solana-clap-utils" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "solana-rpc-client-types" = rec {
        crateName = "solana-rpc-client-types";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0p4lri0xw571as0z5fwbnncakcrk7apcx57cr1p0kfy2chqgvs9z";
        libName = "solana_rpc_client_types";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
            features = [ "serde" ];
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
            features = [ "serde" ];
          }
          {
            name = "solana-inflation";
            packageId = "solana-inflation";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "solana-transaction-status-client-types";
            packageId = "solana-transaction-status-client-types";
          }
          {
            name = "solana-version";
            packageId = "solana-version";
          }
          {
            name = "spl-generic-token";
            packageId = "spl-generic-token";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];

      };
      "solana-sanitize" = rec {
        crateName = "solana-sanitize";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1kyfakp810bgmrrx0ypbcmr9hmkf4xazrwrs9af8s65qaw9vrwb1";
        libName = "solana_sanitize";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-sdk" = rec {
        crateName = "solana-sdk";
        version = "2.3.1";
        edition = "2021";
        sha256 = "0sn8hjrlpzir9yk2j2dwqlrdlfigp2zq2rabqj8jg42vcfky9h4c";
        libName = "solana_sdk";type = [ "cdylib" "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
          }
          {
            name = "getrandom";
            packageId = "getrandom 0.1.16";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "wasm-bindgen" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
            features = [ "bincode" ];
          }
          {
            name = "solana-bn254";
            packageId = "solana-bn254";
          }
          {
            name = "solana-client-traits";
            packageId = "solana-client-traits";
            optional = true;
          }
          {
            name = "solana-cluster-type";
            packageId = "solana-cluster-type";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-compute-budget-interface";
            packageId = "solana-compute-budget-interface";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
          }
          {
            name = "solana-ed25519-program";
            packageId = "solana-ed25519-program";
            optional = true;
          }
          {
            name = "solana-epoch-info";
            packageId = "solana-epoch-info";
            features = [ "serde" ];
          }
          {
            name = "solana-epoch-rewards-hasher";
            packageId = "solana-epoch-rewards-hasher";
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
          }
          {
            name = "solana-fee-structure";
            packageId = "solana-fee-structure";
            features = [ "serde" ];
          }
          {
            name = "solana-genesis-config";
            packageId = "solana-genesis-config";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-hard-forks";
            packageId = "solana-hard-forks";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "serde" ];
          }
          {
            name = "solana-inflation";
            packageId = "solana-inflation";
            features = [ "serde" ];
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
            optional = true;
            features = [ "seed-derivable" ];
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            features = [ "serde" ];
          }
          {
            name = "solana-native-token";
            packageId = "solana-native-token";
          }
          {
            name = "solana-nonce-account";
            packageId = "solana-nonce-account";
          }
          {
            name = "solana-offchain-message";
            packageId = "solana-offchain-message";
            optional = true;
            features = [ "verify" ];
          }
          {
            name = "solana-packet";
            packageId = "solana-packet";
            features = [ "bincode" "serde" ];
          }
          {
            name = "solana-poh-config";
            packageId = "solana-poh-config";
            features = [ "serde" ];
          }
          {
            name = "solana-precompile-error";
            packageId = "solana-precompile-error";
            optional = true;
          }
          {
            name = "solana-precompiles";
            packageId = "solana-precompiles";
            optional = true;
          }
          {
            name = "solana-presigner";
            packageId = "solana-presigner";
            optional = true;
          }
          {
            name = "solana-program";
            packageId = "solana-program";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-quic-definitions";
            packageId = "solana-quic-definitions";
            optional = true;
          }
          {
            name = "solana-rent-collector";
            packageId = "solana-rent-collector";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-rent-debits";
            packageId = "solana-rent-debits";
          }
          {
            name = "solana-reserved-account-keys";
            packageId = "solana-reserved-account-keys";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-reward-info";
            packageId = "solana-reward-info";
            features = [ "serde" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-secp256k1-program";
            packageId = "solana-secp256k1-program";
            optional = true;
            features = [ "bincode" ];
          }
          {
            name = "solana-secp256k1-recover";
            packageId = "solana-secp256k1-recover";
          }
          {
            name = "solana-secp256r1-program";
            packageId = "solana-secp256r1-program";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-seed-derivable";
            packageId = "solana-seed-derivable";
            optional = true;
          }
          {
            name = "solana-seed-phrase";
            packageId = "solana-seed-phrase";
            optional = true;
          }
          {
            name = "solana-serde";
            packageId = "solana-serde";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
          }
          {
            name = "solana-shred-version";
            packageId = "solana-shred-version";
            optional = true;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rand" "serde" "std" "verify" ];
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
            optional = true;
          }
          {
            name = "solana-system-transaction";
            packageId = "solana-system-transaction";
            optional = true;
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
            optional = true;
            features = [ "blake3" "precompiles" "serde" "verify" ];
          }
          {
            name = "solana-transaction-context";
            packageId = "solana-transaction-context";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "solana-validator-exit";
            packageId = "solana-validator-exit";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-program";
            packageId = "solana-program";
            usesDefaultFeatures = false;
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
          "borsh" = [ "solana-compute-budget-interface/borsh" "solana-program/borsh" "solana-secp256k1-recover/borsh" ];
          "default" = [ "borsh" "full" ];
          "dev-context-only-utils" = [ "solana-account/dev-context-only-utils" "solana-compute-budget-interface/dev-context-only-utils" "solana-rent-debits/dev-context-only-utils" "solana-transaction/dev-context-only-utils" "solana-transaction-context/dev-context-only-utils" ];
          "frozen-abi" = [ "solana-feature-set/frozen-abi" "solana-fee-structure/frozen-abi" "solana-account/frozen-abi" "solana-cluster-type/frozen-abi" "solana-genesis-config/frozen-abi" "solana-hard-forks/frozen-abi" "solana-inflation/frozen-abi" "solana-packet/frozen-abi" "solana-poh-config/frozen-abi" "solana-program/frozen-abi" "solana-rent-collector/frozen-abi" "solana-reward-info/frozen-abi" "solana-short-vec/frozen-abi" "solana-signature/frozen-abi" "solana-transaction/frozen-abi" "solana-transaction-error/frozen-abi" ];
          "full" = [ "serde_json" "solana-signature" "solana-pubkey/rand" "dep:solana-client-traits" "dep:solana-cluster-type" "dep:solana-ed25519-program" "dep:solana-commitment-config" "dep:solana-compute-budget-interface" "dep:solana-genesis-config" "dep:solana-hard-forks" "dep:solana-keypair" "dep:solana-offchain-message" "dep:solana-precompile-error" "dep:solana-precompiles" "dep:solana-presigner" "dep:solana-quic-definitions" "dep:solana-rent-collector" "dep:solana-secp256k1-program" "dep:solana-seed-derivable" "dep:solana-seed-phrase" "dep:solana-shred-version" "dep:solana-signer" "dep:solana-system-transaction" "dep:solana-transaction" "dep:solana-transaction-error" ];
          "openssl-vendored" = [ "solana-precompiles/openssl-vendored" ];
          "serde_json" = [ "dep:serde_json" ];
          "solana-signature" = [ "dep:solana-signature" ];
        };
        resolvedDefaultFeatures = [ "borsh" "default" "full" "serde_json" "solana-signature" ];
      };
      "solana-sdk-ids" = rec {
        crateName = "solana-sdk-ids";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0pqa6pgvrbxiiwniad80vrylc8k78sk26gm3caq8hp4dqsf8npaw";
        libName = "solana_sdk_ids";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-sdk-macro" = rec {
        crateName = "solana-sdk-macro";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1pxr6fab4scf4f7vpq1lvy0md01q5vgakb5md87mc0wxp6l0sa46";
        procMacro = true;
        libName = "solana_sdk_macro";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "solana-secp256k1-program" = rec {
        crateName = "solana-secp256k1-program";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0jb15nwfx2i1q9jpvda78ci0azdy79akkwk1xklqym91pkj3767i";
        libName = "solana_secp256k1_program";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "digest";
            packageId = "digest 0.10.7";
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            features = [ "std" "static-context" "hmac" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "sha3";
            packageId = "sha3";
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-precompile-error";
            packageId = "solana-precompile-error";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-feature-set" "dep:solana-instruction" "dep:solana-precompile-error" "dep:solana-sdk-ids" "serde" ];
          "dev-context-only-utils" = [ "bincode" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-secp256k1-recover" = rec {
        crateName = "solana-secp256k1-recover";
        version = "2.2.1";
        edition = "2021";
        sha256 = "15p4pgins7crlvvpha1ndllkvc57j0x0kxa4jkrp18nsdh5i58xs";
        libName = "solana_secp256k1_recover";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "std" "static-context" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        devDependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "libsecp256k1";
            packageId = "libsecp256k1";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "std" "static-context" "hmac" ];
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
        resolvedDefaultFeatures = [ "borsh" ];
      };
      "solana-secp256r1-program" = rec {
        crateName = "solana-secp256r1-program";
        version = "2.2.4";
        edition = "2021";
        sha256 = "03wgmpnwy82g1k2jl1n5j0pgwn1h5ydxjryk087r06h7ldny82nf";
        libName = "solana_secp256r1_program";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "openssl";
            packageId = "openssl";
            target = { target, features }: ((!("wasm32" == target."arch" or null)) && (!("solana" == target."os" or null)));
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            target = { target, features }: ((!("wasm32" == target."arch" or null)) && (!("solana" == target."os" or null)));
            features = [ "std" ];
          }
          {
            name = "solana-precompile-error";
            packageId = "solana-precompile-error";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];
        features = {
          "openssl-vendored" = [ "openssl/vendored" ];
        };
      };
      "solana-security-txt" = rec {
        crateName = "solana-security-txt";
        version = "1.1.1";
        edition = "2021";
        sha256 = "10sifx6mrpcr6hs32vp810bxqc36xcx5qvb8gdxrn7yvgqxs92j6";
        libName = "solana_security_txt";
        features = {
          "parser" = [ "thiserror" "twoway" ];
          "thiserror" = [ "dep:thiserror" ];
          "twoway" = [ "dep:twoway" ];
        };
      };
      "solana-seed-derivable" = rec {
        crateName = "solana-seed-derivable";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0zy9nx1s30wj5wgmlv27mj788i2n4dkkkkz5j3mccrmjmnsq5srv";
        libName = "solana_seed_derivable";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
          }
        ];

      };
      "solana-seed-phrase" = rec {
        crateName = "solana-seed-phrase";
        version = "2.2.1";
        edition = "2021";
        sha256 = "05dwpfwrv0axx1r99ir2mjs9r4943jrj5v3mlrjry1sg6br7l61n";
        libName = "solana_seed_phrase";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "hmac";
            packageId = "hmac 0.12.1";
          }
          {
            name = "pbkdf2";
            packageId = "pbkdf2";
            usesDefaultFeatures = false;
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
        ];

      };
      "solana-serde" = rec {
        crateName = "solana-serde";
        version = "2.2.1";
        edition = "2021";
        sha256 = "014bh5ijfa5hyvjj92zlqx9mj8damm3nlmbi87hndx4a8154hc8r";
        libName = "solana_serde";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "solana-serde-varint" = rec {
        crateName = "solana-serde-varint";
        version = "2.2.2";
        edition = "2021";
        sha256 = "04vihm0bx82jkv11w87hvl4llxn3i1h2763v22qcz3j5p9g1azia";
        libName = "solana_serde_varint";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];

      };
      "solana-serialize-utils" = rec {
        crateName = "solana-serialize-utils";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0pjk9z540g00d9367rxlm6j1s8rlmg2jka6vmwkjnz8rcd5jhyl1";
        libName = "solana_serialize_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "borsh" "serde" ];
          }
        ];

      };
      "solana-sha256-hasher" = rec {
        crateName = "solana-sha256-hasher";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1sn7hva4v5v0dnv1nkdsgi2c0x86r3bhlmjk3x137mn0c5lkhdq0";
        libName = "solana_sha256_hasher";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
            optional = true;
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "sha2" = [ "dep:sha2" ];
        };
        resolvedDefaultFeatures = [ "sha2" ];
      };
      "solana-short-vec" = rec {
        crateName = "solana-short-vec";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0saszic1i1l8l0zm71s9nrn6fy43vrhd0mq0z9b6lxmr35pwcm2w";
        libName = "solana_short_vec";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-shred-version" = rec {
        crateName = "solana-shred-version";
        version = "2.2.1";
        edition = "2021";
        sha256 = "160aqr857alg88w1sdc64g59jf2nbgqs76wdlz8im788c42dplxg";
        libName = "solana_shred_version";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-hard-forks";
            packageId = "solana-hard-forks";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
        ];

      };
      "solana-signature" = rec {
        crateName = "solana-signature";
        version = "2.3.0";
        edition = "2021";
        sha256 = "135xin5p7fzdk23cmpjxwlsjzha2a54ngz12flcgrv3scn7frj34";
        libName = "solana_signature";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
            optional = true;
          }
          {
            name = "five8";
            packageId = "five8";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde-big-array";
            packageId = "serde-big-array";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        devDependencies = [
          {
            name = "ed25519-dalek";
            packageId = "ed25519-dalek";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" "alloc" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "std" ];
          "rand" = [ "dep:rand" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:serde-big-array" ];
          "std" = [ "alloc" ];
          "verify" = [ "dep:ed25519-dalek" ];
        };
        resolvedDefaultFeatures = [ "alloc" "rand" "serde" "std" "verify" ];
      };
      "solana-signer" = rec {
        crateName = "solana-signer";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0nwpa7h35c3wvkm6qwhkn8q8c2gsph0blhhk3h12zc5410arjhbw";
        libName = "solana_signer";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
        ];

      };
      "solana-slot-hashes" = rec {
        crateName = "solana-slot-hashes";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1kh1qcs12cqij29pg5d2cyw7c0xaki60j14dx1ikfl8l46c931hc";
        libName = "solana_slot_hashes";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-hash/serde" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-slot-history" = rec {
        crateName = "solana-slot-history";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0plk1lxr9c3i7391dijgffp1xmi604mznfi8sma2g8kw0src3k4p";
        libName = "solana_slot_history";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bv";
            packageId = "bv";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            optional = true;
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
            optional = true;
          }
        ];
        features = {
          "serde" = [ "dep:serde" "dep:serde_derive" "bv/serde" ];
          "sysvar" = [ "dep:solana-sdk-ids" "dep:solana-sysvar-id" ];
        };
        resolvedDefaultFeatures = [ "serde" "sysvar" ];
      };
      "solana-stable-layout" = rec {
        crateName = "solana-stable-layout";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0m3zlmicgwl0h5ywqnypbkvg1dy2q4dygspybqdvrwpq5b8gf54z";
        libName = "solana_stable_layout";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
        ];

      };
      "solana-stake-interface" = rec {
        crateName = "solana-stake-interface";
        version = "1.2.1";
        edition = "2021";
        sha256 = "134399ahxs5ymcr15a3jycgqlfgq0d9wyf8p3mz4ssr1vsgyhsaj";
        libName = "solana_stake_interface";type = [ "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 0.10.4";
            rename = "borsh0-10";
            optional = true;
          }
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "bincode" = [ "dep:solana-cpi" "solana-instruction/bincode" "solana-instruction/serde" "solana-system-interface/bincode" "serde" ];
          "borsh" = [ "dep:borsh" "dep:borsh0-10" "solana-instruction/borsh" "solana-program-error/borsh" "solana-pubkey/borsh" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-instruction/frozen-abi" "solana-pubkey/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "borsh" "serde" ];
      };
      "solana-streamer" = rec {
        crateName = "solana-streamer";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1zfzz09v82c42bhcd5x9hlfl6k17f2gisiab2lvhb7x9s3gk6ywd";
        libName = "solana_streamer";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "crossbeam-channel";
            packageId = "crossbeam-channel";
          }
          {
            name = "dashmap";
            packageId = "dashmap";
          }
          {
            name = "futures";
            packageId = "futures";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "governor";
            packageId = "governor";
          }
          {
            name = "histogram";
            packageId = "histogram";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "nix";
            packageId = "nix";
            features = [ "net" ];
          }
          {
            name = "pem";
            packageId = "pem";
          }
          {
            name = "percentage";
            packageId = "percentage";
          }
          {
            name = "quinn";
            packageId = "quinn";
          }
          {
            name = "quinn-proto";
            packageId = "quinn-proto";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "socket2";
            packageId = "socket2";
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-measure";
            packageId = "solana-measure";
          }
          {
            name = "solana-metrics";
            packageId = "solana-metrics";
          }
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
          }
          {
            name = "solana-packet";
            packageId = "solana-packet";
          }
          {
            name = "solana-perf";
            packageId = "solana-perf";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-quic-definitions";
            packageId = "solana-quic-definitions";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-time-utils";
            packageId = "solana-time-utils";
          }
          {
            name = "solana-tls-utils";
            packageId = "solana-tls-utils";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "solana-transaction-metrics-tracker";
            packageId = "solana-transaction-metrics-tracker";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "tokio-util";
            packageId = "tokio-util";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser";
          }
        ];
        devDependencies = [
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
        };
      };
      "solana-svm-feature-set" = rec {
        crateName = "solana-svm-feature-set";
        version = "2.3.4";
        edition = "2021";
        sha256 = "11kz8p6k9sx4rxmx9caydkvdghcjgdjbbyzr73sfqa968iirwpf7";
        libName = "solana_svm_feature_set";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-system-interface" = rec {
        crateName = "solana-system-interface";
        version = "1.0.0";
        edition = "2021";
        sha256 = "145wcff4paqhlygbmgi1kbikgiypl5v95b58ypjnn759n66c3mwl";
        libName = "solana_system_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            optional = true;
            features = [ "bincode" "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "std" ];
          }
        ];
        features = {
          "bincode" = [ "dep:solana-instruction" "serde" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" "solana-pubkey/frozen-abi" "solana-pubkey/std" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-system-transaction" = rec {
        crateName = "solana-system-transaction";
        version = "2.2.1";
        edition = "2021";
        sha256 = "06m9xdf8a5m9fwq0xyypg20nlajcna27pfxwx1mqpfmwwljqmnav";
        libName = "solana_system_transaction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
            features = [ "bincode" ];
          }
        ];

      };
      "solana-sysvar" = rec {
        crateName = "solana-sysvar";
        version = "2.2.2";
        edition = "2021";
        sha256 = "15y0fap6fp6xjnbabch0xl4lil8qdrkkj6f689g0yncw06y9436m";
        libName = "solana_sysvar";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
            features = [ "sysvar" ];
          }
          {
            name = "solana-define-syscall";
            packageId = "solana-define-syscall";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-epoch-rewards";
            packageId = "solana-epoch-rewards";
            features = [ "sysvar" ];
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
            features = [ "sysvar" ];
          }
          {
            name = "solana-fee-calculator";
            packageId = "solana-fee-calculator";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-last-restart-slot";
            packageId = "solana-last-restart-slot";
            features = [ "sysvar" ];
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
            features = [ "sysvar" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sdk-macro";
            packageId = "solana-sdk-macro";
          }
          {
            name = "solana-slot-hashes";
            packageId = "solana-slot-hashes";
            features = [ "sysvar" ];
          }
          {
            name = "solana-slot-history";
            packageId = "solana-slot-history";
            features = [ "sysvar" ];
          }
          {
            name = "solana-stake-interface";
            packageId = "solana-stake-interface";
          }
          {
            name = "solana-sysvar-id";
            packageId = "solana-sysvar-id";
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "serde" "solana-stake-interface/bincode" ];
          "bytemuck" = [ "dep:bytemuck" "dep:bytemuck_derive" ];
          "dev-context-only-utils" = [ "bincode" "bytemuck" "solana-instructions-sysvar/dev-context-only-utils" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "solana-stake-interface/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-clock/serde" "solana-epoch-rewards/serde" "solana-epoch-schedule/serde" "solana-fee-calculator/serde" "solana-last-restart-slot/serde" "solana-rent/serde" "solana-slot-hashes/serde" "solana-slot-history/serde" "solana-stake-interface/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "bytemuck" "serde" ];
      };
      "solana-sysvar-id" = rec {
        crateName = "solana-sysvar-id";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1h8ji0z9zqkffh55s3c68qbphvbrimzphl52zmy08nrjsdrv4qjp";
        libName = "solana_sysvar_id";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
        ];

      };
      "solana-thin-client" = rec {
        crateName = "solana-thin-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0idmbyhivj888qcrawj3nbfcdj4rl764y0sp20g4kfa190kicyar";
        libName = "solana_thin_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-client-traits";
            packageId = "solana-client-traits";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-connection-cache";
            packageId = "solana-connection-cache";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-epoch-info";
            packageId = "solana-epoch-info";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client";
            packageId = "solana-rpc-client";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client-api";
            packageId = "solana-rpc-client-api";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
        ];

      };
      "solana-time-utils" = rec {
        crateName = "solana-time-utils";
        version = "2.2.1";
        edition = "2021";
        sha256 = "0k3qih38wi55ians4wf810mk81f4m4z6w0jdl1995hz8n2pn3wka";
        libName = "solana_time_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-tls-utils" = rec {
        crateName = "solana-tls-utils";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0bscc6d46f8qlwr9kpimck2fz2ak87116af8z02vxfq6rbp7l6r6";
        libName = "solana_tls_utils";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "std" "ring" ];
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "x509-parser";
            packageId = "x509-parser";
          }
        ];

      };
      "solana-tpu-client" = rec {
        crateName = "solana-tpu-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0vx7l2n7xs3p5np2zaywb7mx2626lgyzrwgvz7wp1x9ypf8hddy6";
        libName = "solana_tpu_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "indicatif";
            packageId = "indicatif";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rayon";
            packageId = "rayon";
          }
          {
            name = "solana-client-traits";
            packageId = "solana-client-traits";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-connection-cache";
            packageId = "solana-connection-cache";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-epoch-schedule";
            packageId = "solana-epoch-schedule";
          }
          {
            name = "solana-measure";
            packageId = "solana-measure";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
            optional = true;
          }
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-pubsub-client";
            packageId = "solana-pubsub-client";
          }
          {
            name = "solana-quic-definitions";
            packageId = "solana-quic-definitions";
          }
          {
            name = "solana-rpc-client";
            packageId = "solana-rpc-client";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rpc-client-api";
            packageId = "solana-rpc-client-api";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "default" = [ "spinner" ];
          "spinner" = [ "dep:indicatif" "dep:solana-message" "solana-rpc-client/spinner" ];
        };
        resolvedDefaultFeatures = [ "default" "spinner" ];
      };
      "solana-transaction" = rec {
        crateName = "solana-transaction";
        version = "2.2.3";
        edition = "2021";
        sha256 = "0hdzpi10qpi1xkwpk1lsmknswz8cls685748bn7i88gpi1h7src0";
        libName = "solana_transaction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-bincode";
            packageId = "solana-bincode";
            optional = true;
          }
          {
            name = "solana-feature-set";
            packageId = "solana-feature-set";
            optional = true;
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-precompiles";
            packageId = "solana-precompiles";
            optional = true;
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
            optional = true;
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
            optional = true;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "borsh" ];
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "rand" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-bincode" "dep:solana-signer" "dep:solana-system-interface" "serde" "solana-message/bincode" ];
          "blake3" = [ "bincode" "solana-message/blake3" ];
          "dev-context-only-utils" = [ "blake3" "precompiles" "serde" "verify" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "dep:solana-logger" ];
          "precompiles" = [ "dep:solana-feature-set" "dep:solana-precompiles" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:solana-short-vec" "solana-message/serde" "solana-signature/serde" ];
          "verify" = [ "blake3" "solana-signature/verify" ];
        };
        resolvedDefaultFeatures = [ "bincode" "blake3" "precompiles" "serde" "verify" ];
      };
      "solana-transaction-context" = rec {
        crateName = "solana-transaction-context";
        version = "2.3.4";
        edition = "2021";
        sha256 = "02zcvvszg7fm698a5x2zix72w33siis371q644dnnai07yjhac0a";
        libName = "solana_transaction_context";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-account";
            packageId = "solana-account";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
            target = { target, features }: (!("solana" == target."os" or null));
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "serde" "solana-account/bincode" ];
          "dev-context-only-utils" = [ "bincode" "solana-account/dev-context-only-utils" ];
          "serde" = [ "dep:serde" "dep:serde_derive" ];
          "solana-signature" = [ "dep:solana-signature" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-transaction-error" = rec {
        crateName = "solana-transaction-error";
        version = "2.2.1";
        edition = "2021";
        sha256 = "1cbwnrwzl0nmipnh9m2zg8xa0ww4icxgqd5bpa46075nzp49sai2";
        libName = "solana_transaction_error";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "solana-instruction/serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "solana-transaction-metrics-tracker" = rec {
        crateName = "solana-transaction-metrics-tracker";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1djh89sza6bhi72z0xxpc5an9vsrz6i976qjs4iblkdnvxxjvdd0";
        libName = "solana_transaction_metrics_tracker";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "solana-packet";
            packageId = "solana-packet";
          }
          {
            name = "solana-perf";
            packageId = "solana-perf";
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "solana-packet";
            packageId = "solana-packet";
            features = [ "dev-context-only-utils" ];
          }
          {
            name = "solana-perf";
            packageId = "solana-perf";
            features = [ "dev-context-only-utils" ];
          }
        ];

      };
      "solana-transaction-status-client-types" = rec {
        crateName = "solana-transaction-status-client-types";
        version = "2.3.4";
        edition = "2021";
        sha256 = "09frbclbrylr7szw5lc1ilhagq2gw00a5ahlf6323vyv5cy6lygl";
        libName = "solana_transaction_status_client_types";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
          }
          {
            name = "bs58";
            packageId = "bs58";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "solana-account-decoder-client-types";
            packageId = "solana-account-decoder-client-types";
          }
          {
            name = "solana-commitment-config";
            packageId = "solana-commitment-config";
          }
          {
            name = "solana-message";
            packageId = "solana-message";
          }
          {
            name = "solana-reward-info";
            packageId = "solana-reward-info";
            features = [ "serde" ];
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-transaction";
            packageId = "solana-transaction";
            features = [ "serde" ];
          }
          {
            name = "solana-transaction-context";
            packageId = "solana-transaction-context";
            features = [ "bincode" ];
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
            features = [ "serde" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "solana-udp-client" = rec {
        crateName = "solana-udp-client";
        version = "2.3.4";
        edition = "2021";
        sha256 = "05hqxfv09y55f2n9pi77kr6fq7iz6l7fww13cgfjp5yl3g6xr3zv";
        libName = "solana_udp_client";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "solana-connection-cache";
            packageId = "solana-connection-cache";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-keypair";
            packageId = "solana-keypair";
          }
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
          }
          {
            name = "solana-streamer";
            packageId = "solana-streamer";
          }
          {
            name = "solana-transaction-error";
            packageId = "solana-transaction-error";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        devDependencies = [
          {
            name = "solana-net-utils";
            packageId = "solana-net-utils";
            features = [ "dev-context-only-utils" ];
          }
        ];

      };
      "solana-validator-exit" = rec {
        crateName = "solana-validator-exit";
        version = "2.2.1";
        edition = "2021";
        sha256 = "079ch5dddpphz8bljclgk94axl29msg0wb656m9xsa0b7ix6vgvv";
        libName = "solana_validator_exit";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];

      };
      "solana-version" = rec {
        crateName = "solana-version";
        version = "2.3.4";
        edition = "2021";
        sha256 = "0ssha7ryr4r46qnhkqdyi69a3mg65cavd43ikpvghmx34416hjpr";
        libName = "solana_version";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "agave-feature-set";
            packageId = "agave-feature-set";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "semver";
            packageId = "semver";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
          {
            name = "solana-sanitize";
            packageId = "solana-sanitize";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
          }
        ];
        features = {
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" ];
        };
      };
      "solana-vote-interface" = rec {
        crateName = "solana-vote-interface";
        version = "2.2.5";
        edition = "2021";
        sha256 = "0av7w29f5jwdr7pvir2fwqniwhybal6hqcwqigr5hi0mdxs0hkzg";
        libName = "solana_vote_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bincode";
            packageId = "bincode";
            optional = true;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-hash";
            packageId = "solana-hash";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
            usesDefaultFeatures = false;
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-serde-varint";
            packageId = "solana-serde-varint";
            optional = true;
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
            optional = true;
          }
          {
            name = "solana-serialize-utils";
            packageId = "solana-serialize-utils";
            target = { target, features }: ("solana" == target."os" or null);
          }
          {
            name = "solana-short-vec";
            packageId = "solana-short-vec";
            optional = true;
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            optional = true;
            features = [ "bincode" ];
          }
        ];
        devDependencies = [
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "dev-context-only-utils" ];
          }
        ];
        features = {
          "bincode" = [ "dep:bincode" "dep:solana-serialize-utils" "dep:solana-system-interface" "serde" ];
          "dev-context-only-utils" = [ "bincode" "dep:arbitrary" "solana-pubkey/dev-context-only-utils" ];
          "frozen-abi" = [ "dep:solana-frozen-abi" "dep:solana-frozen-abi-macro" "serde" "solana-hash/frozen-abi" "solana-pubkey/frozen-abi" "solana-short-vec/frozen-abi" ];
          "serde" = [ "dep:serde" "dep:serde_derive" "dep:solana-serde-varint" "dep:solana-short-vec" "solana-hash/serde" "solana-pubkey/serde" ];
        };
        resolvedDefaultFeatures = [ "bincode" "serde" ];
      };
      "solana-zk-sdk" = rec {
        crateName = "solana-zk-sdk";
        version = "2.3.4";
        edition = "2021";
        sha256 = "069i8s9ssxhsy9yjqyjws20m2w5wddxwbvfdsms2455r13lwn4vw";
        libName = "solana_zk_sdk";type = [ "cdylib" "rlib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "aes-gcm-siv";
            packageId = "aes-gcm-siv";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bincode";
            packageId = "bincode";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 4.2.0";
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "digest" "rand_core" "serde" ];
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "merlin";
            packageId = "merlin";
            usesDefaultFeatures = false;
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde";
            packageId = "serde";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "serde_json";
            packageId = "serde_json";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "sha3";
            packageId = "sha3";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-derivation-path";
            packageId = "solana-derivation-path";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "bytemuck" ];
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-seed-derivable";
            packageId = "solana-seed-derivable";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-seed-phrase";
            packageId = "solana-seed-phrase";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-signature";
            packageId = "solana-signature";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "solana-signer";
            packageId = "solana-signer";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "subtle";
            packageId = "subtle";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "zeroize";
            packageId = "zeroize";
            usesDefaultFeatures = false;
            target = { target, features }: (!("solana" == target."os" or null));
            features = [ "zeroize_derive" ];
          }
        ];

      };
      "spinning_top" = rec {
        crateName = "spinning_top";
        version = "0.3.0";
        edition = "2018";
        sha256 = "001kjbiz1gg111rsqxc4pq9a1izx7wshkk38f69h1dbgf4fjsvfr";
        authors = [
          "Philipp Oppermann <dev@phil-opp.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "owning_ref" = [ "lock_api/owning_ref" ];
        };
      };
      "spl-discriminator" = rec {
        crateName = "spl-discriminator";
        version = "0.4.1";
        edition = "2021";
        sha256 = "1czlnhffa6zcsm94zxalc2ah06fk6571c63py5h1d8sl6ni8sfd7";
        libName = "spl_discriminator";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-sha256-hasher";
            packageId = "solana-sha256-hasher";
          }
          {
            name = "spl-discriminator-derive";
            packageId = "spl-discriminator-derive";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
        };
      };
      "spl-discriminator-derive" = rec {
        crateName = "spl-discriminator-derive";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0l67xmjji7g5gpl81d288k044mf7s9208bvi3jqcz796ls743s6r";
        procMacro = true;
        libName = "spl_discriminator_derive";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "spl-discriminator-syn";
            packageId = "spl-discriminator-syn";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "spl-discriminator-syn" = rec {
        crateName = "spl-discriminator-syn";
        version = "0.2.0";
        edition = "2021";
        sha256 = "1fb9ggz816lh7cvnszh3bqsrdyzay8h9fc6arb3ymabw7dcha7wc";
        libName = "spl_discriminator_syn";
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
        ];

      };
      "spl-elgamal-registry" = rec {
        crateName = "spl-elgamal-registry";
        version = "0.2.0";
        edition = "2021";
        sha256 = "0fl3lsamc3dkq9iflbg05ffrqkr149hajsk1jpjk2hnd17nzxvb5";
        libName = "spl_elgamal_registry";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "curve25519" ];
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
            features = [ "bincode" ];
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "bincode" ];
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-token-confidential-transfer-proof-extraction";
            packageId = "spl-token-confidential-transfer-proof-extraction";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-generic-token" = rec {
        crateName = "spl-generic-token";
        version = "1.0.1";
        edition = "2021";
        sha256 = "1p5xdajxzib630dy71m6158y7m7drqvj7lwy7z9mhz6rcsjn46kl";
        libName = "spl_generic_token";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
        ];

      };
      "spl-memo" = rec {
        crateName = "spl-memo";
        version = "6.0.0";
        edition = "2021";
        sha256 = "1jzpz66c1ljb796yfj818bq2kczbvbibi0zbxxk37qvl15y682cz";
        libName = "spl_memo";type = [ "cdylib" "lib" ];
        authors = [
          "Solana Labs Maintainers <maintainers@solanalabs.com>"
        ];
        dependencies = [
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-pod" = rec {
        crateName = "spl-pod";
        version = "0.5.1";
        edition = "2021";
        sha256 = "16bpw7xjmrv9rcw4x4zf2zdkzvccbfkrrflm995i0ydphspsz56r";
        libName = "spl_pod";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
            optional = true;
            features = [ "derive" "unstable__schema" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "borsh" = [ "dep:borsh" "solana-pubkey/borsh" ];
          "serde-traits" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "borsh" ];
      };
      "spl-program-error" = rec {
        crateName = "spl-program-error";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1il8hq2iyjysflrwczjaqscbfbpg3w3ny455bavp0c2m8a5vrplw";
        libName = "spl_program_error";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "spl-program-error-derive";
            packageId = "spl-program-error-derive";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-program-error-derive" = rec {
        crateName = "spl-program-error-derive";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1l2jxnckhngppc3pc7gny080nbq7x105aiwkhpbi0sf6b7i3j99a";
        procMacro = true;
        libName = "spl_program_error_derive";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "spl-tlv-account-resolution" = rec {
        crateName = "spl-tlv-account-resolution";
        version = "0.10.0";
        edition = "2021";
        sha256 = "1mwqp4idvqfpyys8577r8mf25pl2z7fcnqqhb9fp322n45hyj20l";
        libName = "spl_tlv_account_resolution";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "curve25519" ];
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-program-error";
            packageId = "spl-program-error";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "serde-traits" = [ "dep:serde" ];
        };
      };
      "spl-token" = rec {
        crateName = "spl-token";
        version = "8.0.0";
        edition = "2021";
        sha256 = "1nj2yaszml77r6fpkmncx43h8y5l265hbbhxz4250w1cm336fc05";
        libName = "spl_token";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-program-pack";
            packageId = "solana-program-pack";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "bytemuck" ];
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
            features = [ "bincode" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "no-entrypoint" ];
      };
      "spl-token-2022" = rec {
        crateName = "spl-token-2022";
        version = "8.0.1";
        edition = "2021";
        sha256 = "1rbkb6xfzgnnpy04iq0ynzs48ds3bz594gkrbvjsxswy0yxxzw1i";
        libName = "spl_token_2022";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-clock";
            packageId = "solana-clock";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-native-token";
            packageId = "solana-native-token";
          }
          {
            name = "solana-program-entrypoint";
            packageId = "solana-program-entrypoint";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-program-memory";
            packageId = "solana-program-memory";
          }
          {
            name = "solana-program-option";
            packageId = "solana-program-option";
          }
          {
            name = "solana-program-pack";
            packageId = "solana-program-pack";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "solana-rent";
            packageId = "solana-rent";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-security-txt";
            packageId = "solana-security-txt";
          }
          {
            name = "solana-system-interface";
            packageId = "solana-system-interface";
          }
          {
            name = "solana-sysvar";
            packageId = "solana-sysvar";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-elgamal-registry";
            packageId = "spl-elgamal-registry";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-memo";
            packageId = "spl-memo";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-token";
            packageId = "spl-token";
            features = [ "no-entrypoint" ];
          }
          {
            name = "spl-token-confidential-transfer-ciphertext-arithmetic";
            packageId = "spl-token-confidential-transfer-ciphertext-arithmetic";
          }
          {
            name = "spl-token-confidential-transfer-proof-extraction";
            packageId = "spl-token-confidential-transfer-proof-extraction";
          }
          {
            name = "spl-token-confidential-transfer-proof-generation";
            packageId = "spl-token-confidential-transfer-proof-generation";
            target = { target, features }: (!("solana" == target."os" or null));
          }
          {
            name = "spl-token-group-interface";
            packageId = "spl-token-group-interface";
          }
          {
            name = "spl-token-metadata-interface";
            packageId = "spl-token-metadata-interface";
          }
          {
            name = "spl-transfer-hook-interface";
            packageId = "spl-transfer-hook-interface";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "default" = [ "zk-ops" ];
          "serde-traits" = [ "dep:serde" "dep:serde_with" "dep:base64" "spl-pod/serde-traits" ];
        };
        resolvedDefaultFeatures = [ "default" "no-entrypoint" "zk-ops" ];
      };
      "spl-token-confidential-transfer-ciphertext-arithmetic" = rec {
        crateName = "spl-token-confidential-transfer-ciphertext-arithmetic";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1i4rn8jjhfjpk3v9ivcrm8vgjbjs3prf0h6jmiwsmvdmyzx21awl";
        libName = "spl_token_confidential_transfer_ciphertext_arithmetic";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "base64";
            packageId = "base64 0.22.1";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-curve25519";
            packageId = "solana-curve25519";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
        ];

      };
      "spl-token-confidential-transfer-proof-extraction" = rec {
        crateName = "spl-token-confidential-transfer-proof-extraction";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1mkvpc7bs3c43wz12x0hr354wh0ahpcbx94vzax1fk7h1y32j9py";
        libName = "spl_token_confidential_transfer_proof_extraction";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-curve25519";
            packageId = "solana-curve25519";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-instructions-sysvar";
            packageId = "solana-instructions-sysvar";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "solana-sdk-ids";
            packageId = "solana-sdk-ids";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-token-confidential-transfer-proof-generation" = rec {
        crateName = "spl-token-confidential-transfer-proof-generation";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1vzkrsqil7h2j7gy97jhdas0df4qlx3dj0girrsd9bnl81414nxf";
        libName = "spl_token_confidential_transfer_proof_generation";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "curve25519-dalek";
            packageId = "curve25519-dalek 4.2.0";
          }
          {
            name = "solana-zk-sdk";
            packageId = "solana-zk-sdk";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-token-group-interface" = rec {
        crateName = "spl-token-group-interface";
        version = "0.6.0";
        edition = "2021";
        sha256 = "0aaivcld27wdghk2vm3kcm8jb36s4bfbfib0436yfp7qfv6v95sm";
        libName = "spl_token_group_interface";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-token-metadata-interface" = rec {
        crateName = "spl-token-metadata-interface";
        version = "0.7.0";
        edition = "2021";
        sha256 = "1vhnvbh5i6c3sd21m9sws5hbzgmiskaiyjs646k1636yy036wk9h";
        libName = "spl_token_metadata_interface";
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "borsh";
            packageId = "borsh 1.5.7";
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-borsh";
            packageId = "solana-borsh";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
            features = [ "borsh" ];
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
            features = [ "borsh" ];
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "serde-traits" = [ "dep:serde" "spl-pod/serde-traits" ];
        };
      };
      "spl-transfer-hook-interface" = rec {
        crateName = "spl-transfer-hook-interface";
        version = "0.10.0";
        edition = "2021";
        sha256 = "1g9kj611dg71rclp108lds76rfsfjjnasjwcvqxsdaxn96w0bsd7";
        libName = "spl_transfer_hook_interface";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-cpi";
            packageId = "solana-cpi";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-instruction";
            packageId = "solana-instruction";
            features = [ "std" ];
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "solana-pubkey";
            packageId = "solana-pubkey";
            features = [ "curve25519" ];
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "spl-program-error";
            packageId = "spl-program-error";
          }
          {
            name = "spl-tlv-account-resolution";
            packageId = "spl-tlv-account-resolution";
          }
          {
            name = "spl-type-length-value";
            packageId = "spl-type-length-value";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];

      };
      "spl-type-length-value" = rec {
        crateName = "spl-type-length-value";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1xg9h6s4zhpfd364v7bisqzc2msf9c148i7qjcnq5yhlh9afn5yl";
        libName = "spl_type_length_value";type = [ "cdylib" "lib" ];
        authors = [
          "Anza Maintainers <maintainers@anza.xyz>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "num-derive";
            packageId = "num-derive";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "solana-account-info";
            packageId = "solana-account-info";
          }
          {
            name = "solana-decode-error";
            packageId = "solana-decode-error";
          }
          {
            name = "solana-msg";
            packageId = "solana-msg";
          }
          {
            name = "solana-program-error";
            packageId = "solana-program-error";
          }
          {
            name = "spl-discriminator";
            packageId = "spl-discriminator";
          }
          {
            name = "spl-pod";
            packageId = "spl-pod";
          }
          {
            name = "thiserror";
            packageId = "thiserror 2.0.12";
          }
        ];
        features = {
          "derive" = [ "dep:spl-type-length-value-derive" "solana-program-error/borsh" ];
        };
      };
      "stable_deref_trait" = rec {
        crateName = "stable_deref_trait";
        version = "1.2.0";
        edition = "2015";
        sha256 = "1lxjr8q2n534b2lhkxd6l6wcddzjvnksi58zv11f9y0jjmr15wd8";
        authors = [
          "Robert Grosse <n210241048576@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "subtle" = rec {
        crateName = "subtle";
        version = "2.6.1";
        edition = "2018";
        sha256 = "14ijxaymghbl1p0wql9cib5zlwiina7kall6w7g89csprkgbvhhk";
        authors = [
          "Isis Lovecruft <isis@patternsinthevoid.net>"
          "Henry de Valence <hdevalence@hdevalence.ca>"
        ];
        features = {
          "default" = [ "std" "i128" ];
        };
        resolvedDefaultFeatures = [ "const-generics" "default" "i128" "std" ];
      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote/proc-macro" ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "quote" "visit" ];
      };
      "syn 2.0.104" = rec {
        crateName = "syn";
        version = "2.0.104";
        edition = "2021";
        sha256 = "0h2s8cxh5dsh9h41dxnlzpifqqn59cqgm0kljawws61ljq2zgdhp";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "derive" "parsing" "printing" "clone-impls" "proc-macro" ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "quote?/proc-macro" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [ "clone-impls" "default" "derive" "extra-traits" "fold" "full" "parsing" "printing" "proc-macro" "visit" "visit-mut" ];
      };
      "sync_wrapper" = rec {
        crateName = "sync_wrapper";
        version = "1.0.2";
        edition = "2021";
        sha256 = "0qvjyasd6w18mjg5xlaq5jgy84jsjfsvmnn12c13gypxbv75dwhb";
        authors = [
          "Actyx AG <developer@actyx.io>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "futures" = [ "futures-core" ];
          "futures-core" = [ "dep:futures-core" ];
        };
        resolvedDefaultFeatures = [ "futures" "futures-core" ];
      };
      "synstructure 0.12.6" = rec {
        crateName = "synstructure";
        version = "0.12.6";
        edition = "2018";
        sha256 = "03r1lydbf3japnlpc4wka7y90pmz1i0danaj3f9a7b431akdlszk";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "synstructure 0.13.2" = rec {
        crateName = "synstructure";
        version = "0.13.2";
        edition = "2018";
        sha256 = "1lh9lx3r3jb18f8sbj29am5hm9jymvbwh6jb1izsnnxgvgrp12kj";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            usesDefaultFeatures = false;
            features = [ "derive" "parsing" "printing" "clone-impls" "visit" "extra-traits" ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" "syn/proc-macro" "quote/proc-macro" ];
        };
        resolvedDefaultFeatures = [ "default" "proc-macro" ];
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "thiserror 1.0.69" = rec {
        crateName = "thiserror";
        version = "1.0.69";
        edition = "2021";
        sha256 = "0lizjay08agcr5hs9yfzzj6axs53a2rgx070a1dsi3jpkcrzbamn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 1.0.69";
          }
        ];

      };
      "thiserror 2.0.12" = rec {
        crateName = "thiserror";
        version = "2.0.12";
        edition = "2021";
        sha256 = "024791nsc0np63g2pq30cjf9acj38z3jwx9apvvi8qsqmqnqlysn";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl 2.0.12";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "thiserror-impl 1.0.69" = rec {
        crateName = "thiserror-impl";
        version = "1.0.69";
        edition = "2021";
        sha256 = "1h84fmn2nai41cxbhk6pqf46bxqq1b344v8yz089w1chzi76rvjg";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "thiserror-impl 2.0.12" = rec {
        crateName = "thiserror-impl";
        version = "2.0.12";
        edition = "2021";
        sha256 = "07bsn7shydaidvyyrm7jz29vp78vrxr9cr9044rfmn078lmz8z3z";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
          }
        ];

      };
      "time" = rec {
        crateName = "time";
        version = "0.3.41";
        edition = "2021";
        sha256 = "0h0cpiyya8cjlrh00d2r72bmgg4lsdcncs76qpwy0rn2kghijxla";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "deranged";
            packageId = "deranged";
            usesDefaultFeatures = false;
            features = [ "powerfmt" ];
          }
          {
            name = "itoa";
            packageId = "itoa";
            optional = true;
          }
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "powerfmt";
            packageId = "powerfmt";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
          {
            name = "time-macros";
            packageId = "time-macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "time-macros";
            packageId = "time-macros";
          }
        ];
        features = {
          "alloc" = [ "serde?/alloc" ];
          "default" = [ "std" ];
          "formatting" = [ "dep:itoa" "std" "time-macros?/formatting" ];
          "large-dates" = [ "time-macros?/large-dates" ];
          "local-offset" = [ "std" "dep:libc" "dep:num_threads" ];
          "macros" = [ "dep:time-macros" ];
          "parsing" = [ "time-macros?/parsing" ];
          "quickcheck" = [ "dep:quickcheck" "alloc" "deranged/quickcheck" ];
          "rand" = [ "dep:rand" "deranged/rand" ];
          "serde" = [ "dep:serde" "time-macros?/serde" "deranged/serde" ];
          "serde-human-readable" = [ "serde" "formatting" "parsing" ];
          "serde-well-known" = [ "serde" "formatting" "parsing" ];
          "std" = [ "alloc" "deranged/std" ];
          "wasm-bindgen" = [ "dep:js-sys" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "formatting" "macros" "parsing" "std" ];
      };
      "time-core" = rec {
        crateName = "time-core";
        version = "0.1.4";
        edition = "2021";
        sha256 = "0z5h9fknvdvbs2k2s1chpi3ab3jvgkfhdnqwrvixjngm263s7sf9";
        libName = "time_core";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];

      };
      "time-macros" = rec {
        crateName = "time-macros";
        version = "0.2.22";
        edition = "2021";
        sha256 = "0jcaxpw220han2bzbrdlpqhy1s5k9i8ri3lw6n5zv4zcja9p69im";
        procMacro = true;
        libName = "time_macros";
        authors = [
          "Jacob Pratt <open-source@jhpratt.dev>"
          "Time contributors"
        ];
        dependencies = [
          {
            name = "num-conv";
            packageId = "num-conv";
          }
          {
            name = "time-core";
            packageId = "time-core";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "formatting" "parsing" ];
      };
      "tinystr" = rec {
        crateName = "tinystr";
        version = "0.8.1";
        edition = "2021";
        sha256 = "12sc6h3hnn6x78iycm5v6wrs2xhxph0ydm43yyn7gdfw8l8nsksx";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec";
            packageId = "zerovec";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "zerovec?/alloc" ];
          "databake" = [ "dep:databake" ];
          "default" = [ "alloc" ];
          "serde" = [ "dep:serde" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "alloc" "zerovec" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.9.0";
        edition = "2018";
        sha256 = "0w9w8qcifns9lzvlbfwa01y0skhr542anwa3rpn28rg82wgndcq9";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "generic-array" = [ "dep:generic-array" ];
          "latest_stable_rust" = [ "rustc_1_61" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_55" = [ "rustc_1_40" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "rustc_1_61" = [ "rustc_1_57" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "grab_spare_slice" "std" "tinyvec_macros" ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "tokio" = rec {
        crateName = "tokio";
        version = "1.46.1";
        edition = "2021";
        sha256 = "05sxldy7kcgysnxyzz1h1l8j3d9mjyqfh7r48ni27gmg9lsa5hqc";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            target = { target, features }: (target."tokio_taskdump" or false);
          }
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "io-uring";
            packageId = "io-uring";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "mio";
            packageId = "mio";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "mio";
            packageId = "mio";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
            features = [ "os-poll" "os-ext" ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            optional = true;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: ((target."tokio_uring" or false) && ("linux" == target."os" or null));
          }
          {
            name = "socket2";
            packageId = "socket2";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
            features = [ "all" ];
          }
          {
            name = "tokio-macros";
            packageId = "tokio-macros";
            optional = true;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
        ];
        devDependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "socket2";
            packageId = "socket2";
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Security_Authorization" ];
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "full" = [ "fs" "io-util" "io-std" "macros" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "sync" "time" ];
          "io-util" = [ "bytes" ];
          "libc" = [ "dep:libc" ];
          "macros" = [ "tokio-macros" ];
          "mio" = [ "dep:mio" ];
          "net" = [ "libc" "mio/os-poll" "mio/os-ext" "mio/net" "socket2" "windows-sys/Win32_Foundation" "windows-sys/Win32_Security" "windows-sys/Win32_Storage_FileSystem" "windows-sys/Win32_System_Pipes" "windows-sys/Win32_System_SystemServices" ];
          "parking_lot" = [ "dep:parking_lot" ];
          "process" = [ "bytes" "libc" "mio/os-poll" "mio/os-ext" "mio/net" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Threading" "windows-sys/Win32_System_WindowsProgramming" ];
          "rt-multi-thread" = [ "rt" ];
          "signal" = [ "libc" "mio/os-poll" "mio/net" "mio/os-ext" "signal-hook-registry" "windows-sys/Win32_Foundation" "windows-sys/Win32_System_Console" ];
          "signal-hook-registry" = [ "dep:signal-hook-registry" ];
          "socket2" = [ "dep:socket2" ];
          "test-util" = [ "rt" "sync" "time" ];
          "tokio-macros" = [ "dep:tokio-macros" ];
          "tracing" = [ "dep:tracing" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [ "bytes" "default" "fs" "full" "io-std" "io-util" "libc" "macros" "mio" "net" "parking_lot" "process" "rt" "rt-multi-thread" "signal" "signal-hook-registry" "socket2" "sync" "time" "tokio-macros" "windows-sys" ];
      };
      "tokio-macros" = rec {
        crateName = "tokio-macros";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1f6az2xbvqp7am417b78d1za8axbvjvxnmkakz9vr8s52czx81kf";
        procMacro = true;
        libName = "tokio_macros";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "tokio-rustls 0.24.1" = rec {
        crateName = "tokio-rustls";
        version = "0.24.1";
        edition = "2018";
        sha256 = "10bhibg57mqir7xjhb2xmf24xgfpx6fzpyw720a4ih8a737jg0y2";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            usesDefaultFeatures = false;
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "dangerous_configuration" = [ "rustls/dangerous_configuration" ];
          "default" = [ "logging" "tls12" ];
          "logging" = [ "rustls/logging" ];
          "secret_extraction" = [ "rustls/secret_extraction" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "default" "logging" "tls12" ];
      };
      "tokio-rustls 0.26.2" = rec {
        crateName = "tokio-rustls";
        version = "0.26.2";
        edition = "2021";
        sha256 = "16wf007q3584j46wc4s0zc4szj6280g23hka6x6bgs50l4v7nwlf";
        libName = "tokio_rustls";
        dependencies = [
          {
            name = "rustls";
            packageId = "rustls 0.23.29";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "tokio";
            packageId = "tokio";
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "aws-lc-rs" = [ "aws_lc_rs" ];
          "aws_lc_rs" = [ "rustls/aws_lc_rs" ];
          "default" = [ "logging" "tls12" "aws_lc_rs" ];
          "fips" = [ "rustls/fips" ];
          "logging" = [ "rustls/logging" ];
          "ring" = [ "rustls/ring" ];
          "tls12" = [ "rustls/tls12" ];
        };
        resolvedDefaultFeatures = [ "ring" "tls12" ];
      };
      "tokio-stream" = rec {
        crateName = "tokio-stream";
        version = "0.1.17";
        edition = "2021";
        sha256 = "0ix0770hfp4x5rh5bl7vsnr3d4iz4ms43i522xw70xaap9xqv9gc";
        libName = "tokio_stream";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" "test-util" ];
          }
        ];
        features = {
          "default" = [ "time" ];
          "fs" = [ "tokio/fs" ];
          "full" = [ "time" "net" "io-util" "fs" "sync" "signal" ];
          "io-util" = [ "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "signal" = [ "tokio/signal" ];
          "sync" = [ "tokio/sync" "tokio-util" ];
          "time" = [ "tokio/time" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [ "default" "time" ];
      };
      "tokio-tungstenite" = rec {
        crateName = "tokio-tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "0v1v24l27hxi5hlchs7hfd5rgzi167x0ygbw220nvq0w5b5msb91";
        libName = "tokio_tungstenite";
        authors = [
          "Daniel Abramov <dabramov@snapview.de>"
          "Alexey Galakhov <agalakhov@snapview.de>"
        ];
        dependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [ "sink" "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-util" ];
          }
          {
            name = "tokio-rustls";
            packageId = "tokio-rustls 0.24.1";
            optional = true;
          }
          {
            name = "tungstenite";
            packageId = "tungstenite";
            usesDefaultFeatures = false;
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.25.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            usesDefaultFeatures = false;
            features = [ "io-std" "macros" "net" "rt-multi-thread" "time" ];
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" "tokio-rustls" "stream" "tungstenite/__rustls-tls" "handshake" ];
          "connect" = [ "stream" "tokio/net" "handshake" ];
          "default" = [ "connect" "handshake" ];
          "handshake" = [ "tungstenite/handshake" ];
          "native-tls" = [ "native-tls-crate" "tokio-native-tls" "stream" "tungstenite/native-tls" "handshake" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" "tungstenite/native-tls-vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "tokio-native-tls" = [ "dep:tokio-native-tls" ];
          "tokio-rustls" = [ "dep:tokio-rustls" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "connect" "default" "handshake" "rustls" "rustls-tls-webpki-roots" "stream" "tokio-rustls" "webpki-roots" ];
      };
      "tokio-util" = rec {
        crateName = "tokio-util";
        version = "0.7.15";
        edition = "2021";
        sha256 = "1pypd9lm1fdnpw0779pqvc16qqrxjy63dgfm20ajhpbdmnlkk9b6";
        libName = "tokio_util";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "sync" ];
          }
        ];
        devDependencies = [
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
        ];
        features = {
          "__docs_rs" = [ "futures-util" ];
          "compat" = [ "futures-io" ];
          "full" = [ "codec" "compat" "io-util" "time" "net" "rt" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-util" = [ "dep:futures-util" ];
          "hashbrown" = [ "dep:hashbrown" ];
          "io-util" = [ "io" "tokio/rt" "tokio/io-util" ];
          "net" = [ "tokio/net" ];
          "rt" = [ "tokio/rt" "tokio/sync" "futures-util" "hashbrown" ];
          "slab" = [ "dep:slab" ];
          "time" = [ "tokio/time" "slab" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "codec" "default" "io" ];
      };
      "toml" = rec {
        crateName = "toml";
        version = "0.5.11";
        edition = "2018";
        sha256 = "0d2266nx8b3n22c7k24x4428z6di8n83a9n466jm7a2hipfz1xzl";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
          }
        ];
        features = {
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [ "indexmap" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.11";
        edition = "2021";
        sha256 = "077ix2hb1dcya49hmi1avalwbixmrs75zgzb3b2i7g2gizwdmk92";
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "toml_edit" = rec {
        crateName = "toml_edit";
        version = "0.22.27";
        edition = "2021";
        sha256 = "16l15xm40404asih8vyjvnka9g0xs9i4hfb6ry3ph9g419k8rzj1";
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow";
            optional = true;
          }
        ];
        features = {
          "default" = [ "parse" "display" ];
          "display" = [ "dep:toml_write" ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [ "dep:serde" "toml_datetime/serde" "dep:serde_spanned" ];
          "unstable-debug" = [ "winnow?/debug" ];
        };
        resolvedDefaultFeatures = [ "parse" ];
      };
      "tower" = rec {
        crateName = "tower";
        version = "0.5.2";
        edition = "2018";
        sha256 = "1ybmd59nm4abl9bsvy6rx31m4zvzp5rja2slzpn712y9b68ssffh";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            optional = true;
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            optional = true;
          }
          {
            name = "sync_wrapper";
            packageId = "sync_wrapper";
            optional = true;
          }
          {
            name = "tokio";
            packageId = "tokio";
            optional = true;
            features = [ "sync" ];
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "macros" "sync" "test-util" "rt-multi-thread" ];
          }
        ];
        features = {
          "__common" = [ "futures-core" "pin-project-lite" ];
          "balance" = [ "discover" "load" "ready-cache" "make" "slab" "util" ];
          "buffer" = [ "__common" "tokio/sync" "tokio/rt" "tokio-util" "tracing" ];
          "discover" = [ "__common" ];
          "filter" = [ "__common" "futures-util" ];
          "full" = [ "balance" "buffer" "discover" "filter" "hedge" "limit" "load" "load-shed" "make" "ready-cache" "reconnect" "retry" "spawn-ready" "steer" "timeout" "util" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "hdrhistogram" = [ "dep:hdrhistogram" ];
          "hedge" = [ "util" "filter" "futures-util" "hdrhistogram" "tokio/time" "tracing" ];
          "indexmap" = [ "dep:indexmap" ];
          "limit" = [ "__common" "tokio/time" "tokio/sync" "tokio-util" "tracing" ];
          "load" = [ "__common" "tokio/time" "tracing" ];
          "load-shed" = [ "__common" ];
          "log" = [ "tracing/log" ];
          "make" = [ "futures-util" "pin-project-lite" "tokio/io-std" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "ready-cache" = [ "futures-core" "futures-util" "indexmap" "tokio/sync" "tracing" "pin-project-lite" ];
          "reconnect" = [ "make" "tokio/io-std" "tracing" ];
          "retry" = [ "__common" "tokio/time" "util" ];
          "slab" = [ "dep:slab" ];
          "spawn-ready" = [ "__common" "futures-util" "tokio/sync" "tokio/rt" "util" "tracing" ];
          "sync_wrapper" = [ "dep:sync_wrapper" ];
          "timeout" = [ "pin-project-lite" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-stream" = [ "dep:tokio-stream" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "__common" "futures-util" "pin-project-lite" "sync_wrapper" ];
        };
        resolvedDefaultFeatures = [ "__common" "futures-core" "futures-util" "pin-project-lite" "sync_wrapper" "timeout" "tokio" "util" ];
      };
      "tower-http" = rec {
        crateName = "tower-http";
        version = "0.6.6";
        edition = "2018";
        sha256 = "1wh51y4rf03f91c6rvli6nwzsarx7097yx6sqlm75ag27pbjzj5d";
        libName = "tower_http";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "http";
            packageId = "http 1.3.1";
          }
          {
            name = "http-body";
            packageId = "http-body";
            optional = true;
          }
          {
            name = "iri-string";
            packageId = "iri-string";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tower";
            packageId = "tower";
            optional = true;
          }
          {
            name = "tower-layer";
            packageId = "tower-layer";
          }
          {
            name = "tower-service";
            packageId = "tower-service";
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "http-body";
            packageId = "http-body";
          }
          {
            name = "tower";
            packageId = "tower";
            features = [ "buffer" "util" "retry" "make" "timeout" ];
          }
        ];
        features = {
          "async-compression" = [ "dep:async-compression" ];
          "auth" = [ "base64" "validate-request" ];
          "base64" = [ "dep:base64" ];
          "catch-panic" = [ "tracing" "futures-util/std" "dep:http-body" "dep:http-body-util" ];
          "compression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-full" = [ "compression-br" "compression-deflate" "compression-gzip" "compression-zstd" ];
          "compression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "compression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "tokio-util" "tokio" ];
          "decompression-br" = [ "async-compression/brotli" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-deflate" = [ "async-compression/zlib" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-full" = [ "decompression-br" "decompression-deflate" "decompression-gzip" "decompression-zstd" ];
          "decompression-gzip" = [ "async-compression/gzip" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "decompression-zstd" = [ "async-compression/zstd" "futures-core" "dep:http-body" "dep:http-body-util" "tokio-util" "tokio" ];
          "follow-redirect" = [ "futures-util" "dep:http-body" "iri-string" "tower/util" ];
          "fs" = [ "futures-core" "futures-util" "dep:http-body" "dep:http-body-util" "tokio/fs" "tokio-util/io" "tokio/io-util" "dep:http-range-header" "mime_guess" "mime" "percent-encoding" "httpdate" "set-status" "futures-util/alloc" "tracing" ];
          "full" = [ "add-extension" "auth" "catch-panic" "compression-full" "cors" "decompression-full" "follow-redirect" "fs" "limit" "map-request-body" "map-response-body" "metrics" "normalize-path" "propagate-header" "redirect" "request-id" "sensitive-headers" "set-header" "set-status" "timeout" "trace" "util" "validate-request" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-util" = [ "dep:futures-util" ];
          "httpdate" = [ "dep:httpdate" ];
          "iri-string" = [ "dep:iri-string" ];
          "limit" = [ "dep:http-body" "dep:http-body-util" ];
          "metrics" = [ "dep:http-body" "tokio/time" ];
          "mime" = [ "dep:mime" ];
          "mime_guess" = [ "dep:mime_guess" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "request-id" = [ "uuid" ];
          "timeout" = [ "dep:http-body" "tokio/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-util" = [ "dep:tokio-util" ];
          "tower" = [ "dep:tower" ];
          "trace" = [ "dep:http-body" "tracing" ];
          "tracing" = [ "dep:tracing" ];
          "util" = [ "tower" ];
          "uuid" = [ "dep:uuid" ];
          "validate-request" = [ "mime" ];
        };
        resolvedDefaultFeatures = [ "follow-redirect" "futures-util" "iri-string" "tower" ];
      };
      "tower-layer" = rec {
        crateName = "tower-layer";
        version = "0.3.3";
        edition = "2018";
        sha256 = "03kq92fdzxin51w8iqix06dcfgydyvx7yr6izjq0p626v9n2l70j";
        libName = "tower_layer";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tower-service" = rec {
        crateName = "tower-service";
        version = "0.3.3";
        edition = "2018";
        sha256 = "1hzfkvkci33ra94xjx64vv3pp0sq346w06fpkcdwjcid7zhvdycd";
        libName = "tower_service";
        authors = [
          "Tower Maintainers <team@tower-rs.com>"
        ];

      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.41";
        edition = "2018";
        sha256 = "1l5xrzyjfyayrwhvhldfnwdyligi1mpqm8mzbi2m1d6y6p2hlkkq";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "log";
            packageId = "log";
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [ "std" "attributes" ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [ "log" "std" ];
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.34";
        edition = "2018";
        sha256 = "0y3nc4mpnr79rzkrcylv5f5bnjjp19lsxwis9l4kzs97ya0jbldr";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" "valuable?/std" ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [ "once_cell" "std" ];
      };
      "try-lock" = rec {
        crateName = "try-lock";
        version = "0.2.5";
        edition = "2015";
        sha256 = "0jqijrrvm1pyq34zn1jmy2vihd4jcrjlvsh4alkjahhssjnsn8g4";
        libName = "try_lock";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];

      };
      "tungstenite" = rec {
        crateName = "tungstenite";
        version = "0.20.1";
        edition = "2018";
        sha256 = "1fbgcv3h4h1bhhf5sqbwqsp7jnc44bi4m41sgmhzdsk2zl8aqgcy";
        authors = [
          "Alexey Galakhov"
          "Daniel Abramov"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "bytes";
            packageId = "bytes";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
            optional = true;
          }
          {
            name = "http";
            packageId = "http 0.2.12";
            optional = true;
          }
          {
            name = "httparse";
            packageId = "httparse";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
          {
            name = "rustls";
            packageId = "rustls 0.21.12";
            optional = true;
          }
          {
            name = "sha1";
            packageId = "sha1";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
          }
          {
            name = "utf-8";
            packageId = "utf-8";
          }
          {
            name = "webpki-roots";
            packageId = "webpki-roots 0.24.0";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "rand";
            packageId = "rand 0.8.5";
          }
        ];
        features = {
          "__rustls-tls" = [ "rustls" ];
          "data-encoding" = [ "dep:data-encoding" ];
          "default" = [ "handshake" ];
          "handshake" = [ "data-encoding" "http" "httparse" "sha1" "url" ];
          "http" = [ "dep:http" ];
          "httparse" = [ "dep:httparse" ];
          "native-tls" = [ "native-tls-crate" ];
          "native-tls-crate" = [ "dep:native-tls-crate" ];
          "native-tls-vendored" = [ "native-tls" "native-tls-crate/vendored" ];
          "rustls" = [ "dep:rustls" ];
          "rustls-native-certs" = [ "dep:rustls-native-certs" ];
          "rustls-tls-native-roots" = [ "__rustls-tls" "rustls-native-certs" ];
          "rustls-tls-webpki-roots" = [ "__rustls-tls" "webpki-roots" ];
          "sha1" = [ "dep:sha1" ];
          "url" = [ "dep:url" ];
          "webpki-roots" = [ "dep:webpki-roots" ];
        };
        resolvedDefaultFeatures = [ "__rustls-tls" "data-encoding" "default" "handshake" "http" "httparse" "rustls" "rustls-tls-webpki-roots" "sha1" "url" "webpki-roots" ];
      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.18.0";
        edition = "2018";
        sha256 = "0gwgz8n91pv40gabrr1lzji0b0hsmg0817njpy397bq7rvizzk0x";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.18";
        edition = "2018";
        sha256 = "04k5r6sijkafzljykdq26mhjpmhdx4jwzvn1lh90g9ax9903jpss";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.2.1";
        edition = "2021";
        sha256 = "0k0mlq7xy1y1kq6cgv1r2rs2knn6rln3g3af50rhi0dkgp60f6ja";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "cjk" ];
          "rustc-dep-of-std" = [ "std" "core" ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "cjk" "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.6";
        edition = "2015";
        sha256 = "0lzqaky89fq0bcrh6jj6bhlz37scfd8c7dsj5dq7y32if56c1hgb";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "universal-hash" = rec {
        crateName = "universal-hash";
        version = "0.5.1";
        edition = "2021";
        sha256 = "1sh79x677zkncasa95wz05b36134822w6qxmi1ck05fwi33f47gw";
        libName = "universal_hash";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
          {
            name = "subtle";
            packageId = "subtle";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "std" = [ "crypto-common/std" ];
        };
      };
      "untrusted" = rec {
        crateName = "untrusted";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1ha7ib98vkc538x0z60gfn0fc5whqdd85mb87dvisdcaifi6vjwf";
        authors = [
          "Brian Smith <brian@briansmith.org>"
        ];

      };
      "uriparse" = rec {
        crateName = "uriparse";
        version = "0.6.4";
        edition = "2018";
        sha256 = "1zsjwc715x4720y4b3dsdras50imvaakqgyl59n3j2fq0kyd0002";
        authors = [
          "Scott Godwin <sgodwincs@gmail.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.4";
        edition = "2018";
        sha256 = "0q6sgznyy2n4l5lm16zahkisvc9nip9aa5q1pps7656xra3bdy1j";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
          {
            name = "idna";
            packageId = "idna";
            usesDefaultFeatures = false;
            features = [ "alloc" "compiled_data" ];
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "idna/std" "percent-encoding/std" "form_urlencoded/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "utf-8" = rec {
        crateName = "utf-8";
        version = "0.7.6";
        edition = "2015";
        sha256 = "1a9ns3fvgird0snjkd3wbdhwd3zdpc2h5gpyybrfr6ra5pkqxk09";
        libName = "utf8";
        authors = [
          "Simon Sapin <simon.sapin@exyr.org>"
        ];

      };
      "utf8_iter" = rec {
        crateName = "utf8_iter";
        version = "1.0.4";
        edition = "2021";
        sha256 = "1gmna9flnj8dbyd8ba17zigrp9c4c3zclngf5lnb5yvz1ri41hdn";
        authors = [
          "Henri Sivonen <hsivonen@hsivonen.fi>"
        ];

      };
      "valence-common" = rec {
        crateName = "valence-common";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./programs/common; };
        libName = "valence_common";
        dependencies = [
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
        ];

      };
      "valence-sdk" = rec {
        crateName = "valence-sdk";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./sdk; };
        libName = "valence_sdk";
        dependencies = [
          {
            name = "anchor-client";
            packageId = "anchor-client";
          }
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "registry";
            packageId = "registry";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "shard";
            packageId = "shard";
          }
          {
            name = "solana-client";
            packageId = "solana-client";
          }
          {
            name = "solana-sdk";
            packageId = "solana-sdk";
          }
        ];

      };
      "valence-tests" = rec {
        crateName = "valence-tests";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith { filter = sourceFilter;  src = ./tests/integration; };
        libName = "valence_tests";
        dependencies = [
          {
            name = "anchor-client";
            packageId = "anchor-client";
          }
          {
            name = "anchor-lang";
            packageId = "anchor-lang";
          }
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "registry";
            packageId = "registry";
          }
          {
            name = "sha2";
            packageId = "sha2 0.10.9";
          }
          {
            name = "shard";
            packageId = "shard";
          }
          {
            name = "solana-program";
            packageId = "solana-program";
          }
          {
            name = "solana-sdk";
            packageId = "solana-sdk";
          }
          {
            name = "tokio";
            packageId = "tokio";
            features = [ "full" ];
          }
          {
            name = "valence-sdk";
            packageId = "valence-sdk";
          }
        ];

      };
      "vcpkg" = rec {
        crateName = "vcpkg";
        version = "0.2.15";
        edition = "2015";
        sha256 = "09i4nf5y8lig6xgj3f7fyrvzd3nlaw4znrihw8psidvv5yk4xkdc";
        authors = [
          "Jim McGrath <jimmc2@gmail.com>"
        ];

      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "want" = rec {
        crateName = "want";
        version = "0.3.1";
        edition = "2018";
        sha256 = "03hbfrnvqqdchb5kgxyavb9jabwza0dmh2vw5kg0dq8rxl57d9xz";
        authors = [
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        dependencies = [
          {
            name = "try-lock";
            packageId = "try-lock";
          }
        ];

      };
      "wasi 0.11.1+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.11.1+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "0jx49r7nbkbhyfrfyhz0bm4817yrnxgd3jiwwwfv0zl439jyrwyc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasi 0.14.2+wasi-0.2.4" = rec {
        crateName = "wasi";
        version = "0.14.2+wasi-0.2.4";
        edition = "2021";
        sha256 = "1cwcqjr3dgdq8j325awgk8a715h0hg0f7jqzsb077n4qm6jzk0wn";
        authors = [
          "The Cranelift Project Developers"
        ];
        dependencies = [
          {
            name = "wit-bindgen-rt";
            packageId = "wit-bindgen-rt";
            features = [ "bitflags" ];
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasi 0.9.0+wasi-snapshot-preview1" = rec {
        crateName = "wasi";
        version = "0.9.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "06g5v3vrdapfzvfq662cij7v8a1flwr2my45nnncdv2galrdzkfc";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [ "compiler_builtins" "core" "rustc-std-workspace-alloc" ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1x8ymcm6yi3i1rwj78myl1agqv2m86i648myy3lc97s9swlqkp0y";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "rustversion";
            packageId = "rustversion";
            optional = true;
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        devDependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
          "default" = [ "std" "msrv" ];
          "enable-interning" = [ "std" ];
          "msrv" = [ "rustversion" ];
          "rustversion" = [ "dep:rustversion" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [ "serde" "serde_json" "std" ];
          "serde_json" = [ "dep:serde_json" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [ "wasm-bindgen-macro/xxx_debug_only_print_generated_code" ];
        };
        resolvedDefaultFeatures = [ "default" "msrv" "rustversion" "std" ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1ihbf1hq3y81c4md9lyh6lcwbx6a5j0fw4fygd423g62lm8hc2ig";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.50";
        edition = "2021";
        sha256 = "0q8ymi6i9r3vxly551dhxcyai7nc491mspj0j1wbafxwq074fpam";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [ "MessageEvent" "Worker" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" "web-sys/std" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.100";
        edition = "2021";
        sha256 = "01xls2dvzh38yj17jgrbiib1d3nyad7k2yw9s0mpklwys333zrkz";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.100";
        edition = "2021";
        sha256 = "1plm8dh20jg2id0320pbmrlsv6cazfv6b6907z19ys4z1jj7xs4a";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "visit" "visit-mut" "full" ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.100";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "0gffxvqgbh9r9xl36gprkfnh3w9gl8wgia6xrin7v11sjcxxf18s";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];

      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.77";
        edition = "2021";
        sha256 = "1lnmc1ffbq34qw91nndklqqm75rasaffj2g4f8h1yvqqz4pdvdik";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [ "AudioNode" "EventTarget" ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [ "EventTarget" "Node" ];
          "AudioBufferSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "AudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "AudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [ "AudioNode" "EventTarget" ];
          "AudioStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [ "AudioNode" "EventTarget" ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [ "AudioNode" "EventTarget" ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [ "EventTarget" "MediaStream" ];
          "CanvasCaptureMediaStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "CdataSection" = [ "CharacterData" "EventTarget" "Node" "Text" ];
          "ChannelMergerNode" = [ "AudioNode" "EventTarget" ];
          "ChannelSplitterNode" = [ "AudioNode" "EventTarget" ];
          "CharacterData" = [ "EventTarget" "Node" ];
          "ChromeWorker" = [ "EventTarget" "Worker" ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [ "CharacterData" "EventTarget" "Node" ];
          "CompositionEvent" = [ "Event" "UiEvent" ];
          "ConstantSourceNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "ConvolverNode" = [ "AudioNode" "EventTarget" ];
          "CssAnimation" = [ "Animation" "EventTarget" ];
          "CssConditionRule" = [ "CssGroupingRule" "CssRule" ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [ "CssConditionRule" "CssGroupingRule" "CssRule" ];
          "CssTransition" = [ "Animation" "EventTarget" ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "DelayNode" = [ "AudioNode" "EventTarget" ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [ "EventTarget" "Node" ];
          "DocumentFragment" = [ "EventTarget" "Node" ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [ "EventTarget" "Node" ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "DynamicsCompressorNode" = [ "AudioNode" "EventTarget" ];
          "Element" = [ "EventTarget" "Node" ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [ "Event" "ExtendableEvent" ];
          "FetchEvent" = [ "Event" "ExtendableEvent" ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [ "Event" "UiEvent" ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [ "AudioNode" "EventTarget" ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlAudioElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "HtmlBaseElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBodyElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlBrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlButtonElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlCanvasElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDataListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDetailsElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDialogElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDirectoryElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDivElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlDocument" = [ "Document" "EventTarget" "Node" ];
          "HtmlElement" = [ "Element" "EventTarget" "Node" ];
          "HtmlEmbedElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFieldSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFontElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlFrameSetElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHeadingElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHrElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlHtmlElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlIFrameElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlImageElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlInputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLabelElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLegendElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLiElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlLinkElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMapElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMediaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMenuItemElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMetaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlMeterElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlModElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlObjectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptGroupElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParagraphElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlParamElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPictureElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlPreElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlProgressElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlQuoteElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlScriptElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSelectElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSlotElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSourceElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlSpanElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlStyleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCaptionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableCellElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableColElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableRowElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTableSectionElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTemplateElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTextAreaElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTimeElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTitleElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlTrackElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUListElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlUnknownElement" = [ "Element" "EventTarget" "HtmlElement" "Node" ];
          "HtmlVideoElement" = [ "Element" "EventTarget" "HtmlElement" "HtmlMediaElement" "Node" ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [ "DomRequest" "EventTarget" ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [ "EventTarget" "IdbRequest" ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [ "AudioNode" "EventTarget" ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [ "Event" "UiEvent" ];
          "KeyFrameRequestEvent" = [ "Event" ];
          "KeyboardEvent" = [ "Event" "UiEvent" ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [ "EventTarget" "MediaStream" ];
          "MathMlElement" = [ "Element" "EventTarget" "Node" ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamAudioSourceNode" = [ "AudioNode" "EventTarget" ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [ "EventTarget" "MediaStreamTrack" ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [ "EventTarget" "MidiPort" ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [ "EventTarget" "MidiPort" ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [ "Event" "UiEvent" ];
          "MouseScrollEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [ "Event" "ExtendableEvent" ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [ "BaseAudioContext" "EventTarget" ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [ "AudioNode" "AudioScheduledSourceNode" "EventTarget" ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [ "AudioNode" "EventTarget" ];
          "PaymentMethodChangeEvent" = [ "Event" "PaymentRequestUpdateEvent" ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [ "PerformanceEntry" "PerformanceResourceTiming" ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [ "CharacterData" "EventTarget" "Node" ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [ "Event" "ExtendableEvent" ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcRtpScriptTransformer" = [ "EventTarget" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcTransformEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "SFrameTransform" = [ "EventTarget" ];
          "SFrameTransformErrorEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [ "AudioNode" "EventTarget" ];
          "ScrollAreaEvent" = [ "Event" "UiEvent" ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [ "DocumentFragment" "EventTarget" "Node" ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [ "EventTarget" "WorkerGlobalScope" ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [ "Event" "SpeechSynthesisEvent" ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [ "AudioNode" "EventTarget" ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateMotionElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimateTransformElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgAnimationElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgCircleElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgClipPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgComponentTransferFunctionElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgDefsElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgDescElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgElement" = [ "Element" "EventTarget" "Node" ];
          "SvgEllipseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgFilterElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgForeignObjectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGeometryElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgGraphicsElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgLineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgLinearGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgMarkerElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMaskElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgMetadataElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgPolygonElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgPolylineElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgRadialGradientElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGradientElement" ];
          "SvgRectElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGeometryElement" "SvgGraphicsElement" ];
          "SvgScriptElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSetElement" = [ "Element" "EventTarget" "Node" "SvgAnimationElement" "SvgElement" ];
          "SvgStopElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgStyleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgSwitchElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgSymbolElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgTextContentElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgTextElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "SvgTextPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTextPositioningElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" ];
          "SvgTitleElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgUseElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgViewElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgaElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgfeBlendElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeColorMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeComponentTransferElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeCompositeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeConvolveMatrixElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDiffuseLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDisplacementMapElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDistantLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeDropShadowElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFloodElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeFuncAElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncBElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncGElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeFuncRElement" = [ "Element" "EventTarget" "Node" "SvgComponentTransferFunctionElement" "SvgElement" ];
          "SvgfeGaussianBlurElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeImageElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMergeNodeElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeMorphologyElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeOffsetElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfePointLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpecularLightingElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeSpotLightElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTileElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgfeTurbulenceElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvggElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgmPathElement" = [ "Element" "EventTarget" "Node" "SvgElement" ];
          "SvgsvgElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" ];
          "SvgtSpanElement" = [ "Element" "EventTarget" "Node" "SvgElement" "SvgGraphicsElement" "SvgTextContentElement" "SvgTextPositioningElement" ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [ "AbortSignal" "EventTarget" ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [ "CharacterData" "EventTarget" "Node" ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [ "Event" "UiEvent" ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [ "EventTarget" "PermissionStatus" ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [ "EventTarget" "MediaStreamTrack" ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [ "EventTarget" "TextTrackCue" ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [ "AudioNode" "EventTarget" ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [ "DomMatrix" "DomMatrixReadOnly" ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [ "Event" "MouseEvent" "UiEvent" ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [ "Document" "EventTarget" "Node" ];
          "XmlHttpRequest" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [ "EventTarget" "XmlHttpRequestEventTarget" ];
          "XrBoundedReferenceSpace" = [ "EventTarget" "XrReferenceSpace" "XrSpace" ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [ "EventTarget" "XrSpace" ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [ "EventTarget" "PermissionStatus" ];
          "XrReferenceSpace" = [ "EventTarget" "XrSpace" ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [ "EventTarget" "XrLayer" ];
          "default" = [ "std" ];
          "std" = [ "wasm-bindgen/std" "js-sys/std" ];
        };
        resolvedDefaultFeatures = [ "AbortController" "AbortSignal" "Blob" "BlobPropertyBag" "Event" "EventTarget" "File" "FormData" "Headers" "MessageEvent" "Performance" "ReadableStream" "Request" "RequestCredentials" "RequestInit" "RequestMode" "Response" "ServiceWorkerGlobalScope" "Window" "Worker" "WorkerGlobalScope" "console" "default" "std" ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1fx05yqx83dhx628wb70fyy10yjfq1jpl20qfqhdkymi13rq0ras";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target = { target, features }: ((builtins.elem "wasm" target."family") && ("unknown" == target."os" or null));
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "webpki-root-certs 0.26.11" = rec {
        crateName = "webpki-root-certs";
        version = "0.26.11";
        edition = "2021";
        sha256 = "0gir7r0pb4lirqfx7gzgcw3pz3aj4hfmykri62svyvhlj7pz1ivm";
        libName = "webpki_root_certs";
        dependencies = [
          {
            name = "webpki-root-certs";
            packageId = "webpki-root-certs 1.0.1";
            rename = "parent";
          }
        ];

      };
      "webpki-root-certs 1.0.1" = rec {
        crateName = "webpki-root-certs";
        version = "1.0.1";
        edition = "2021";
        sha256 = "03i83z7cibzms4qr0bjhvi1ml06xp0kp1rv98jy63mdpn8aqn4w6";
        libName = "webpki_root_certs";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "webpki-roots 0.24.0" = rec {
        crateName = "webpki-roots";
        version = "0.24.0";
        edition = "2018";
        crateBin = [];
        sha256 = "120q85pvzpckvvrg085a5jhh91fby94pgiv9y1san7lxbmnm94dj";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-webpki";
            packageId = "rustls-webpki 0.101.7";
            rename = "webpki";
          }
        ];

      };
      "webpki-roots 0.25.4" = rec {
        crateName = "webpki-roots";
        version = "0.25.4";
        edition = "2018";
        sha256 = "1qgqa615gc1cgklls4bkjp9jv9pvv3jnl82lc6wd7dkximywa82z";
        libName = "webpki_roots";

      };
      "webpki-roots 1.0.1" = rec {
        crateName = "webpki-roots";
        version = "1.0.1";
        edition = "2021";
        sha256 = "00mm4bhkvis59pm2a7yz3ak6q8rykcj0ddj09wxfskm285ddv0l7";
        libName = "webpki_roots";
        dependencies = [
          {
            name = "rustls-pki-types";
            packageId = "rustls-pki-types";
            rename = "pki-types";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wide" = rec {
        crateName = "wide";
        version = "0.7.33";
        edition = "2018";
        sha256 = "00yd2sg83xvfrjjlwndyk49fjx8jlmlrz8byigndig32rf7dmr8c";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "safe_arch";
            packageId = "safe_arch";
            features = [ "bytemuck" ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" "std" ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (target.name == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [ "basetsd" "consoleapi" "dbghelp" "errhandlingapi" "libloaderapi" "minwinbase" "minwindef" "processenv" "processthreadsapi" "profileapi" "sysinfoapi" "winbase" "winerror" "winnt" ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" "Win32_Storage_FileSystem" "Win32_System_Console" "Win32_System_SystemInformation" ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Globalization" "default" ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_Pipes" "Win32_System_SystemServices" "Win32_System_Threading" "Win32_System_WindowsProgramming" "default" ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [ "Wdk" "Wdk_Foundation" "Wdk_Storage" "Wdk_Storage_FileSystem" "Wdk_System" "Wdk_System_IO" "Win32" "Win32_Foundation" "Win32_Networking" "Win32_Networking_WinSock" "Win32_Security" "Win32_Security_Authentication" "Win32_Security_Authentication_Identity" "Win32_Security_Credentials" "Win32_Security_Cryptography" "Win32_Storage" "Win32_Storage_FileSystem" "Win32_System" "Win32_System_Console" "Win32_System_IO" "Win32_System_LibraryLoader" "Win32_System_Memory" "Win32_System_Pipes" "Win32_System_SystemInformation" "Win32_System_WindowsProgramming" "Win32_UI" "Win32_UI_Input" "Win32_UI_Input_KeyboardAndMouse" "default" ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (target.name == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (target.name == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (target.name == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (target.name == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (target.name == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (target.name == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (target.name == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (target.name == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target = { target, features }: (("aarch64" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (target.name == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target = { target, features }: (("x86" == target."arch" or null) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target = { target, features }: (("x86_64" == target."arch" or null) && ("gnu" == target."env" or null) && (!("llvm" == target."abi" or null)) && (!(target."windows_raw_dylib" or false)));
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target = { target, features }: ((("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null)) && ("msvc" == target."env" or null) && (!(target."windows_raw_dylib" or false)));
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "winnow" = rec {
        crateName = "winnow";
        version = "0.7.12";
        edition = "2021";
        sha256 = "159y8inpy86xswmr4yig9hxss0v2fssyqy1kk12504n8jbsfpvgk";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [ "std" "dep:anstream" "dep:anstyle" "dep:is_terminal_polyfill" "dep:terminal_size" ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [ "alloc" "memchr?/std" ];
          "unstable-doc" = [ "alloc" "std" "simd" "unstable-recover" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "std" ];
      };
      "wit-bindgen-rt" = rec {
        crateName = "wit-bindgen-rt";
        version = "0.39.0";
        edition = "2021";
        sha256 = "1hd65pa5hp0nl664m94bg554h4zlhrzmkjsf6lsgsb7yc4734hkg";
        libName = "wit_bindgen_rt";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags";
            optional = true;
          }
        ];
        features = {
          "async" = [ "dep:futures" "dep:once_cell" ];
          "bitflags" = [ "dep:bitflags" ];
        };
        resolvedDefaultFeatures = [ "bitflags" ];
      };
      "writeable" = rec {
        crateName = "writeable";
        version = "0.6.1";
        edition = "2021";
        sha256 = "1fx29zncvbrqzgz7li88vzdm8zvgwgwy2r9bnjqxya09pfwi0bza";
        authors = [
          "The ICU4X Project Developers"
        ];
        features = {
          "either" = [ "dep:either" ];
        };
      };
      "x509-parser" = rec {
        crateName = "x509-parser";
        version = "0.14.0";
        edition = "2018";
        sha256 = "1j7b3xxpwik38y9rajglmhis551gj3zz5irw1vj1bqkwnsvvxv70";
        libName = "x509_parser";
        authors = [
          "Pierre Chifflier <chifflier@wzdftpd.net>"
        ];
        dependencies = [
          {
            name = "asn1-rs";
            packageId = "asn1-rs";
            features = [ "datetime" ];
          }
          {
            name = "base64";
            packageId = "base64 0.13.1";
          }
          {
            name = "data-encoding";
            packageId = "data-encoding";
          }
          {
            name = "der-parser";
            packageId = "der-parser";
            features = [ "bigint" ];
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "nom";
            packageId = "nom";
          }
          {
            name = "oid-registry";
            packageId = "oid-registry";
            features = [ "crypto" "x509" "x962" ];
          }
          {
            name = "rusticata-macros";
            packageId = "rusticata-macros";
          }
          {
            name = "thiserror";
            packageId = "thiserror 1.0.69";
          }
          {
            name = "time";
            packageId = "time";
            features = [ "formatting" ];
          }
        ];
        features = {
          "ring" = [ "dep:ring" ];
          "verify" = [ "ring" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "yoke" = rec {
        crateName = "yoke";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1k4mfr48vgi7wh066y11b7v1ilakghlnlhw9snzz8vi2p00vnhaz";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "stable_deref_trait";
            packageId = "stable_deref_trait";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke-derive";
            packageId = "yoke-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "stable_deref_trait/alloc" "serde?/alloc" "zerofrom/alloc" ];
          "default" = [ "alloc" "zerofrom" ];
          "derive" = [ "dep:yoke-derive" "zerofrom/derive" ];
          "serde" = [ "dep:serde" ];
          "zerofrom" = [ "dep:zerofrom" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "zerofrom" ];
      };
      "yoke-derive" = rec {
        crateName = "yoke-derive";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dha5jrjz9jaq8kmxq1aag86b98zbnm9lyjrihy5sv716sbkrniq";
        procMacro = true;
        libName = "yoke_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.8.26";
        edition = "2021";
        sha256 = "0bvsj0qzq26zc6nlrm3z10ihvjspyngs7n0jw1fz031i7h6xsf8h";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [ "alloc" "derive" "simd" "std" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "std" = [ "alloc" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [ "simd" ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.8.26";
        edition = "2021";
        sha256 = "10aiywi5qkha0mpsnb1zjwi44wl2rhdncaf3ykbp4i9nqm65pkwy";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
          "Jack Wrenn <jswrenn@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" ];
          }
        ];

      };
      "zerofrom" = rec {
        crateName = "zerofrom";
        version = "0.1.6";
        edition = "2021";
        sha256 = "19dyky67zkjichsb7ykhv0aqws3q0jfvzww76l66c19y6gh45k2h";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "zerofrom-derive";
            packageId = "zerofrom-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "dep:zerofrom-derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" ];
      };
      "zerofrom-derive" = rec {
        crateName = "zerofrom-derive";
        version = "0.1.6";
        edition = "2021";
        sha256 = "00l5niw7c1b0lf1vhvajpjmcnbdp2vn96jg4nmkhq2db0rp5s7np";
        procMacro = true;
        libName = "zerofrom_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "fold" ];
          }
          {
            name = "synstructure";
            packageId = "synstructure 0.13.2";
          }
        ];

      };
      "zeroize" = rec {
        crateName = "zeroize";
        version = "1.8.1";
        edition = "2021";
        sha256 = "1pjdrmjwmszpxfd7r860jx54cyk94qk59x13sc307cvr5256glyf";
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "zeroize_derive";
            packageId = "zeroize_derive";
            optional = true;
          }
        ];
        features = {
          "default" = [ "alloc" ];
          "derive" = [ "zeroize_derive" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zeroize_derive" = [ "dep:zeroize_derive" ];
        };
        resolvedDefaultFeatures = [ "alloc" "default" "zeroize_derive" ];
      };
      "zeroize_derive" = rec {
        crateName = "zeroize_derive";
        version = "1.4.2";
        edition = "2021";
        sha256 = "0sczjlqjdmrp3wn62g7mw6p438c9j4jgp2f9zamd56991mdycdnf";
        procMacro = true;
        authors = [
          "The RustCrypto Project Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "full" "extra-traits" "visit" ];
          }
        ];

      };
      "zerotrie" = rec {
        crateName = "zerotrie";
        version = "0.2.2";
        edition = "2021";
        sha256 = "15gmka7vw5k0d24s0vxgymr2j6zn2iwl12wpmpnpjgsqg3abpw1n";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "displaydoc";
            packageId = "displaydoc";
            usesDefaultFeatures = false;
          }
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "databake" = [ "dep:databake" "zerovec?/databake" ];
          "litemap" = [ "dep:litemap" "alloc" ];
          "serde" = [ "dep:serde" "dep:litemap" "alloc" "litemap/serde" "zerovec?/serde" ];
          "yoke" = [ "dep:yoke" ];
          "zerofrom" = [ "dep:zerofrom" ];
          "zerovec" = [ "dep:zerovec" ];
        };
        resolvedDefaultFeatures = [ "yoke" "zerofrom" ];
      };
      "zerovec" = rec {
        crateName = "zerovec";
        version = "0.11.2";
        edition = "2021";
        sha256 = "0a2457fmz39k9vrrj3rm82q5ykdhgxgbwfz2r6fa6nq11q4fn1aa";
        authors = [
          "The ICU4X Project Developers"
        ];
        dependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerofrom";
            packageId = "zerofrom";
            usesDefaultFeatures = false;
          }
          {
            name = "zerovec-derive";
            packageId = "zerovec-derive";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "yoke";
            packageId = "yoke";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        features = {
          "databake" = [ "dep:databake" ];
          "derive" = [ "dep:zerovec-derive" ];
          "hashmap" = [ "dep:twox-hash" "alloc" ];
          "serde" = [ "dep:serde" "alloc" ];
          "yoke" = [ "dep:yoke" ];
        };
        resolvedDefaultFeatures = [ "alloc" "derive" "yoke" ];
      };
      "zerovec-derive" = rec {
        crateName = "zerovec-derive";
        version = "0.11.1";
        edition = "2021";
        sha256 = "13zms8hj7vzpfswypwggyfr4ckmyc7v3di49pmj8r1qcz9z275jv";
        procMacro = true;
        libName = "zerovec_derive";
        authors = [
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.104";
            features = [ "extra-traits" ];
          }
        ];

      };
      "zstd" = rec {
        crateName = "zstd";
        version = "0.13.3";
        edition = "2018";
        sha256 = "12n0h4w9l526li7jl972rxpyf012jw3nwmji2qbjghv9ll8y67p9";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-safe";
            packageId = "zstd-safe";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        features = {
          "arrays" = [ "zstd-safe/arrays" ];
          "bindgen" = [ "zstd-safe/bindgen" ];
          "debug" = [ "zstd-safe/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-safe/experimental" ];
          "fat-lto" = [ "zstd-safe/fat-lto" ];
          "legacy" = [ "zstd-safe/legacy" ];
          "no_asm" = [ "zstd-safe/no_asm" ];
          "pkg-config" = [ "zstd-safe/pkg-config" ];
          "thin" = [ "zstd-safe/thin" ];
          "thin-lto" = [ "zstd-safe/thin-lto" ];
          "zdict_builder" = [ "zstd-safe/zdict_builder" ];
          "zstdmt" = [ "zstd-safe/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "default" "legacy" "zdict_builder" ];
      };
      "zstd-safe" = rec {
        crateName = "zstd-safe";
        version = "7.2.4";
        edition = "2018";
        sha256 = "179vxmkzhpz6cq6mfzvgwc99bpgllkr6lwxq7ylh5dmby3aw8jcg";
        libName = "zstd_safe";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        dependencies = [
          {
            name = "zstd-sys";
            packageId = "zstd-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "bindgen" = [ "zstd-sys/bindgen" ];
          "debug" = [ "zstd-sys/debug" ];
          "default" = [ "legacy" "arrays" "zdict_builder" ];
          "experimental" = [ "zstd-sys/experimental" ];
          "fat-lto" = [ "zstd-sys/fat-lto" ];
          "legacy" = [ "zstd-sys/legacy" ];
          "no_asm" = [ "zstd-sys/no_asm" ];
          "pkg-config" = [ "zstd-sys/pkg-config" ];
          "seekable" = [ "zstd-sys/seekable" ];
          "std" = [ "zstd-sys/std" ];
          "thin" = [ "zstd-sys/thin" ];
          "thin-lto" = [ "zstd-sys/thin-lto" ];
          "zdict_builder" = [ "zstd-sys/zdict_builder" ];
          "zstdmt" = [ "zstd-sys/zstdmt" ];
        };
        resolvedDefaultFeatures = [ "arrays" "legacy" "std" "zdict_builder" ];
      };
      "zstd-sys" = rec {
        crateName = "zstd-sys";
        version = "2.0.15+zstd.1.5.7";
        edition = "2018";
        links = "zstd";
        sha256 = "0dx2l7dyw1p7x7g3p1pfd25ip36hr22hvmgixm6cgl4pvlyii0gb";
        libName = "zstd_sys";
        authors = [
          "Alexandre Bury <alexandre.bury@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "bindgen" = [ "dep:bindgen" ];
          "default" = [ "legacy" "zdict_builder" "bindgen" ];
        };
        resolvedDefaultFeatures = [ "legacy" "std" "zdict_builder" ];
      };
    };

    #
# crate2nix/default.nix (excerpt start)
#

  /*
    Target (platform) data for conditional dependencies.
    This corresponds roughly to what buildRustCrate is setting.
  */
  makeDefaultTarget = platform: {
    name = platform.rust.rustcTarget;

    unix = platform.isUnix;
    windows = platform.isWindows;
    fuchsia = true;
    test = false;

    inherit (platform.rust.platform)
      arch
      os
      vendor
      ;
    family = platform.rust.platform.target-family;
    env = "gnu";
    endian = if platform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
    pointer_width = toString platform.parsed.cpu.bits;
    debug_assertions = false;
  };

  registryUrl =
    { registries
    , url
    , crate
    , version
    , sha256
    ,
    }:
    let
      dl = registries.${url}.dl;
      tmpl = [
        "{crate}"
        "{version}"
        "{prefix}"
        "{lowerprefix}"
        "{sha256-checksum}"
      ];
    in
    with lib.strings;
    if lib.lists.any (i: hasInfix "{}" dl) tmpl then
      let
        prefix =
          if builtins.stringLength crate == 1 then
            "1"
          else if builtins.stringLength crate == 2 then
            "2"
          else
            "${builtins.substring 0 2 crate}/${builtins.substring 2 (builtins.stringLength crate - 2) crate}";
      in
      builtins.replaceStrings tmpl [
        crate
        version
        prefix
        (lib.strings.toLower prefix)
        sha256
      ]
    else
      "${dl}/${crate}/${version}/download";

  # Filters common temp files and build files.
  # TODO(pkolloch): Substitute with gitignore filter
  sourceFilter =
    name: type:
    let
      baseName = builtins.baseNameOf (builtins.toString name);
    in
      !(
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory"
          && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory" && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

  /*
    Returns a crate which depends on successful test execution
    of crate given as the second argument.

    testCrateFlags: list of flags to pass to the test exectuable
    testInputs: list of packages that should be available during test execution
  */
  crateWithTest =
    { crate
    , testCrate
    , testCrateFlags
    , testInputs
    , testPreRun
    , testPostRun
    ,
    }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override (_: {
              buildTests = true;
            });
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n" (
              pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]
            );
          in
          pkgs.stdenvNoCC.mkDerivation {
            name = "run-tests-${testCrate.name}";

            inherit (crate) src;

            inherit testCrateFlags;

            buildInputs = testInputs;

            buildPhase = ''
              set -e
              export RUST_BACKTRACE=1

              # build outputs
              testRoot=target/debug
              mkdir -p $testRoot

              # executables of the crate
              # we copy to prevent std::env::current_exe() to resolve to a store location
              for i in ${crate}/bin/*; do
                cp "$i" "$testRoot"
              done
              chmod +w -R .

              # test harness executables are suffixed with a hash, like cargo does
              # this allows to prevent name collision with the main
              # executables of the crate
              hash=$(basename $out)
              for file in ${drv}/tests/*; do
                f=$testRoot/$(basename $file)-$hash
                cp $file $f
                ${testCommand}
              done
            '';
          };
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (
          lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          ''
        );

  # A restricted overridable version of builtRustCratesWithFeatures.
  buildRustCrateWithFeatures =
    { packageId
    , features ? rootFeatures
    , crateOverrides ? defaultCrateOverrides
    , buildRustCrateForPkgsFunc ? null
    , runTests ? false
    , testCrateFlags ? [ ]
    , testInputs ? [ ]
    , # Any command to run immediatelly before a test is executed.
      testPreRun ? ""
    , # Any command run immediatelly after a test is executed.
      testPostRun ? ""
    ,
    }:
    lib.makeOverridable
      (
        { features
        , crateOverrides
        , runTests
        , testCrateFlags
        , testInputs
        , testPreRun
        , testPostRun
        ,
        }:
        let
          buildRustCrateForPkgsFuncOverriden =
            if buildRustCrateForPkgsFunc != null then
              buildRustCrateForPkgsFunc
            else
              (
                if crateOverrides == pkgs.defaultCrateOverrides then
                  buildRustCrateForPkgs
                else
                  pkgs:
                  (buildRustCrateForPkgs pkgs).override {
                    defaultCrateOverrides = crateOverrides;
                  }
              );
          builtRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = false;
          };
          builtTestRustCrates = builtRustCratesWithFeatures {
            inherit packageId features;
            buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
            runTests = true;
          };
          drv = builtRustCrates.crates.${packageId};
          testDrv = builtTestRustCrates.crates.${packageId};
          derivation =
            if runTests then
              crateWithTest
                {
                  crate = drv;
                  testCrate = testDrv;
                  inherit
                    testCrateFlags
                    testInputs
                    testPreRun
                    testPostRun
                    ;
                }
            else
              drv;
        in
        derivation
      )
      {
        inherit
          features
          crateOverrides
          runTests
          testCrateFlags
          testInputs
          testPreRun
          testPostRun
          ;
      };

  /*
    Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
    for the corresponding crate.
  */
  builtRustCratesWithFeatures =
    { packageId
    , features
    , crateConfigs ? crates
    , buildRustCrateForPkgsFunc
    , runTests
    , makeTarget ? makeDefaultTarget
    ,
    }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args
          // {
            inherit rootPackageId;
            target = makeTarget stdenv.hostPlatform // {
              test = runTests;
            };
          }
        );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs =
          pkgs:
          let
            self = {
              crates = lib.mapAttrs
                (
                  packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId
                )
                crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl =
          self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            devDependencies = lib.optionals (runTests && packageId == rootPackageId) (
              crateConfig'.devDependencies or [ ]
            );
            dependencies = dependencyDerivations {
              inherit features;
              inherit (self) target;
              buildByPackageId =
                depPackageId:
                # proc_macro crates must be compiled for the build architecture
                if crateConfigs.${depPackageId}.procMacro or false then
                  self.build.crates.${depPackageId}
                else
                  self.crates.${depPackageId};
              dependencies = (crateConfig.dependencies or [ ]) ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit features;
              inherit (self.build) target;
              buildByPackageId = depPackageId: self.build.crates.${depPackageId};
              dependencies = crateConfig.buildDependencies or [ ];
            };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped = lib.groupBy (dependency: dependency.name) dependenciesWithRenames;
                versionAndRename =
                  dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  {
                    inherit (dep) rename;
                    inherit (package) version;
                  };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs (
            crateConfig
            // {
              src =
                crateConfig.src or (pkgs.fetchurl rec {
                  name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                  # https://www.pietroalbini.org/blog/downloading-crates-io/
                  # Not rate-limited, CDN URL.
                  url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                  sha256 =
                    assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                    crateConfig.sha256;
                });
              extraRustcOpts =
                lib.lists.optional (targetFeatures != [ ])
                  "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit
                features
                dependencies
                buildDependencies
                crateRenames
                release
                ;
            }
          );
      in
      builtByPackageIdByPkgs;

  # Returns the actual derivations for the given dependencies.
  dependencyDerivations =
    { buildByPackageId
    , features
    , dependencies
    , target
    ,
    }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

  /*
    Returns a sanitized version of val with all values substituted that cannot
    be serialized as JSON.
  */
  sanitizeForJson =
    val:
    if builtins.isAttrs val then
      lib.mapAttrs (n: sanitizeForJson) val
    else if builtins.isList val then
      builtins.map sanitizeForJson val
    else if builtins.isFunction val then
      "function"
    else
      val;

  # Returns various tools to debug a crate.
  debugCrate =
    { packageId
    , target ? makeDefaultTarget stdenv.hostPlatform
    ,
    }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      {
        internal = debug;
      };

  /*
    Returns differences between cargo default features and crate2nix default
    features.

    This is useful for verifying the feature resolution in crate2nix.
  */
  diffDefaultPackageFeatures =
    { crateConfigs ? crates
    , packageId
    , target
    ,
    }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [
          mergedFeatures
          configs
        ];
        onlyInCargo = builtins.attrNames (
          lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined
        );
        onlyInCrate2Nix = builtins.attrNames (
          lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined
        );
        differentFeatures = lib.filterAttrs
          (
            n: v:
              (v ? "crate2nix")
              && (v ? "cargo")
              && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
          )
          combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

  /*
    Returns an attrset mapping packageId to the list of enabled features.

    If multiple paths to a dependency enable different features, the
    corresponding feature sets are merged. Features in rust are additive.
  */
  mergePackageFeatures =
    { crateConfigs ? crates
    , packageId
    , rootPackageId ? packageId
    , features ? rootFeatures
    , dependencyPath ? [ crates.${packageId}.crateName ]
    , featuresByPackageId ? { }
    , target
    , # Adds devDependencies to the crate with rootPackageId.
      runTests ? false
    , ...
    }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures =
          dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          {
            inherit packageId features;
          };
        resolveDependencies =
          cache: path: dependencies:
            assert (builtins.isAttrs cache);
            assert (builtins.isList dependencies);
            let
              enabledDependencies = filterEnabledDependencies {
                inherit dependencies target;
                features = enabledFeatures;
              };
              directDependencies = map depWithResolvedFeatures enabledDependencies;
              foldOverCache = op: lib.foldl op cache directDependencies;
            in
            foldOverCache (
              cache:
              { packageId, features }:
              let
                cacheFeatures = cache.${packageId} or [ ];
                combinedFeatures = sortedUnique (cacheFeatures ++ features);
              in
              if cache ? ${packageId} && cache.${packageId} == combinedFeatures then
                cache
              else
                mergePackageFeatures {
                  features = combinedFeatures;
                  featuresByPackageId = cache;
                  inherit
                    crateConfigs
                    packageId
                    target
                    runTests
                    rootPackageId
                    ;
                }
            );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies = resolveDependencies cacheWithSelf "dep" (
          crateConfig.dependencies or [ ]
          ++ lib.optionals (runTests && packageId == rootPackageId) (crateConfig.devDependencies or [ ])
        );
        cacheWithAll = resolveDependencies cacheWithDependencies "build" (
          crateConfig.buildDependencies or [ ]
        );
      in
      cacheWithAll;

  # Returns the enabled dependencies given the enabled features.
  filterEnabledDependencies =
    { dependencies
    , features
    , target
    ,
    }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter
        (
          dep:
          let
            targetFunc = dep.target or (features: true);
          in
          targetFunc { inherit features target; }
          && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep) features)
        )
        dependencies;

  # Returns whether the given feature should enable the given dependency.
  doesFeatureEnableDependency =
    dependency: feature:
    let
      name = dependency.rename or dependency.name;
      prefix = "${name}/";
      len = builtins.stringLength prefix;
      startsWithPrefix = builtins.substring 0 len feature == prefix;
    in
    feature == name || feature == "dep:" + name || startsWithPrefix;

  /*
    Returns the expanded features for the given inputFeatures by applying the
    rules in featureMap.

    featureMap is an attribute set which maps feature names to lists of further
    feature names to enable in case this feature is selected.
  */
  expandFeatures =
    featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle =
          oldSeen: inputFeatures:
          if inputFeatures != [ ] then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // {
                ${feature} = 1;
              };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else
            [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

  /*
    This function adds optional dependencies as features if they are enabled
    indirectly by dependency features. This function mimics Cargo's behavior
    described in a note at:
    https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
  */
  enableFeatures =
    dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap
          (
            dependency:
              assert (builtins.isAttrs dependency);
              let
                enabled = builtins.any (doesFeatureEnableDependency dependency) features;
              in
              if (dependency.optional or false) && enabled then
                [ (dependency.rename or dependency.name) ]
              else
                [ ]
          )
          dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

  /*
    Returns the actual features for the given dependency.

    features: The features of the crate that refers this dependency.
  */
  dependencyFeatures =
    features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil = if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s: if lib.hasPrefix prefix s then lib.removePrefix prefix s else null;
            extractFeature =
              feature:
              lib.findFirst (f: f != null) null (
                map (prefix: stripPrefixMatch prefix feature) [
                  (name + "/")
                  (name + "?/")
                ]
              );
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

  # Sorts and removes duplicates from a list of strings.
  sortedUnique =
    features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

  deprecationWarning =
    message: value:
    if strictDeprecation then
      builtins.throw "strictDeprecation enabled, aborting: ${message}"
    else
      builtins.trace message value;

  #
  # crate2nix/default.nix (excerpt end)
  #
  };
}

