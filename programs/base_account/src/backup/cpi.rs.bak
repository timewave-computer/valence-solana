use anchor_lang::prelude::*;
use anchor_lang::solana_program::{
    instruction::{Instruction},
    program::invoke_signed,
};
use crate::state::AccountState;
use borsh::ser::BorshSerialize;

// Define the CPI contexts for each instruction
#[derive(Accounts)]
pub struct InitializeCpi<'info> {
    #[account(mut)]
    pub account: Account<'info, AccountState>,
    
    #[account(mut)]
    pub authority: Signer<'info>,
    
    pub system_program: Program<'info, System>,
}

// CPI function for initializing a base account
pub fn initialize<'a, 'b, 'c, 'info>(
    ctx: CpiContext<'a, 'b, 'c, 'info, InitializeCpi<'info>>,
    max_libraries: u8,
    max_token_accounts: u8,
) -> Result<()> {
    let ix = Instruction {
        program_id: ctx.program.key(),
        accounts: vec![
            AccountMeta::new(ctx.accounts.account.key(), false),
            AccountMeta::new_readonly(ctx.accounts.authority.key(), true),
            AccountMeta::new_readonly(ctx.accounts.system_program.key(), false),
        ],
        data: (&(1u8, max_libraries, max_token_accounts)).try_to_vec()?,
    };

    invoke_signed(
        &ix,
        &[
            ctx.accounts.account.to_account_info(),
            ctx.accounts.authority.to_account_info(),
            ctx.accounts.system_program.to_account_info(),
        ],
        ctx.signer_seeds,
    )
    .map_err(Into::into)
}

#[derive(Clone)]
pub struct BaseAccountProgram;

impl anchor_lang::Id for BaseAccountProgram {
    fn id() -> Pubkey {
        crate::ID
    }
} 